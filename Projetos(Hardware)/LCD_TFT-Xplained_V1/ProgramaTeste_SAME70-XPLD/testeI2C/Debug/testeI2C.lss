
testeI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007dc4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407dc4  00407dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00407dcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000fc  204009b8  00408784  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400ab4  00408880  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402ab8  0040a884  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00014193  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000252b  00000000  00000000  00034bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000071c8  00000000  00000000  000370fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c10  00000000  00000000  0003e2c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  0003eed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007f3e  00000000  00000000  0003fa6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b47d  00000000  00000000  000479ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008e7bb  00000000  00000000  00052e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000470c  00000000  00000000  000e15e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 2a 40 20 a9 17 40 00 59 18 40 00 59 18 40 00     .*@ ..@.Y.@.Y.@.
  400010:	59 18 40 00 59 18 40 00 59 18 40 00 00 00 00 00     Y.@.Y.@.Y.@.....
	...
  40002c:	59 18 40 00 59 18 40 00 00 00 00 00 59 18 40 00     Y.@.Y.@.....Y.@.
  40003c:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  40004c:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  40005c:	59 18 40 00 59 18 40 00 00 00 00 00 45 0d 40 00     Y.@.Y.@.....E.@.
  40006c:	5d 0d 40 00 75 0d 40 00 59 18 40 00 59 18 40 00     ].@.u.@.Y.@.Y.@.
  40007c:	59 18 40 00 8d 0d 40 00 a5 0d 40 00 59 18 40 00     Y.@...@...@.Y.@.
  40008c:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  40009c:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  4000ac:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  4000bc:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  4000cc:	59 18 40 00 00 00 00 00 59 18 40 00 00 00 00 00     Y.@.....Y.@.....
  4000dc:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  4000ec:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  4000fc:	59 18 40 00 59 18 40 00 59 18 40 00 59 18 40 00     Y.@.Y.@.Y.@.Y.@.
  40010c:	59 18 40 00 59 18 40 00 00 00 00 00 00 00 00 00     Y.@.Y.@.........
  40011c:	00 00 00 00 59 18 40 00 59 18 40 00 59 18 40 00     ....Y.@.Y.@.Y.@.
  40012c:	59 18 40 00 59 18 40 00 00 00 00 00 59 18 40 00     Y.@.Y.@.....Y.@.
  40013c:	59 18 40 00                                         Y.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00407dcc 	.word	0x00407dcc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407dcc 	.word	0x00407dcc
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00407dcc 	.word	0x00407dcc
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400ebd 	.word	0x00400ebd
  40022c:	00400f29 	.word	0x00400f29
  400230:	00400f99 	.word	0x00400f99

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400ef5 	.word	0x00400ef5
  4002a0:	00401011 	.word	0x00401011

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	0040102d 	.word	0x0040102d
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00401049 	.word	0x00401049
  400418:	00401065 	.word	0x00401065

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	004019c9 	.word	0x004019c9
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400dbd 	.word	0x00400dbd
  40051c:	00400e39 	.word	0x00400e39
  400520:	00401861 	.word	0x00401861
  400524:	00400499 	.word	0x00400499

00400528 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400528:	b580      	push	{r7, lr}
  40052a:	b086      	sub	sp, #24
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400534:	2300      	movs	r3, #0
  400536:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400538:	68fb      	ldr	r3, [r7, #12]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d012      	beq.n	400564 <_read+0x3c>
		return -1;
  40053e:	f04f 33ff 	mov.w	r3, #4294967295
  400542:	e013      	b.n	40056c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400544:	4b0b      	ldr	r3, [pc, #44]	; (400574 <_read+0x4c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	4a0b      	ldr	r2, [pc, #44]	; (400578 <_read+0x50>)
  40054a:	6812      	ldr	r2, [r2, #0]
  40054c:	68b9      	ldr	r1, [r7, #8]
  40054e:	4610      	mov	r0, r2
  400550:	4798      	blx	r3
		ptr++;
  400552:	68bb      	ldr	r3, [r7, #8]
  400554:	3301      	adds	r3, #1
  400556:	60bb      	str	r3, [r7, #8]
		nChars++;
  400558:	697b      	ldr	r3, [r7, #20]
  40055a:	3301      	adds	r3, #1
  40055c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	3b01      	subs	r3, #1
  400562:	607b      	str	r3, [r7, #4]
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	2b00      	cmp	r3, #0
  400568:	dcec      	bgt.n	400544 <_read+0x1c>
	}
	return nChars;
  40056a:	697b      	ldr	r3, [r7, #20]
}
  40056c:	4618      	mov	r0, r3
  40056e:	3718      	adds	r7, #24
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	20400a80 	.word	0x20400a80
  400578:	20400a88 	.word	0x20400a88

0040057c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40057c:	b580      	push	{r7, lr}
  40057e:	b086      	sub	sp, #24
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400588:	2300      	movs	r3, #0
  40058a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	2b01      	cmp	r3, #1
  400590:	d01e      	beq.n	4005d0 <_write+0x54>
  400592:	68fb      	ldr	r3, [r7, #12]
  400594:	2b02      	cmp	r3, #2
  400596:	d01b      	beq.n	4005d0 <_write+0x54>
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	2b03      	cmp	r3, #3
  40059c:	d018      	beq.n	4005d0 <_write+0x54>
		return -1;
  40059e:	f04f 33ff 	mov.w	r3, #4294967295
  4005a2:	e019      	b.n	4005d8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005a4:	4b0e      	ldr	r3, [pc, #56]	; (4005e0 <_write+0x64>)
  4005a6:	681a      	ldr	r2, [r3, #0]
  4005a8:	4b0e      	ldr	r3, [pc, #56]	; (4005e4 <_write+0x68>)
  4005aa:	6818      	ldr	r0, [r3, #0]
  4005ac:	68bb      	ldr	r3, [r7, #8]
  4005ae:	1c59      	adds	r1, r3, #1
  4005b0:	60b9      	str	r1, [r7, #8]
  4005b2:	781b      	ldrb	r3, [r3, #0]
  4005b4:	4619      	mov	r1, r3
  4005b6:	4790      	blx	r2
  4005b8:	4603      	mov	r3, r0
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	da02      	bge.n	4005c4 <_write+0x48>
			return -1;
  4005be:	f04f 33ff 	mov.w	r3, #4294967295
  4005c2:	e009      	b.n	4005d8 <_write+0x5c>
		}
		++nChars;
  4005c4:	697b      	ldr	r3, [r7, #20]
  4005c6:	3301      	adds	r3, #1
  4005c8:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	3b01      	subs	r3, #1
  4005ce:	607b      	str	r3, [r7, #4]
  4005d0:	687b      	ldr	r3, [r7, #4]
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d1e6      	bne.n	4005a4 <_write+0x28>
	}
	return nChars;
  4005d6:	697b      	ldr	r3, [r7, #20]
}
  4005d8:	4618      	mov	r0, r3
  4005da:	3718      	adds	r7, #24
  4005dc:	46bd      	mov	sp, r7
  4005de:	bd80      	pop	{r7, pc}
  4005e0:	20400a84 	.word	0x20400a84
  4005e4:	20400a88 	.word	0x20400a88

004005e8 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4005e8:	b480      	push	{r7}
  4005ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005f0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4005f4:	4b09      	ldr	r3, [pc, #36]	; (40061c <SCB_EnableICache+0x34>)
  4005f6:	2200      	movs	r2, #0
  4005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4005fc:	4a07      	ldr	r2, [pc, #28]	; (40061c <SCB_EnableICache+0x34>)
  4005fe:	4b07      	ldr	r3, [pc, #28]	; (40061c <SCB_EnableICache+0x34>)
  400600:	695b      	ldr	r3, [r3, #20]
  400602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  400608:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40060c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  400610:	bf00      	nop
  400612:	46bd      	mov	sp, r7
  400614:	f85d 7b04 	ldr.w	r7, [sp], #4
  400618:	4770      	bx	lr
  40061a:	bf00      	nop
  40061c:	e000ed00 	.word	0xe000ed00

00400620 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  400620:	b480      	push	{r7}
  400622:	b08b      	sub	sp, #44	; 0x2c
  400624:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400626:	4b26      	ldr	r3, [pc, #152]	; (4006c0 <SCB_EnableDCache+0xa0>)
  400628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40062c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40062e:	69fb      	ldr	r3, [r7, #28]
  400630:	0b5b      	lsrs	r3, r3, #13
  400632:	f3c3 030e 	ubfx	r3, r3, #0, #15
  400636:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400638:	69fb      	ldr	r3, [r7, #28]
  40063a:	f003 0307 	and.w	r3, r3, #7
  40063e:	3304      	adds	r3, #4
  400640:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  400642:	69fb      	ldr	r3, [r7, #28]
  400644:	08db      	lsrs	r3, r3, #3
  400646:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40064a:	617b      	str	r3, [r7, #20]
  40064c:	697b      	ldr	r3, [r7, #20]
  40064e:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400650:	68bb      	ldr	r3, [r7, #8]
  400652:	fab3 f383 	clz	r3, r3
  400656:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  400658:	687b      	ldr	r3, [r7, #4]
  40065a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  40065c:	f003 031f 	and.w	r3, r3, #31
  400660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  400662:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400666:	697b      	ldr	r3, [r7, #20]
  400668:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40066a:	6a3a      	ldr	r2, [r7, #32]
  40066c:	693b      	ldr	r3, [r7, #16]
  40066e:	fa02 f303 	lsl.w	r3, r2, r3
  400672:	4619      	mov	r1, r3
  400674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400676:	69bb      	ldr	r3, [r7, #24]
  400678:	fa02 f303 	lsl.w	r3, r2, r3
  40067c:	430b      	orrs	r3, r1
  40067e:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  400680:	4a0f      	ldr	r2, [pc, #60]	; (4006c0 <SCB_EnableDCache+0xa0>)
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  400688:	6a3b      	ldr	r3, [r7, #32]
  40068a:	1e5a      	subs	r2, r3, #1
  40068c:	623a      	str	r2, [r7, #32]
  40068e:	2b00      	cmp	r3, #0
  400690:	d1eb      	bne.n	40066a <SCB_EnableDCache+0x4a>
        } while(sets--);
  400692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400694:	1e5a      	subs	r2, r3, #1
  400696:	627a      	str	r2, [r7, #36]	; 0x24
  400698:	2b00      	cmp	r3, #0
  40069a:	d1e4      	bne.n	400666 <SCB_EnableDCache+0x46>
  40069c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4006a0:	4a07      	ldr	r2, [pc, #28]	; (4006c0 <SCB_EnableDCache+0xa0>)
  4006a2:	4b07      	ldr	r3, [pc, #28]	; (4006c0 <SCB_EnableDCache+0xa0>)
  4006a4:	695b      	ldr	r3, [r3, #20]
  4006a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4006aa:	6153      	str	r3, [r2, #20]
  4006ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4006b0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4006b4:	bf00      	nop
  4006b6:	372c      	adds	r7, #44	; 0x2c
  4006b8:	46bd      	mov	sp, r7
  4006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006be:	4770      	bx	lr
  4006c0:	e000ed00 	.word	0xe000ed00

004006c4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4006c4:	b580      	push	{r7, lr}
  4006c6:	b082      	sub	sp, #8
  4006c8:	af00      	add	r7, sp, #0
  4006ca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4006cc:	6878      	ldr	r0, [r7, #4]
  4006ce:	4b03      	ldr	r3, [pc, #12]	; (4006dc <sysclk_enable_peripheral_clock+0x18>)
  4006d0:	4798      	blx	r3
}
  4006d2:	bf00      	nop
  4006d4:	3708      	adds	r7, #8
  4006d6:	46bd      	mov	sp, r7
  4006d8:	bd80      	pop	{r7, pc}
  4006da:	bf00      	nop
  4006dc:	00401081 	.word	0x00401081

004006e0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4006e4:	200a      	movs	r0, #10
  4006e6:	4b08      	ldr	r3, [pc, #32]	; (400708 <ioport_init+0x28>)
  4006e8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4006ea:	200b      	movs	r0, #11
  4006ec:	4b06      	ldr	r3, [pc, #24]	; (400708 <ioport_init+0x28>)
  4006ee:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4006f0:	200c      	movs	r0, #12
  4006f2:	4b05      	ldr	r3, [pc, #20]	; (400708 <ioport_init+0x28>)
  4006f4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4006f6:	2010      	movs	r0, #16
  4006f8:	4b03      	ldr	r3, [pc, #12]	; (400708 <ioport_init+0x28>)
  4006fa:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4006fc:	2011      	movs	r0, #17
  4006fe:	4b02      	ldr	r3, [pc, #8]	; (400708 <ioport_init+0x28>)
  400700:	4798      	blx	r3
	arch_ioport_init();
}
  400702:	bf00      	nop
  400704:	bd80      	pop	{r7, pc}
  400706:	bf00      	nop
  400708:	004006c5 	.word	0x004006c5

0040070c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40070c:	b480      	push	{r7}
  40070e:	b089      	sub	sp, #36	; 0x24
  400710:	af00      	add	r7, sp, #0
  400712:	6078      	str	r0, [r7, #4]
  400714:	687b      	ldr	r3, [r7, #4]
  400716:	61fb      	str	r3, [r7, #28]
  400718:	69fb      	ldr	r3, [r7, #28]
  40071a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40071c:	69bb      	ldr	r3, [r7, #24]
  40071e:	095a      	lsrs	r2, r3, #5
  400720:	69fb      	ldr	r3, [r7, #28]
  400722:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	f003 031f 	and.w	r3, r3, #31
  40072a:	2101      	movs	r1, #1
  40072c:	fa01 f303 	lsl.w	r3, r1, r3
  400730:	613a      	str	r2, [r7, #16]
  400732:	60fb      	str	r3, [r7, #12]
  400734:	693b      	ldr	r3, [r7, #16]
  400736:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400738:	68ba      	ldr	r2, [r7, #8]
  40073a:	4b06      	ldr	r3, [pc, #24]	; (400754 <ioport_disable_pin+0x48>)
  40073c:	4413      	add	r3, r2
  40073e:	025b      	lsls	r3, r3, #9
  400740:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400742:	68fb      	ldr	r3, [r7, #12]
  400744:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400746:	bf00      	nop
  400748:	3724      	adds	r7, #36	; 0x24
  40074a:	46bd      	mov	sp, r7
  40074c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400750:	4770      	bx	lr
  400752:	bf00      	nop
  400754:	00200707 	.word	0x00200707

00400758 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400758:	b480      	push	{r7}
  40075a:	b08d      	sub	sp, #52	; 0x34
  40075c:	af00      	add	r7, sp, #0
  40075e:	6078      	str	r0, [r7, #4]
  400760:	6039      	str	r1, [r7, #0]
  400762:	687b      	ldr	r3, [r7, #4]
  400764:	62fb      	str	r3, [r7, #44]	; 0x2c
  400766:	683b      	ldr	r3, [r7, #0]
  400768:	62bb      	str	r3, [r7, #40]	; 0x28
  40076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40076c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400770:	095a      	lsrs	r2, r3, #5
  400772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400774:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400776:	6a3b      	ldr	r3, [r7, #32]
  400778:	f003 031f 	and.w	r3, r3, #31
  40077c:	2101      	movs	r1, #1
  40077e:	fa01 f303 	lsl.w	r3, r1, r3
  400782:	61fa      	str	r2, [r7, #28]
  400784:	61bb      	str	r3, [r7, #24]
  400786:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400788:	617b      	str	r3, [r7, #20]
  40078a:	69fb      	ldr	r3, [r7, #28]
  40078c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40078e:	693a      	ldr	r2, [r7, #16]
  400790:	4b37      	ldr	r3, [pc, #220]	; (400870 <ioport_set_pin_mode+0x118>)
  400792:	4413      	add	r3, r2
  400794:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400796:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400798:	697b      	ldr	r3, [r7, #20]
  40079a:	f003 0308 	and.w	r3, r3, #8
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d003      	beq.n	4007aa <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007a2:	68fb      	ldr	r3, [r7, #12]
  4007a4:	69ba      	ldr	r2, [r7, #24]
  4007a6:	665a      	str	r2, [r3, #100]	; 0x64
  4007a8:	e002      	b.n	4007b0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	69ba      	ldr	r2, [r7, #24]
  4007ae:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007b0:	697b      	ldr	r3, [r7, #20]
  4007b2:	f003 0310 	and.w	r3, r3, #16
  4007b6:	2b00      	cmp	r3, #0
  4007b8:	d004      	beq.n	4007c4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007ba:	68fb      	ldr	r3, [r7, #12]
  4007bc:	69ba      	ldr	r2, [r7, #24]
  4007be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007c2:	e003      	b.n	4007cc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007c4:	68fb      	ldr	r3, [r7, #12]
  4007c6:	69ba      	ldr	r2, [r7, #24]
  4007c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4007cc:	697b      	ldr	r3, [r7, #20]
  4007ce:	f003 0320 	and.w	r3, r3, #32
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	d003      	beq.n	4007de <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4007d6:	68fb      	ldr	r3, [r7, #12]
  4007d8:	69ba      	ldr	r2, [r7, #24]
  4007da:	651a      	str	r2, [r3, #80]	; 0x50
  4007dc:	e002      	b.n	4007e4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	69ba      	ldr	r2, [r7, #24]
  4007e2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4007e4:	697b      	ldr	r3, [r7, #20]
  4007e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4007ea:	2b00      	cmp	r3, #0
  4007ec:	d003      	beq.n	4007f6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4007ee:	68fb      	ldr	r3, [r7, #12]
  4007f0:	69ba      	ldr	r2, [r7, #24]
  4007f2:	621a      	str	r2, [r3, #32]
  4007f4:	e002      	b.n	4007fc <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	69ba      	ldr	r2, [r7, #24]
  4007fa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4007fc:	697b      	ldr	r3, [r7, #20]
  4007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400802:	2b00      	cmp	r3, #0
  400804:	d004      	beq.n	400810 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400806:	68fb      	ldr	r3, [r7, #12]
  400808:	69ba      	ldr	r2, [r7, #24]
  40080a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40080e:	e003      	b.n	400818 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400810:	68fb      	ldr	r3, [r7, #12]
  400812:	69ba      	ldr	r2, [r7, #24]
  400814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400818:	697b      	ldr	r3, [r7, #20]
  40081a:	f003 0301 	and.w	r3, r3, #1
  40081e:	2b00      	cmp	r3, #0
  400820:	d006      	beq.n	400830 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400822:	68fb      	ldr	r3, [r7, #12]
  400824:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400826:	69bb      	ldr	r3, [r7, #24]
  400828:	431a      	orrs	r2, r3
  40082a:	68fb      	ldr	r3, [r7, #12]
  40082c:	671a      	str	r2, [r3, #112]	; 0x70
  40082e:	e006      	b.n	40083e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400830:	68fb      	ldr	r3, [r7, #12]
  400832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400834:	69bb      	ldr	r3, [r7, #24]
  400836:	43db      	mvns	r3, r3
  400838:	401a      	ands	r2, r3
  40083a:	68fb      	ldr	r3, [r7, #12]
  40083c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40083e:	697b      	ldr	r3, [r7, #20]
  400840:	f003 0302 	and.w	r3, r3, #2
  400844:	2b00      	cmp	r3, #0
  400846:	d006      	beq.n	400856 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40084c:	69bb      	ldr	r3, [r7, #24]
  40084e:	431a      	orrs	r2, r3
  400850:	68fb      	ldr	r3, [r7, #12]
  400852:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400854:	e006      	b.n	400864 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400856:	68fb      	ldr	r3, [r7, #12]
  400858:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40085a:	69bb      	ldr	r3, [r7, #24]
  40085c:	43db      	mvns	r3, r3
  40085e:	401a      	ands	r2, r3
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	675a      	str	r2, [r3, #116]	; 0x74
  400864:	bf00      	nop
  400866:	3734      	adds	r7, #52	; 0x34
  400868:	46bd      	mov	sp, r7
  40086a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40086e:	4770      	bx	lr
  400870:	00200707 	.word	0x00200707

00400874 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400874:	b480      	push	{r7}
  400876:	b08d      	sub	sp, #52	; 0x34
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
  40087c:	460b      	mov	r3, r1
  40087e:	70fb      	strb	r3, [r7, #3]
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	62fb      	str	r3, [r7, #44]	; 0x2c
  400884:	78fb      	ldrb	r3, [r7, #3]
  400886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40088c:	627b      	str	r3, [r7, #36]	; 0x24
  40088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400890:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400892:	6a3b      	ldr	r3, [r7, #32]
  400894:	095b      	lsrs	r3, r3, #5
  400896:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400898:	69fa      	ldr	r2, [r7, #28]
  40089a:	4b17      	ldr	r3, [pc, #92]	; (4008f8 <ioport_set_pin_dir+0x84>)
  40089c:	4413      	add	r3, r2
  40089e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008a0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008a6:	2b01      	cmp	r3, #1
  4008a8:	d109      	bne.n	4008be <ioport_set_pin_dir+0x4a>
  4008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008ac:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4008ae:	697b      	ldr	r3, [r7, #20]
  4008b0:	f003 031f 	and.w	r3, r3, #31
  4008b4:	2201      	movs	r2, #1
  4008b6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008b8:	69bb      	ldr	r3, [r7, #24]
  4008ba:	611a      	str	r2, [r3, #16]
  4008bc:	e00c      	b.n	4008d8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008c2:	2b00      	cmp	r3, #0
  4008c4:	d108      	bne.n	4008d8 <ioport_set_pin_dir+0x64>
  4008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4008ca:	693b      	ldr	r3, [r7, #16]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2201      	movs	r2, #1
  4008d2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008d4:	69bb      	ldr	r3, [r7, #24]
  4008d6:	615a      	str	r2, [r3, #20]
  4008d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008da:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4008dc:	68fb      	ldr	r3, [r7, #12]
  4008de:	f003 031f 	and.w	r3, r3, #31
  4008e2:	2201      	movs	r2, #1
  4008e4:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008e6:	69bb      	ldr	r3, [r7, #24]
  4008e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4008ec:	bf00      	nop
  4008ee:	3734      	adds	r7, #52	; 0x34
  4008f0:	46bd      	mov	sp, r7
  4008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008f6:	4770      	bx	lr
  4008f8:	00200707 	.word	0x00200707

004008fc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4008fc:	b480      	push	{r7}
  4008fe:	b08b      	sub	sp, #44	; 0x2c
  400900:	af00      	add	r7, sp, #0
  400902:	6078      	str	r0, [r7, #4]
  400904:	460b      	mov	r3, r1
  400906:	70fb      	strb	r3, [r7, #3]
  400908:	687b      	ldr	r3, [r7, #4]
  40090a:	627b      	str	r3, [r7, #36]	; 0x24
  40090c:	78fb      	ldrb	r3, [r7, #3]
  40090e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400914:	61fb      	str	r3, [r7, #28]
  400916:	69fb      	ldr	r3, [r7, #28]
  400918:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40091a:	69bb      	ldr	r3, [r7, #24]
  40091c:	095b      	lsrs	r3, r3, #5
  40091e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400920:	697a      	ldr	r2, [r7, #20]
  400922:	4b10      	ldr	r3, [pc, #64]	; (400964 <ioport_set_pin_level+0x68>)
  400924:	4413      	add	r3, r2
  400926:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400928:	613b      	str	r3, [r7, #16]

	if (level) {
  40092a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40092e:	2b00      	cmp	r3, #0
  400930:	d009      	beq.n	400946 <ioport_set_pin_level+0x4a>
  400932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400934:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400936:	68fb      	ldr	r3, [r7, #12]
  400938:	f003 031f 	and.w	r3, r3, #31
  40093c:	2201      	movs	r2, #1
  40093e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400940:	693b      	ldr	r3, [r7, #16]
  400942:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400944:	e008      	b.n	400958 <ioport_set_pin_level+0x5c>
  400946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400948:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40094a:	68bb      	ldr	r3, [r7, #8]
  40094c:	f003 031f 	and.w	r3, r3, #31
  400950:	2201      	movs	r2, #1
  400952:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400954:	693b      	ldr	r3, [r7, #16]
  400956:	635a      	str	r2, [r3, #52]	; 0x34
  400958:	bf00      	nop
  40095a:	372c      	adds	r7, #44	; 0x2c
  40095c:	46bd      	mov	sp, r7
  40095e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400962:	4770      	bx	lr
  400964:	00200707 	.word	0x00200707

00400968 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400968:	b480      	push	{r7}
  40096a:	b08d      	sub	sp, #52	; 0x34
  40096c:	af00      	add	r7, sp, #0
  40096e:	6078      	str	r0, [r7, #4]
  400970:	460b      	mov	r3, r1
  400972:	70fb      	strb	r3, [r7, #3]
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	62fb      	str	r3, [r7, #44]	; 0x2c
  400978:	78fb      	ldrb	r3, [r7, #3]
  40097a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400980:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400984:	095a      	lsrs	r2, r3, #5
  400986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400988:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40098a:	6a3b      	ldr	r3, [r7, #32]
  40098c:	f003 031f 	and.w	r3, r3, #31
  400990:	2101      	movs	r1, #1
  400992:	fa01 f303 	lsl.w	r3, r1, r3
  400996:	61fa      	str	r2, [r7, #28]
  400998:	61bb      	str	r3, [r7, #24]
  40099a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40099e:	75fb      	strb	r3, [r7, #23]
  4009a0:	69fb      	ldr	r3, [r7, #28]
  4009a2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009a4:	693a      	ldr	r2, [r7, #16]
  4009a6:	4b23      	ldr	r3, [pc, #140]	; (400a34 <ioport_set_pin_sense_mode+0xcc>)
  4009a8:	4413      	add	r3, r2
  4009aa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009ac:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009ae:	7dfb      	ldrb	r3, [r7, #23]
  4009b0:	3b01      	subs	r3, #1
  4009b2:	2b03      	cmp	r3, #3
  4009b4:	d82e      	bhi.n	400a14 <ioport_set_pin_sense_mode+0xac>
  4009b6:	a201      	add	r2, pc, #4	; (adr r2, 4009bc <ioport_set_pin_sense_mode+0x54>)
  4009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009bc:	004009f1 	.word	0x004009f1
  4009c0:	00400a03 	.word	0x00400a03
  4009c4:	004009cd 	.word	0x004009cd
  4009c8:	004009df 	.word	0x004009df
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4009cc:	68fb      	ldr	r3, [r7, #12]
  4009ce:	69ba      	ldr	r2, [r7, #24]
  4009d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4009d4:	68fb      	ldr	r3, [r7, #12]
  4009d6:	69ba      	ldr	r2, [r7, #24]
  4009d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4009dc:	e01f      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4009de:	68fb      	ldr	r3, [r7, #12]
  4009e0:	69ba      	ldr	r2, [r7, #24]
  4009e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4009e6:	68fb      	ldr	r3, [r7, #12]
  4009e8:	69ba      	ldr	r2, [r7, #24]
  4009ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4009ee:	e016      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4009f0:	68fb      	ldr	r3, [r7, #12]
  4009f2:	69ba      	ldr	r2, [r7, #24]
  4009f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4009f8:	68fb      	ldr	r3, [r7, #12]
  4009fa:	69ba      	ldr	r2, [r7, #24]
  4009fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a00:	e00d      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	69ba      	ldr	r2, [r7, #24]
  400a06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a0a:	68fb      	ldr	r3, [r7, #12]
  400a0c:	69ba      	ldr	r2, [r7, #24]
  400a0e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a12:	e004      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a14:	68fb      	ldr	r3, [r7, #12]
  400a16:	69ba      	ldr	r2, [r7, #24]
  400a18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a1c:	e003      	b.n	400a26 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400a26:	bf00      	nop
  400a28:	3734      	adds	r7, #52	; 0x34
  400a2a:	46bd      	mov	sp, r7
  400a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a30:	4770      	bx	lr
  400a32:	bf00      	nop
  400a34:	00200707 	.word	0x00200707

00400a38 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400a38:	b480      	push	{r7}
  400a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  400a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a40:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a44:	4a0c      	ldr	r2, [pc, #48]	; (400a78 <tcm_disable+0x40>)
  400a46:	4b0c      	ldr	r3, [pc, #48]	; (400a78 <tcm_disable+0x40>)
  400a48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400a4c:	f023 0301 	bic.w	r3, r3, #1
  400a50:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a54:	4a08      	ldr	r2, [pc, #32]	; (400a78 <tcm_disable+0x40>)
  400a56:	4b08      	ldr	r3, [pc, #32]	; (400a78 <tcm_disable+0x40>)
  400a58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400a5c:	f023 0301 	bic.w	r3, r3, #1
  400a60:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  400a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a68:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400a6c:	bf00      	nop
  400a6e:	46bd      	mov	sp, r7
  400a70:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a74:	4770      	bx	lr
  400a76:	bf00      	nop
  400a78:	e000ed00 	.word	0xe000ed00

00400a7c <board_init>:
#endif

void board_init(void)
{
  400a7c:	b580      	push	{r7, lr}
  400a7e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a80:	4b25      	ldr	r3, [pc, #148]	; (400b18 <board_init+0x9c>)
  400a82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a86:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  400a88:	4b24      	ldr	r3, [pc, #144]	; (400b1c <board_init+0xa0>)
  400a8a:	4798      	blx	r3
	SCB_EnableDCache();
  400a8c:	4b24      	ldr	r3, [pc, #144]	; (400b20 <board_init+0xa4>)
  400a8e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a90:	4b24      	ldr	r3, [pc, #144]	; (400b24 <board_init+0xa8>)
  400a92:	4a25      	ldr	r2, [pc, #148]	; (400b28 <board_init+0xac>)
  400a94:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a96:	4b23      	ldr	r3, [pc, #140]	; (400b24 <board_init+0xa8>)
  400a98:	4a24      	ldr	r2, [pc, #144]	; (400b2c <board_init+0xb0>)
  400a9a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400a9c:	4b24      	ldr	r3, [pc, #144]	; (400b30 <board_init+0xb4>)
  400a9e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400aa0:	4b24      	ldr	r3, [pc, #144]	; (400b34 <board_init+0xb8>)
  400aa2:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400aa4:	2101      	movs	r1, #1
  400aa6:	2048      	movs	r0, #72	; 0x48
  400aa8:	4b23      	ldr	r3, [pc, #140]	; (400b38 <board_init+0xbc>)
  400aaa:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400aac:	2101      	movs	r1, #1
  400aae:	2048      	movs	r0, #72	; 0x48
  400ab0:	4b22      	ldr	r3, [pc, #136]	; (400b3c <board_init+0xc0>)
  400ab2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400ab4:	2100      	movs	r1, #0
  400ab6:	200b      	movs	r0, #11
  400ab8:	4b1f      	ldr	r3, [pc, #124]	; (400b38 <board_init+0xbc>)
  400aba:	4798      	blx	r3
  400abc:	2188      	movs	r1, #136	; 0x88
  400abe:	200b      	movs	r0, #11
  400ac0:	4b1f      	ldr	r3, [pc, #124]	; (400b40 <board_init+0xc4>)
  400ac2:	4798      	blx	r3
  400ac4:	2102      	movs	r1, #2
  400ac6:	200b      	movs	r0, #11
  400ac8:	4b1e      	ldr	r3, [pc, #120]	; (400b44 <board_init+0xc8>)
  400aca:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400acc:	2100      	movs	r1, #0
  400ace:	2015      	movs	r0, #21
  400ad0:	4b1b      	ldr	r3, [pc, #108]	; (400b40 <board_init+0xc4>)
  400ad2:	4798      	blx	r3
  400ad4:	2015      	movs	r0, #21
  400ad6:	4b1c      	ldr	r3, [pc, #112]	; (400b48 <board_init+0xcc>)
  400ad8:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400ada:	4a1c      	ldr	r2, [pc, #112]	; (400b4c <board_init+0xd0>)
  400adc:	4b1b      	ldr	r3, [pc, #108]	; (400b4c <board_init+0xd0>)
  400ade:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400ae2:	f043 0310 	orr.w	r3, r3, #16
  400ae6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400aea:	2103      	movs	r1, #3
  400aec:	2024      	movs	r0, #36	; 0x24
  400aee:	4b14      	ldr	r3, [pc, #80]	; (400b40 <board_init+0xc4>)
  400af0:	4798      	blx	r3
  400af2:	2024      	movs	r0, #36	; 0x24
  400af4:	4b14      	ldr	r3, [pc, #80]	; (400b48 <board_init+0xcc>)
  400af6:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400af8:	2100      	movs	r1, #0
  400afa:	2003      	movs	r0, #3
  400afc:	4b10      	ldr	r3, [pc, #64]	; (400b40 <board_init+0xc4>)
  400afe:	4798      	blx	r3
  400b00:	2003      	movs	r0, #3
  400b02:	4b11      	ldr	r3, [pc, #68]	; (400b48 <board_init+0xcc>)
  400b04:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400b06:	2100      	movs	r1, #0
  400b08:	2004      	movs	r0, #4
  400b0a:	4b0d      	ldr	r3, [pc, #52]	; (400b40 <board_init+0xc4>)
  400b0c:	4798      	blx	r3
  400b0e:	2004      	movs	r0, #4
  400b10:	4b0d      	ldr	r3, [pc, #52]	; (400b48 <board_init+0xcc>)
  400b12:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400b14:	bf00      	nop
  400b16:	bd80      	pop	{r7, pc}
  400b18:	400e1850 	.word	0x400e1850
  400b1c:	004005e9 	.word	0x004005e9
  400b20:	00400621 	.word	0x00400621
  400b24:	400e0c00 	.word	0x400e0c00
  400b28:	5a00080c 	.word	0x5a00080c
  400b2c:	5a00070c 	.word	0x5a00070c
  400b30:	00400a39 	.word	0x00400a39
  400b34:	004006e1 	.word	0x004006e1
  400b38:	00400875 	.word	0x00400875
  400b3c:	004008fd 	.word	0x004008fd
  400b40:	00400759 	.word	0x00400759
  400b44:	00400969 	.word	0x00400969
  400b48:	0040070d 	.word	0x0040070d
  400b4c:	40088000 	.word	0x40088000

00400b50 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400b50:	b480      	push	{r7}
  400b52:	b087      	sub	sp, #28
  400b54:	af00      	add	r7, sp, #0
  400b56:	60f8      	str	r0, [r7, #12]
  400b58:	60b9      	str	r1, [r7, #8]
  400b5a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400b5c:	68fb      	ldr	r3, [r7, #12]
  400b5e:	687a      	ldr	r2, [r7, #4]
  400b60:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400b62:	68bb      	ldr	r3, [r7, #8]
  400b64:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b68:	d04a      	beq.n	400c00 <pio_set_peripheral+0xb0>
  400b6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b6e:	d808      	bhi.n	400b82 <pio_set_peripheral+0x32>
  400b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400b74:	d016      	beq.n	400ba4 <pio_set_peripheral+0x54>
  400b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b7a:	d02c      	beq.n	400bd6 <pio_set_peripheral+0x86>
  400b7c:	2b00      	cmp	r3, #0
  400b7e:	d069      	beq.n	400c54 <pio_set_peripheral+0x104>
  400b80:	e064      	b.n	400c4c <pio_set_peripheral+0xfc>
  400b82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b86:	d065      	beq.n	400c54 <pio_set_peripheral+0x104>
  400b88:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b8c:	d803      	bhi.n	400b96 <pio_set_peripheral+0x46>
  400b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b92:	d04a      	beq.n	400c2a <pio_set_peripheral+0xda>
  400b94:	e05a      	b.n	400c4c <pio_set_peripheral+0xfc>
  400b96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b9a:	d05b      	beq.n	400c54 <pio_set_peripheral+0x104>
  400b9c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ba0:	d058      	beq.n	400c54 <pio_set_peripheral+0x104>
  400ba2:	e053      	b.n	400c4c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ba4:	68fb      	ldr	r3, [r7, #12]
  400ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ba8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bae:	687b      	ldr	r3, [r7, #4]
  400bb0:	43d9      	mvns	r1, r3
  400bb2:	697b      	ldr	r3, [r7, #20]
  400bb4:	400b      	ands	r3, r1
  400bb6:	401a      	ands	r2, r3
  400bb8:	68fb      	ldr	r3, [r7, #12]
  400bba:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bbc:	68fb      	ldr	r3, [r7, #12]
  400bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400bc0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400bc2:	68fb      	ldr	r3, [r7, #12]
  400bc4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bc6:	687b      	ldr	r3, [r7, #4]
  400bc8:	43d9      	mvns	r1, r3
  400bca:	697b      	ldr	r3, [r7, #20]
  400bcc:	400b      	ands	r3, r1
  400bce:	401a      	ands	r2, r3
  400bd0:	68fb      	ldr	r3, [r7, #12]
  400bd2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400bd4:	e03a      	b.n	400c4c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bd6:	68fb      	ldr	r3, [r7, #12]
  400bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400bda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400bdc:	687a      	ldr	r2, [r7, #4]
  400bde:	697b      	ldr	r3, [r7, #20]
  400be0:	431a      	orrs	r2, r3
  400be2:	68fb      	ldr	r3, [r7, #12]
  400be4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400be6:	68fb      	ldr	r3, [r7, #12]
  400be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400bea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400bec:	68fb      	ldr	r3, [r7, #12]
  400bee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	43d9      	mvns	r1, r3
  400bf4:	697b      	ldr	r3, [r7, #20]
  400bf6:	400b      	ands	r3, r1
  400bf8:	401a      	ands	r2, r3
  400bfa:	68fb      	ldr	r3, [r7, #12]
  400bfc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400bfe:	e025      	b.n	400c4c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c00:	68fb      	ldr	r3, [r7, #12]
  400c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c04:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c06:	68fb      	ldr	r3, [r7, #12]
  400c08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	43d9      	mvns	r1, r3
  400c0e:	697b      	ldr	r3, [r7, #20]
  400c10:	400b      	ands	r3, r1
  400c12:	401a      	ands	r2, r3
  400c14:	68fb      	ldr	r3, [r7, #12]
  400c16:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c18:	68fb      	ldr	r3, [r7, #12]
  400c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c1c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c1e:	687a      	ldr	r2, [r7, #4]
  400c20:	697b      	ldr	r3, [r7, #20]
  400c22:	431a      	orrs	r2, r3
  400c24:	68fb      	ldr	r3, [r7, #12]
  400c26:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c28:	e010      	b.n	400c4c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c2a:	68fb      	ldr	r3, [r7, #12]
  400c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c2e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c30:	687a      	ldr	r2, [r7, #4]
  400c32:	697b      	ldr	r3, [r7, #20]
  400c34:	431a      	orrs	r2, r3
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c3a:	68fb      	ldr	r3, [r7, #12]
  400c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c3e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c40:	687a      	ldr	r2, [r7, #4]
  400c42:	697b      	ldr	r3, [r7, #20]
  400c44:	431a      	orrs	r2, r3
  400c46:	68fb      	ldr	r3, [r7, #12]
  400c48:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c4a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	687a      	ldr	r2, [r7, #4]
  400c50:	605a      	str	r2, [r3, #4]
  400c52:	e000      	b.n	400c56 <pio_set_peripheral+0x106>
		return;
  400c54:	bf00      	nop
}
  400c56:	371c      	adds	r7, #28
  400c58:	46bd      	mov	sp, r7
  400c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c5e:	4770      	bx	lr

00400c60 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c60:	b480      	push	{r7}
  400c62:	b083      	sub	sp, #12
  400c64:	af00      	add	r7, sp, #0
  400c66:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c68:	687b      	ldr	r3, [r7, #4]
  400c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c6c:	4618      	mov	r0, r3
  400c6e:	370c      	adds	r7, #12
  400c70:	46bd      	mov	sp, r7
  400c72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c76:	4770      	bx	lr

00400c78 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400c78:	b480      	push	{r7}
  400c7a:	b083      	sub	sp, #12
  400c7c:	af00      	add	r7, sp, #0
  400c7e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400c80:	687b      	ldr	r3, [r7, #4]
  400c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400c84:	4618      	mov	r0, r3
  400c86:	370c      	adds	r7, #12
  400c88:	46bd      	mov	sp, r7
  400c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c8e:	4770      	bx	lr

00400c90 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c90:	b580      	push	{r7, lr}
  400c92:	b084      	sub	sp, #16
  400c94:	af00      	add	r7, sp, #0
  400c96:	6078      	str	r0, [r7, #4]
  400c98:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c9a:	6878      	ldr	r0, [r7, #4]
  400c9c:	4b26      	ldr	r3, [pc, #152]	; (400d38 <pio_handler_process+0xa8>)
  400c9e:	4798      	blx	r3
  400ca0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400ca2:	6878      	ldr	r0, [r7, #4]
  400ca4:	4b25      	ldr	r3, [pc, #148]	; (400d3c <pio_handler_process+0xac>)
  400ca6:	4798      	blx	r3
  400ca8:	4602      	mov	r2, r0
  400caa:	68fb      	ldr	r3, [r7, #12]
  400cac:	4013      	ands	r3, r2
  400cae:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400cb0:	68fb      	ldr	r3, [r7, #12]
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d03c      	beq.n	400d30 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400cb6:	2300      	movs	r3, #0
  400cb8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400cba:	e034      	b.n	400d26 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400cbc:	4a20      	ldr	r2, [pc, #128]	; (400d40 <pio_handler_process+0xb0>)
  400cbe:	68bb      	ldr	r3, [r7, #8]
  400cc0:	011b      	lsls	r3, r3, #4
  400cc2:	4413      	add	r3, r2
  400cc4:	681a      	ldr	r2, [r3, #0]
  400cc6:	683b      	ldr	r3, [r7, #0]
  400cc8:	429a      	cmp	r2, r3
  400cca:	d126      	bne.n	400d1a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ccc:	4a1c      	ldr	r2, [pc, #112]	; (400d40 <pio_handler_process+0xb0>)
  400cce:	68bb      	ldr	r3, [r7, #8]
  400cd0:	011b      	lsls	r3, r3, #4
  400cd2:	4413      	add	r3, r2
  400cd4:	3304      	adds	r3, #4
  400cd6:	681a      	ldr	r2, [r3, #0]
  400cd8:	68fb      	ldr	r3, [r7, #12]
  400cda:	4013      	ands	r3, r2
  400cdc:	2b00      	cmp	r3, #0
  400cde:	d01c      	beq.n	400d1a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ce0:	4a17      	ldr	r2, [pc, #92]	; (400d40 <pio_handler_process+0xb0>)
  400ce2:	68bb      	ldr	r3, [r7, #8]
  400ce4:	011b      	lsls	r3, r3, #4
  400ce6:	4413      	add	r3, r2
  400ce8:	330c      	adds	r3, #12
  400cea:	681b      	ldr	r3, [r3, #0]
  400cec:	4914      	ldr	r1, [pc, #80]	; (400d40 <pio_handler_process+0xb0>)
  400cee:	68ba      	ldr	r2, [r7, #8]
  400cf0:	0112      	lsls	r2, r2, #4
  400cf2:	440a      	add	r2, r1
  400cf4:	6810      	ldr	r0, [r2, #0]
  400cf6:	4912      	ldr	r1, [pc, #72]	; (400d40 <pio_handler_process+0xb0>)
  400cf8:	68ba      	ldr	r2, [r7, #8]
  400cfa:	0112      	lsls	r2, r2, #4
  400cfc:	440a      	add	r2, r1
  400cfe:	3204      	adds	r2, #4
  400d00:	6812      	ldr	r2, [r2, #0]
  400d02:	4611      	mov	r1, r2
  400d04:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d06:	4a0e      	ldr	r2, [pc, #56]	; (400d40 <pio_handler_process+0xb0>)
  400d08:	68bb      	ldr	r3, [r7, #8]
  400d0a:	011b      	lsls	r3, r3, #4
  400d0c:	4413      	add	r3, r2
  400d0e:	3304      	adds	r3, #4
  400d10:	681b      	ldr	r3, [r3, #0]
  400d12:	43db      	mvns	r3, r3
  400d14:	68fa      	ldr	r2, [r7, #12]
  400d16:	4013      	ands	r3, r2
  400d18:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400d1a:	68bb      	ldr	r3, [r7, #8]
  400d1c:	3301      	adds	r3, #1
  400d1e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d20:	68bb      	ldr	r3, [r7, #8]
  400d22:	2b06      	cmp	r3, #6
  400d24:	d803      	bhi.n	400d2e <pio_handler_process+0x9e>
		while (status != 0) {
  400d26:	68fb      	ldr	r3, [r7, #12]
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d1c7      	bne.n	400cbc <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400d2c:	e000      	b.n	400d30 <pio_handler_process+0xa0>
				break;
  400d2e:	bf00      	nop
}
  400d30:	bf00      	nop
  400d32:	3710      	adds	r7, #16
  400d34:	46bd      	mov	sp, r7
  400d36:	bd80      	pop	{r7, pc}
  400d38:	00400c61 	.word	0x00400c61
  400d3c:	00400c79 	.word	0x00400c79
  400d40:	204009d4 	.word	0x204009d4

00400d44 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d44:	b580      	push	{r7, lr}
  400d46:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400d48:	210a      	movs	r1, #10
  400d4a:	4802      	ldr	r0, [pc, #8]	; (400d54 <PIOA_Handler+0x10>)
  400d4c:	4b02      	ldr	r3, [pc, #8]	; (400d58 <PIOA_Handler+0x14>)
  400d4e:	4798      	blx	r3
}
  400d50:	bf00      	nop
  400d52:	bd80      	pop	{r7, pc}
  400d54:	400e0e00 	.word	0x400e0e00
  400d58:	00400c91 	.word	0x00400c91

00400d5c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d5c:	b580      	push	{r7, lr}
  400d5e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400d60:	210b      	movs	r1, #11
  400d62:	4802      	ldr	r0, [pc, #8]	; (400d6c <PIOB_Handler+0x10>)
  400d64:	4b02      	ldr	r3, [pc, #8]	; (400d70 <PIOB_Handler+0x14>)
  400d66:	4798      	blx	r3
}
  400d68:	bf00      	nop
  400d6a:	bd80      	pop	{r7, pc}
  400d6c:	400e1000 	.word	0x400e1000
  400d70:	00400c91 	.word	0x00400c91

00400d74 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d74:	b580      	push	{r7, lr}
  400d76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400d78:	210c      	movs	r1, #12
  400d7a:	4802      	ldr	r0, [pc, #8]	; (400d84 <PIOC_Handler+0x10>)
  400d7c:	4b02      	ldr	r3, [pc, #8]	; (400d88 <PIOC_Handler+0x14>)
  400d7e:	4798      	blx	r3
}
  400d80:	bf00      	nop
  400d82:	bd80      	pop	{r7, pc}
  400d84:	400e1200 	.word	0x400e1200
  400d88:	00400c91 	.word	0x00400c91

00400d8c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d8c:	b580      	push	{r7, lr}
  400d8e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400d90:	2110      	movs	r1, #16
  400d92:	4802      	ldr	r0, [pc, #8]	; (400d9c <PIOD_Handler+0x10>)
  400d94:	4b02      	ldr	r3, [pc, #8]	; (400da0 <PIOD_Handler+0x14>)
  400d96:	4798      	blx	r3
}
  400d98:	bf00      	nop
  400d9a:	bd80      	pop	{r7, pc}
  400d9c:	400e1400 	.word	0x400e1400
  400da0:	00400c91 	.word	0x00400c91

00400da4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400da4:	b580      	push	{r7, lr}
  400da6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400da8:	2111      	movs	r1, #17
  400daa:	4802      	ldr	r0, [pc, #8]	; (400db4 <PIOE_Handler+0x10>)
  400dac:	4b02      	ldr	r3, [pc, #8]	; (400db8 <PIOE_Handler+0x14>)
  400dae:	4798      	blx	r3
}
  400db0:	bf00      	nop
  400db2:	bd80      	pop	{r7, pc}
  400db4:	400e1600 	.word	0x400e1600
  400db8:	00400c91 	.word	0x00400c91

00400dbc <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400dbc:	b480      	push	{r7}
  400dbe:	b083      	sub	sp, #12
  400dc0:	af00      	add	r7, sp, #0
  400dc2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400dc4:	687b      	ldr	r3, [r7, #4]
  400dc6:	3b01      	subs	r3, #1
  400dc8:	2b03      	cmp	r3, #3
  400dca:	d81a      	bhi.n	400e02 <pmc_mck_set_division+0x46>
  400dcc:	a201      	add	r2, pc, #4	; (adr r2, 400dd4 <pmc_mck_set_division+0x18>)
  400dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400dd2:	bf00      	nop
  400dd4:	00400de5 	.word	0x00400de5
  400dd8:	00400deb 	.word	0x00400deb
  400ddc:	00400df3 	.word	0x00400df3
  400de0:	00400dfb 	.word	0x00400dfb
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400de4:	2300      	movs	r3, #0
  400de6:	607b      	str	r3, [r7, #4]
			break;
  400de8:	e00e      	b.n	400e08 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400dea:	f44f 7380 	mov.w	r3, #256	; 0x100
  400dee:	607b      	str	r3, [r7, #4]
			break;
  400df0:	e00a      	b.n	400e08 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400df2:	f44f 7340 	mov.w	r3, #768	; 0x300
  400df6:	607b      	str	r3, [r7, #4]
			break;
  400df8:	e006      	b.n	400e08 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
  400dfe:	607b      	str	r3, [r7, #4]
			break;
  400e00:	e002      	b.n	400e08 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e02:	2300      	movs	r3, #0
  400e04:	607b      	str	r3, [r7, #4]
			break;
  400e06:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400e08:	490a      	ldr	r1, [pc, #40]	; (400e34 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400e0a:	4b0a      	ldr	r3, [pc, #40]	; (400e34 <pmc_mck_set_division+0x78>)
  400e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400e12:	687b      	ldr	r3, [r7, #4]
  400e14:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400e16:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e18:	bf00      	nop
  400e1a:	4b06      	ldr	r3, [pc, #24]	; (400e34 <pmc_mck_set_division+0x78>)
  400e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e1e:	f003 0308 	and.w	r3, r3, #8
  400e22:	2b00      	cmp	r3, #0
  400e24:	d0f9      	beq.n	400e1a <pmc_mck_set_division+0x5e>
}
  400e26:	bf00      	nop
  400e28:	370c      	adds	r7, #12
  400e2a:	46bd      	mov	sp, r7
  400e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0600 	.word	0x400e0600

00400e38 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400e38:	b480      	push	{r7}
  400e3a:	b085      	sub	sp, #20
  400e3c:	af00      	add	r7, sp, #0
  400e3e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e40:	491d      	ldr	r1, [pc, #116]	; (400eb8 <pmc_switch_mck_to_pllack+0x80>)
  400e42:	4b1d      	ldr	r3, [pc, #116]	; (400eb8 <pmc_switch_mck_to_pllack+0x80>)
  400e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400e4a:	687b      	ldr	r3, [r7, #4]
  400e4c:	4313      	orrs	r3, r2
  400e4e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e54:	60fb      	str	r3, [r7, #12]
  400e56:	e007      	b.n	400e68 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e58:	68fb      	ldr	r3, [r7, #12]
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d101      	bne.n	400e62 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400e5e:	2301      	movs	r3, #1
  400e60:	e023      	b.n	400eaa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	3b01      	subs	r3, #1
  400e66:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e68:	4b13      	ldr	r3, [pc, #76]	; (400eb8 <pmc_switch_mck_to_pllack+0x80>)
  400e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e6c:	f003 0308 	and.w	r3, r3, #8
  400e70:	2b00      	cmp	r3, #0
  400e72:	d0f1      	beq.n	400e58 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e74:	4a10      	ldr	r2, [pc, #64]	; (400eb8 <pmc_switch_mck_to_pllack+0x80>)
  400e76:	4b10      	ldr	r3, [pc, #64]	; (400eb8 <pmc_switch_mck_to_pllack+0x80>)
  400e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e7a:	f023 0303 	bic.w	r3, r3, #3
  400e7e:	f043 0302 	orr.w	r3, r3, #2
  400e82:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e88:	60fb      	str	r3, [r7, #12]
  400e8a:	e007      	b.n	400e9c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	2b00      	cmp	r3, #0
  400e90:	d101      	bne.n	400e96 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400e92:	2301      	movs	r3, #1
  400e94:	e009      	b.n	400eaa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e96:	68fb      	ldr	r3, [r7, #12]
  400e98:	3b01      	subs	r3, #1
  400e9a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e9c:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <pmc_switch_mck_to_pllack+0x80>)
  400e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ea0:	f003 0308 	and.w	r3, r3, #8
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	d0f1      	beq.n	400e8c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400ea8:	2300      	movs	r3, #0
}
  400eaa:	4618      	mov	r0, r3
  400eac:	3714      	adds	r7, #20
  400eae:	46bd      	mov	sp, r7
  400eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop
  400eb8:	400e0600 	.word	0x400e0600

00400ebc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400ebc:	b480      	push	{r7}
  400ebe:	b083      	sub	sp, #12
  400ec0:	af00      	add	r7, sp, #0
  400ec2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400ec4:	687b      	ldr	r3, [r7, #4]
  400ec6:	2b01      	cmp	r3, #1
  400ec8:	d105      	bne.n	400ed6 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400eca:	4907      	ldr	r1, [pc, #28]	; (400ee8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400ecc:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400ece:	689a      	ldr	r2, [r3, #8]
  400ed0:	4b06      	ldr	r3, [pc, #24]	; (400eec <pmc_switch_sclk_to_32kxtal+0x30>)
  400ed2:	4313      	orrs	r3, r2
  400ed4:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400ed6:	4b04      	ldr	r3, [pc, #16]	; (400ee8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400ed8:	4a05      	ldr	r2, [pc, #20]	; (400ef0 <pmc_switch_sclk_to_32kxtal+0x34>)
  400eda:	601a      	str	r2, [r3, #0]
}
  400edc:	bf00      	nop
  400ede:	370c      	adds	r7, #12
  400ee0:	46bd      	mov	sp, r7
  400ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee6:	4770      	bx	lr
  400ee8:	400e1810 	.word	0x400e1810
  400eec:	a5100000 	.word	0xa5100000
  400ef0:	a5000008 	.word	0xa5000008

00400ef4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400ef4:	b480      	push	{r7}
  400ef6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400ef8:	4b09      	ldr	r3, [pc, #36]	; (400f20 <pmc_osc_is_ready_32kxtal+0x2c>)
  400efa:	695b      	ldr	r3, [r3, #20]
  400efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400f00:	2b00      	cmp	r3, #0
  400f02:	d007      	beq.n	400f14 <pmc_osc_is_ready_32kxtal+0x20>
  400f04:	4b07      	ldr	r3, [pc, #28]	; (400f24 <pmc_osc_is_ready_32kxtal+0x30>)
  400f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400f0c:	2b00      	cmp	r3, #0
  400f0e:	d001      	beq.n	400f14 <pmc_osc_is_ready_32kxtal+0x20>
  400f10:	2301      	movs	r3, #1
  400f12:	e000      	b.n	400f16 <pmc_osc_is_ready_32kxtal+0x22>
  400f14:	2300      	movs	r3, #0
}
  400f16:	4618      	mov	r0, r3
  400f18:	46bd      	mov	sp, r7
  400f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f1e:	4770      	bx	lr
  400f20:	400e1810 	.word	0x400e1810
  400f24:	400e0600 	.word	0x400e0600

00400f28 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400f28:	b480      	push	{r7}
  400f2a:	b083      	sub	sp, #12
  400f2c:	af00      	add	r7, sp, #0
  400f2e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400f30:	4915      	ldr	r1, [pc, #84]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f32:	4b15      	ldr	r3, [pc, #84]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f34:	6a1a      	ldr	r2, [r3, #32]
  400f36:	4b15      	ldr	r3, [pc, #84]	; (400f8c <pmc_switch_mainck_to_fastrc+0x64>)
  400f38:	4313      	orrs	r3, r2
  400f3a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f3c:	bf00      	nop
  400f3e:	4b12      	ldr	r3, [pc, #72]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f46:	2b00      	cmp	r3, #0
  400f48:	d0f9      	beq.n	400f3e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f4a:	490f      	ldr	r1, [pc, #60]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f4c:	4b0e      	ldr	r3, [pc, #56]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f4e:	6a1a      	ldr	r2, [r3, #32]
  400f50:	4b0f      	ldr	r3, [pc, #60]	; (400f90 <pmc_switch_mainck_to_fastrc+0x68>)
  400f52:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400f54:	687a      	ldr	r2, [r7, #4]
  400f56:	4313      	orrs	r3, r2
  400f58:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f5c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f5e:	bf00      	nop
  400f60:	4b09      	ldr	r3, [pc, #36]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f68:	2b00      	cmp	r3, #0
  400f6a:	d0f9      	beq.n	400f60 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400f6c:	4906      	ldr	r1, [pc, #24]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f6e:	4b06      	ldr	r3, [pc, #24]	; (400f88 <pmc_switch_mainck_to_fastrc+0x60>)
  400f70:	6a1a      	ldr	r2, [r3, #32]
  400f72:	4b08      	ldr	r3, [pc, #32]	; (400f94 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f74:	4013      	ands	r3, r2
  400f76:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400f7a:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400f7c:	bf00      	nop
  400f7e:	370c      	adds	r7, #12
  400f80:	46bd      	mov	sp, r7
  400f82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f86:	4770      	bx	lr
  400f88:	400e0600 	.word	0x400e0600
  400f8c:	00370008 	.word	0x00370008
  400f90:	ffc8ff8f 	.word	0xffc8ff8f
  400f94:	fec8ffff 	.word	0xfec8ffff

00400f98 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400f98:	b480      	push	{r7}
  400f9a:	b083      	sub	sp, #12
  400f9c:	af00      	add	r7, sp, #0
  400f9e:	6078      	str	r0, [r7, #4]
  400fa0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400fa2:	687b      	ldr	r3, [r7, #4]
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	d008      	beq.n	400fba <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fa8:	4913      	ldr	r1, [pc, #76]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400faa:	4b13      	ldr	r3, [pc, #76]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400fac:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fae:	4a13      	ldr	r2, [pc, #76]	; (400ffc <pmc_switch_mainck_to_xtal+0x64>)
  400fb0:	401a      	ands	r2, r3
  400fb2:	4b13      	ldr	r3, [pc, #76]	; (401000 <pmc_switch_mainck_to_xtal+0x68>)
  400fb4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fb6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400fb8:	e018      	b.n	400fec <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fba:	490f      	ldr	r1, [pc, #60]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400fbc:	4b0e      	ldr	r3, [pc, #56]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400fbe:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400fc0:	4b10      	ldr	r3, [pc, #64]	; (401004 <pmc_switch_mainck_to_xtal+0x6c>)
  400fc2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400fc4:	683a      	ldr	r2, [r7, #0]
  400fc6:	0212      	lsls	r2, r2, #8
  400fc8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400fca:	431a      	orrs	r2, r3
  400fcc:	4b0e      	ldr	r3, [pc, #56]	; (401008 <pmc_switch_mainck_to_xtal+0x70>)
  400fce:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fd0:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400fd2:	bf00      	nop
  400fd4:	4b08      	ldr	r3, [pc, #32]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fd8:	f003 0301 	and.w	r3, r3, #1
  400fdc:	2b00      	cmp	r3, #0
  400fde:	d0f9      	beq.n	400fd4 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fe0:	4905      	ldr	r1, [pc, #20]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400fe2:	4b05      	ldr	r3, [pc, #20]	; (400ff8 <pmc_switch_mainck_to_xtal+0x60>)
  400fe4:	6a1a      	ldr	r2, [r3, #32]
  400fe6:	4b09      	ldr	r3, [pc, #36]	; (40100c <pmc_switch_mainck_to_xtal+0x74>)
  400fe8:	4313      	orrs	r3, r2
  400fea:	620b      	str	r3, [r1, #32]
}
  400fec:	bf00      	nop
  400fee:	370c      	adds	r7, #12
  400ff0:	46bd      	mov	sp, r7
  400ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ff6:	4770      	bx	lr
  400ff8:	400e0600 	.word	0x400e0600
  400ffc:	fec8fffc 	.word	0xfec8fffc
  401000:	01370002 	.word	0x01370002
  401004:	ffc8fffc 	.word	0xffc8fffc
  401008:	00370001 	.word	0x00370001
  40100c:	01370000 	.word	0x01370000

00401010 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401010:	b480      	push	{r7}
  401012:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401014:	4b04      	ldr	r3, [pc, #16]	; (401028 <pmc_osc_is_ready_mainck+0x18>)
  401016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40101c:	4618      	mov	r0, r3
  40101e:	46bd      	mov	sp, r7
  401020:	f85d 7b04 	ldr.w	r7, [sp], #4
  401024:	4770      	bx	lr
  401026:	bf00      	nop
  401028:	400e0600 	.word	0x400e0600

0040102c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40102c:	b480      	push	{r7}
  40102e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401030:	4b04      	ldr	r3, [pc, #16]	; (401044 <pmc_disable_pllack+0x18>)
  401032:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401036:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401038:	bf00      	nop
  40103a:	46bd      	mov	sp, r7
  40103c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401040:	4770      	bx	lr
  401042:	bf00      	nop
  401044:	400e0600 	.word	0x400e0600

00401048 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401048:	b480      	push	{r7}
  40104a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40104c:	4b04      	ldr	r3, [pc, #16]	; (401060 <pmc_is_locked_pllack+0x18>)
  40104e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401050:	f003 0302 	and.w	r3, r3, #2
}
  401054:	4618      	mov	r0, r3
  401056:	46bd      	mov	sp, r7
  401058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40105c:	4770      	bx	lr
  40105e:	bf00      	nop
  401060:	400e0600 	.word	0x400e0600

00401064 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401064:	b480      	push	{r7}
  401066:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <pmc_is_locked_upll+0x18>)
  40106a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40106c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401070:	4618      	mov	r0, r3
  401072:	46bd      	mov	sp, r7
  401074:	f85d 7b04 	ldr.w	r7, [sp], #4
  401078:	4770      	bx	lr
  40107a:	bf00      	nop
  40107c:	400e0600 	.word	0x400e0600

00401080 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401080:	b480      	push	{r7}
  401082:	b083      	sub	sp, #12
  401084:	af00      	add	r7, sp, #0
  401086:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	2b3f      	cmp	r3, #63	; 0x3f
  40108c:	d901      	bls.n	401092 <pmc_enable_periph_clk+0x12>
		return 1;
  40108e:	2301      	movs	r3, #1
  401090:	e02f      	b.n	4010f2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401092:	687b      	ldr	r3, [r7, #4]
  401094:	2b1f      	cmp	r3, #31
  401096:	d813      	bhi.n	4010c0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401098:	4b19      	ldr	r3, [pc, #100]	; (401100 <pmc_enable_periph_clk+0x80>)
  40109a:	699a      	ldr	r2, [r3, #24]
  40109c:	2101      	movs	r1, #1
  40109e:	687b      	ldr	r3, [r7, #4]
  4010a0:	fa01 f303 	lsl.w	r3, r1, r3
  4010a4:	401a      	ands	r2, r3
  4010a6:	2101      	movs	r1, #1
  4010a8:	687b      	ldr	r3, [r7, #4]
  4010aa:	fa01 f303 	lsl.w	r3, r1, r3
  4010ae:	429a      	cmp	r2, r3
  4010b0:	d01e      	beq.n	4010f0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010b2:	4a13      	ldr	r2, [pc, #76]	; (401100 <pmc_enable_periph_clk+0x80>)
  4010b4:	2101      	movs	r1, #1
  4010b6:	687b      	ldr	r3, [r7, #4]
  4010b8:	fa01 f303 	lsl.w	r3, r1, r3
  4010bc:	6113      	str	r3, [r2, #16]
  4010be:	e017      	b.n	4010f0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010c0:	687b      	ldr	r3, [r7, #4]
  4010c2:	3b20      	subs	r3, #32
  4010c4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010c6:	4b0e      	ldr	r3, [pc, #56]	; (401100 <pmc_enable_periph_clk+0x80>)
  4010c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4010cc:	2101      	movs	r1, #1
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	fa01 f303 	lsl.w	r3, r1, r3
  4010d4:	401a      	ands	r2, r3
  4010d6:	2101      	movs	r1, #1
  4010d8:	687b      	ldr	r3, [r7, #4]
  4010da:	fa01 f303 	lsl.w	r3, r1, r3
  4010de:	429a      	cmp	r2, r3
  4010e0:	d006      	beq.n	4010f0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4010e2:	4a07      	ldr	r2, [pc, #28]	; (401100 <pmc_enable_periph_clk+0x80>)
  4010e4:	2101      	movs	r1, #1
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	fa01 f303 	lsl.w	r3, r1, r3
  4010ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4010f0:	2300      	movs	r3, #0
}
  4010f2:	4618      	mov	r0, r3
  4010f4:	370c      	adds	r7, #12
  4010f6:	46bd      	mov	sp, r7
  4010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop
  401100:	400e0600 	.word	0x400e0600

00401104 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  401104:	b480      	push	{r7}
  401106:	b083      	sub	sp, #12
  401108:	af00      	add	r7, sp, #0
  40110a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40110c:	687b      	ldr	r3, [r7, #4]
  40110e:	2208      	movs	r2, #8
  401110:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401112:	687b      	ldr	r3, [r7, #4]
  401114:	2220      	movs	r2, #32
  401116:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401118:	687b      	ldr	r3, [r7, #4]
  40111a:	2204      	movs	r2, #4
  40111c:	601a      	str	r2, [r3, #0]
}
  40111e:	bf00      	nop
  401120:	370c      	adds	r7, #12
  401122:	46bd      	mov	sp, r7
  401124:	f85d 7b04 	ldr.w	r7, [sp], #4
  401128:	4770      	bx	lr
	...

0040112c <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  40112c:	b580      	push	{r7, lr}
  40112e:	b084      	sub	sp, #16
  401130:	af00      	add	r7, sp, #0
  401132:	6078      	str	r0, [r7, #4]
  401134:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  401136:	2300      	movs	r3, #0
  401138:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  40113a:	687b      	ldr	r3, [r7, #4]
  40113c:	f04f 32ff 	mov.w	r2, #4294967295
  401140:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401142:	687b      	ldr	r3, [r7, #4]
  401144:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401146:	6878      	ldr	r0, [r7, #4]
  401148:	4b0b      	ldr	r3, [pc, #44]	; (401178 <twihs_master_init+0x4c>)
  40114a:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  40114c:	6878      	ldr	r0, [r7, #4]
  40114e:	4b0b      	ldr	r3, [pc, #44]	; (40117c <twihs_master_init+0x50>)
  401150:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401152:	683b      	ldr	r3, [r7, #0]
  401154:	6859      	ldr	r1, [r3, #4]
  401156:	683b      	ldr	r3, [r7, #0]
  401158:	681b      	ldr	r3, [r3, #0]
  40115a:	461a      	mov	r2, r3
  40115c:	6878      	ldr	r0, [r7, #4]
  40115e:	4b08      	ldr	r3, [pc, #32]	; (401180 <twihs_master_init+0x54>)
  401160:	4798      	blx	r3
  401162:	4603      	mov	r3, r0
  401164:	2b01      	cmp	r3, #1
  401166:	d101      	bne.n	40116c <twihs_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401168:	2301      	movs	r3, #1
  40116a:	60fb      	str	r3, [r7, #12]
	}

	return status;
  40116c:	68fb      	ldr	r3, [r7, #12]
}
  40116e:	4618      	mov	r0, r3
  401170:	3710      	adds	r7, #16
  401172:	46bd      	mov	sp, r7
  401174:	bd80      	pop	{r7, pc}
  401176:	bf00      	nop
  401178:	004013bd 	.word	0x004013bd
  40117c:	00401105 	.word	0x00401105
  401180:	00401185 	.word	0x00401185

00401184 <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401184:	b480      	push	{r7}
  401186:	b089      	sub	sp, #36	; 0x24
  401188:	af00      	add	r7, sp, #0
  40118a:	60f8      	str	r0, [r7, #12]
  40118c:	60b9      	str	r1, [r7, #8]
  40118e:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401190:	2300      	movs	r3, #0
  401192:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401194:	68bb      	ldr	r3, [r7, #8]
  401196:	4a34      	ldr	r2, [pc, #208]	; (401268 <twihs_set_speed+0xe4>)
  401198:	4293      	cmp	r3, r2
  40119a:	d901      	bls.n	4011a0 <twihs_set_speed+0x1c>
		return FAIL;
  40119c:	2301      	movs	r3, #1
  40119e:	e05d      	b.n	40125c <twihs_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4011a0:	68bb      	ldr	r3, [r7, #8]
  4011a2:	4a32      	ldr	r2, [pc, #200]	; (40126c <twihs_set_speed+0xe8>)
  4011a4:	4293      	cmp	r3, r2
  4011a6:	d937      	bls.n	401218 <twihs_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4011a8:	687b      	ldr	r3, [r7, #4]
  4011aa:	4a31      	ldr	r2, [pc, #196]	; (401270 <twihs_set_speed+0xec>)
  4011ac:	fba2 2303 	umull	r2, r3, r2, r3
  4011b0:	0b9b      	lsrs	r3, r3, #14
  4011b2:	3b03      	subs	r3, #3
  4011b4:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4011b6:	68ba      	ldr	r2, [r7, #8]
  4011b8:	4b2e      	ldr	r3, [pc, #184]	; (401274 <twihs_set_speed+0xf0>)
  4011ba:	4413      	add	r3, r2
  4011bc:	009b      	lsls	r3, r3, #2
  4011be:	687a      	ldr	r2, [r7, #4]
  4011c0:	fbb2 f3f3 	udiv	r3, r2, r3
  4011c4:	3b03      	subs	r3, #3
  4011c6:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011c8:	e005      	b.n	4011d6 <twihs_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4011ca:	69fb      	ldr	r3, [r7, #28]
  4011cc:	3301      	adds	r3, #1
  4011ce:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4011d0:	697b      	ldr	r3, [r7, #20]
  4011d2:	085b      	lsrs	r3, r3, #1
  4011d4:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011d6:	697b      	ldr	r3, [r7, #20]
  4011d8:	2bff      	cmp	r3, #255	; 0xff
  4011da:	d909      	bls.n	4011f0 <twihs_set_speed+0x6c>
  4011dc:	69fb      	ldr	r3, [r7, #28]
  4011de:	2b06      	cmp	r3, #6
  4011e0:	d9f3      	bls.n	4011ca <twihs_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011e2:	e005      	b.n	4011f0 <twihs_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4011e4:	69fb      	ldr	r3, [r7, #28]
  4011e6:	3301      	adds	r3, #1
  4011e8:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4011ea:	693b      	ldr	r3, [r7, #16]
  4011ec:	085b      	lsrs	r3, r3, #1
  4011ee:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011f0:	693b      	ldr	r3, [r7, #16]
  4011f2:	2bff      	cmp	r3, #255	; 0xff
  4011f4:	d902      	bls.n	4011fc <twihs_set_speed+0x78>
  4011f6:	69fb      	ldr	r3, [r7, #28]
  4011f8:	2b06      	cmp	r3, #6
  4011fa:	d9f3      	bls.n	4011e4 <twihs_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4011fc:	697b      	ldr	r3, [r7, #20]
  4011fe:	b2da      	uxtb	r2, r3
  401200:	693b      	ldr	r3, [r7, #16]
  401202:	021b      	lsls	r3, r3, #8
  401204:	b29b      	uxth	r3, r3
  401206:	431a      	orrs	r2, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401208:	69fb      	ldr	r3, [r7, #28]
  40120a:	041b      	lsls	r3, r3, #16
  40120c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401210:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401212:	68fb      	ldr	r3, [r7, #12]
  401214:	611a      	str	r2, [r3, #16]
  401216:	e020      	b.n	40125a <twihs_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401218:	68bb      	ldr	r3, [r7, #8]
  40121a:	005b      	lsls	r3, r3, #1
  40121c:	687a      	ldr	r2, [r7, #4]
  40121e:	fbb2 f3f3 	udiv	r3, r2, r3
  401222:	3b03      	subs	r3, #3
  401224:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401226:	e005      	b.n	401234 <twihs_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  401228:	69fb      	ldr	r3, [r7, #28]
  40122a:	3301      	adds	r3, #1
  40122c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40122e:	69bb      	ldr	r3, [r7, #24]
  401230:	085b      	lsrs	r3, r3, #1
  401232:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401234:	69bb      	ldr	r3, [r7, #24]
  401236:	2bff      	cmp	r3, #255	; 0xff
  401238:	d902      	bls.n	401240 <twihs_set_speed+0xbc>
  40123a:	69fb      	ldr	r3, [r7, #28]
  40123c:	2b06      	cmp	r3, #6
  40123e:	d9f3      	bls.n	401228 <twihs_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401240:	69bb      	ldr	r3, [r7, #24]
  401242:	b2da      	uxtb	r2, r3
  401244:	69bb      	ldr	r3, [r7, #24]
  401246:	021b      	lsls	r3, r3, #8
  401248:	b29b      	uxth	r3, r3
  40124a:	431a      	orrs	r2, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  40124c:	69fb      	ldr	r3, [r7, #28]
  40124e:	041b      	lsls	r3, r3, #16
  401250:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401254:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401256:	68fb      	ldr	r3, [r7, #12]
  401258:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  40125a:	2300      	movs	r3, #0
}
  40125c:	4618      	mov	r0, r3
  40125e:	3724      	adds	r7, #36	; 0x24
  401260:	46bd      	mov	sp, r7
  401262:	f85d 7b04 	ldr.w	r7, [sp], #4
  401266:	4770      	bx	lr
  401268:	00061a80 	.word	0x00061a80
  40126c:	0005dc00 	.word	0x0005dc00
  401270:	057619f1 	.word	0x057619f1
  401274:	3ffd1200 	.word	0x3ffd1200

00401278 <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  401278:	b480      	push	{r7}
  40127a:	b085      	sub	sp, #20
  40127c:	af00      	add	r7, sp, #0
  40127e:	6078      	str	r0, [r7, #4]
  401280:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401282:	683b      	ldr	r3, [r7, #0]
  401284:	2b00      	cmp	r3, #0
  401286:	d101      	bne.n	40128c <twihs_mk_addr+0x14>
		return 0;
  401288:	2300      	movs	r3, #0
  40128a:	e01d      	b.n	4012c8 <twihs_mk_addr+0x50>

	val = addr[0];
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	781b      	ldrb	r3, [r3, #0]
  401290:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401292:	683b      	ldr	r3, [r7, #0]
  401294:	2b01      	cmp	r3, #1
  401296:	dd09      	ble.n	4012ac <twihs_mk_addr+0x34>
		val <<= 8;
  401298:	68fb      	ldr	r3, [r7, #12]
  40129a:	021b      	lsls	r3, r3, #8
  40129c:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  40129e:	687b      	ldr	r3, [r7, #4]
  4012a0:	3301      	adds	r3, #1
  4012a2:	781b      	ldrb	r3, [r3, #0]
  4012a4:	461a      	mov	r2, r3
  4012a6:	68fb      	ldr	r3, [r7, #12]
  4012a8:	4313      	orrs	r3, r2
  4012aa:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4012ac:	683b      	ldr	r3, [r7, #0]
  4012ae:	2b02      	cmp	r3, #2
  4012b0:	dd09      	ble.n	4012c6 <twihs_mk_addr+0x4e>
		val <<= 8;
  4012b2:	68fb      	ldr	r3, [r7, #12]
  4012b4:	021b      	lsls	r3, r3, #8
  4012b6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4012b8:	687b      	ldr	r3, [r7, #4]
  4012ba:	3302      	adds	r3, #2
  4012bc:	781b      	ldrb	r3, [r3, #0]
  4012be:	461a      	mov	r2, r3
  4012c0:	68fb      	ldr	r3, [r7, #12]
  4012c2:	4313      	orrs	r3, r2
  4012c4:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4012c6:	68fb      	ldr	r3, [r7, #12]
}
  4012c8:	4618      	mov	r0, r3
  4012ca:	3714      	adds	r7, #20
  4012cc:	46bd      	mov	sp, r7
  4012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d2:	4770      	bx	lr

004012d4 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  4012d4:	b580      	push	{r7, lr}
  4012d6:	b086      	sub	sp, #24
  4012d8:	af00      	add	r7, sp, #0
  4012da:	6078      	str	r0, [r7, #4]
  4012dc:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  4012de:	683b      	ldr	r3, [r7, #0]
  4012e0:	68db      	ldr	r3, [r3, #12]
  4012e2:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4012e4:	683b      	ldr	r3, [r7, #0]
  4012e6:	689b      	ldr	r3, [r3, #8]
  4012e8:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  4012ea:	f643 2398 	movw	r3, #15000	; 0x3a98
  4012ee:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  4012f0:	697b      	ldr	r3, [r7, #20]
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d101      	bne.n	4012fa <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  4012f6:	2301      	movs	r3, #1
  4012f8:	e059      	b.n	4013ae <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  4012fa:	687b      	ldr	r3, [r7, #4]
  4012fc:	2200      	movs	r2, #0
  4012fe:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401300:	683b      	ldr	r3, [r7, #0]
  401302:	7c1b      	ldrb	r3, [r3, #16]
  401304:	041b      	lsls	r3, r3, #16
  401306:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40130a:	683b      	ldr	r3, [r7, #0]
  40130c:	685b      	ldr	r3, [r3, #4]
  40130e:	021b      	lsls	r3, r3, #8
  401310:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401314:	4313      	orrs	r3, r2
  401316:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40131a:	687b      	ldr	r3, [r7, #4]
  40131c:	605a      	str	r2, [r3, #4]
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40131e:	687b      	ldr	r3, [r7, #4]
  401320:	2200      	movs	r2, #0
  401322:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401324:	683a      	ldr	r2, [r7, #0]
  401326:	683b      	ldr	r3, [r7, #0]
  401328:	685b      	ldr	r3, [r3, #4]
  40132a:	4619      	mov	r1, r3
  40132c:	4610      	mov	r0, r2
  40132e:	4b22      	ldr	r3, [pc, #136]	; (4013b8 <twihs_master_read+0xe4>)
  401330:	4798      	blx	r3
  401332:	4602      	mov	r2, r0
  401334:	687b      	ldr	r3, [r7, #4]
  401336:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401338:	687b      	ldr	r3, [r7, #4]
  40133a:	2201      	movs	r2, #1
  40133c:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  40133e:	e029      	b.n	401394 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401340:	687b      	ldr	r3, [r7, #4]
  401342:	6a1b      	ldr	r3, [r3, #32]
  401344:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401346:	68bb      	ldr	r3, [r7, #8]
  401348:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40134c:	2b00      	cmp	r3, #0
  40134e:	d001      	beq.n	401354 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401350:	2305      	movs	r3, #5
  401352:	e02c      	b.n	4013ae <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401354:	68fb      	ldr	r3, [r7, #12]
  401356:	1e5a      	subs	r2, r3, #1
  401358:	60fa      	str	r2, [r7, #12]
  40135a:	2b00      	cmp	r3, #0
  40135c:	d101      	bne.n	401362 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  40135e:	2309      	movs	r3, #9
  401360:	e025      	b.n	4013ae <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401362:	697b      	ldr	r3, [r7, #20]
  401364:	2b01      	cmp	r3, #1
  401366:	d102      	bne.n	40136e <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401368:	687b      	ldr	r3, [r7, #4]
  40136a:	2202      	movs	r2, #2
  40136c:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  40136e:	68bb      	ldr	r3, [r7, #8]
  401370:	f003 0302 	and.w	r3, r3, #2
  401374:	2b00      	cmp	r3, #0
  401376:	d100      	bne.n	40137a <twihs_master_read+0xa6>
			continue;
  401378:	e00c      	b.n	401394 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  40137a:	693b      	ldr	r3, [r7, #16]
  40137c:	1c5a      	adds	r2, r3, #1
  40137e:	613a      	str	r2, [r7, #16]
  401380:	687a      	ldr	r2, [r7, #4]
  401382:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401384:	b2d2      	uxtb	r2, r2
  401386:	701a      	strb	r2, [r3, #0]

		cnt--;
  401388:	697b      	ldr	r3, [r7, #20]
  40138a:	3b01      	subs	r3, #1
  40138c:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  40138e:	f643 2398 	movw	r3, #15000	; 0x3a98
  401392:	60fb      	str	r3, [r7, #12]
	while (cnt > 0) {
  401394:	697b      	ldr	r3, [r7, #20]
  401396:	2b00      	cmp	r3, #0
  401398:	d1d2      	bne.n	401340 <twihs_master_read+0x6c>
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40139a:	bf00      	nop
  40139c:	687b      	ldr	r3, [r7, #4]
  40139e:	6a1b      	ldr	r3, [r3, #32]
  4013a0:	f003 0301 	and.w	r3, r3, #1
  4013a4:	2b00      	cmp	r3, #0
  4013a6:	d0f9      	beq.n	40139c <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  4013a8:	687b      	ldr	r3, [r7, #4]
  4013aa:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  4013ac:	2300      	movs	r3, #0
}
  4013ae:	4618      	mov	r0, r3
  4013b0:	3718      	adds	r7, #24
  4013b2:	46bd      	mov	sp, r7
  4013b4:	bd80      	pop	{r7, pc}
  4013b6:	bf00      	nop
  4013b8:	00401279 	.word	0x00401279

004013bc <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  4013bc:	b480      	push	{r7}
  4013be:	b083      	sub	sp, #12
  4013c0:	af00      	add	r7, sp, #0
  4013c2:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	2280      	movs	r2, #128	; 0x80
  4013c8:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  4013ca:	687b      	ldr	r3, [r7, #4]
  4013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4013ce:	bf00      	nop
  4013d0:	370c      	adds	r7, #12
  4013d2:	46bd      	mov	sp, r7
  4013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013d8:	4770      	bx	lr

004013da <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4013da:	b480      	push	{r7}
  4013dc:	b085      	sub	sp, #20
  4013de:	af00      	add	r7, sp, #0
  4013e0:	6078      	str	r0, [r7, #4]
  4013e2:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4013e4:	2300      	movs	r3, #0
  4013e6:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4013e8:	687b      	ldr	r3, [r7, #4]
  4013ea:	22ac      	movs	r2, #172	; 0xac
  4013ec:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4013ee:	683b      	ldr	r3, [r7, #0]
  4013f0:	681a      	ldr	r2, [r3, #0]
  4013f2:	683b      	ldr	r3, [r7, #0]
  4013f4:	685b      	ldr	r3, [r3, #4]
  4013f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4013fa:	091b      	lsrs	r3, r3, #4
  4013fc:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	2b00      	cmp	r3, #0
  401402:	d003      	beq.n	40140c <uart_init+0x32>
  401404:	68fb      	ldr	r3, [r7, #12]
  401406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40140a:	d301      	bcc.n	401410 <uart_init+0x36>
		return 1;
  40140c:	2301      	movs	r3, #1
  40140e:	e00a      	b.n	401426 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401410:	687b      	ldr	r3, [r7, #4]
  401412:	68fa      	ldr	r2, [r7, #12]
  401414:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401416:	683b      	ldr	r3, [r7, #0]
  401418:	689a      	ldr	r2, [r3, #8]
  40141a:	687b      	ldr	r3, [r7, #4]
  40141c:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40141e:	687b      	ldr	r3, [r7, #4]
  401420:	2250      	movs	r2, #80	; 0x50
  401422:	601a      	str	r2, [r3, #0]

	return 0;
  401424:	2300      	movs	r3, #0
}
  401426:	4618      	mov	r0, r3
  401428:	3714      	adds	r7, #20
  40142a:	46bd      	mov	sp, r7
  40142c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401430:	4770      	bx	lr

00401432 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401432:	b480      	push	{r7}
  401434:	b083      	sub	sp, #12
  401436:	af00      	add	r7, sp, #0
  401438:	6078      	str	r0, [r7, #4]
  40143a:	460b      	mov	r3, r1
  40143c:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40143e:	687b      	ldr	r3, [r7, #4]
  401440:	695b      	ldr	r3, [r3, #20]
  401442:	f003 0302 	and.w	r3, r3, #2
  401446:	2b00      	cmp	r3, #0
  401448:	d101      	bne.n	40144e <uart_write+0x1c>
		return 1;
  40144a:	2301      	movs	r3, #1
  40144c:	e003      	b.n	401456 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40144e:	78fa      	ldrb	r2, [r7, #3]
  401450:	687b      	ldr	r3, [r7, #4]
  401452:	61da      	str	r2, [r3, #28]
	return 0;
  401454:	2300      	movs	r3, #0
}
  401456:	4618      	mov	r0, r3
  401458:	370c      	adds	r7, #12
  40145a:	46bd      	mov	sp, r7
  40145c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401460:	4770      	bx	lr

00401462 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401462:	b480      	push	{r7}
  401464:	b083      	sub	sp, #12
  401466:	af00      	add	r7, sp, #0
  401468:	6078      	str	r0, [r7, #4]
  40146a:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40146c:	687b      	ldr	r3, [r7, #4]
  40146e:	695b      	ldr	r3, [r3, #20]
  401470:	f003 0301 	and.w	r3, r3, #1
  401474:	2b00      	cmp	r3, #0
  401476:	d101      	bne.n	40147c <uart_read+0x1a>
		return 1;
  401478:	2301      	movs	r3, #1
  40147a:	e005      	b.n	401488 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	699b      	ldr	r3, [r3, #24]
  401480:	b2da      	uxtb	r2, r3
  401482:	683b      	ldr	r3, [r7, #0]
  401484:	701a      	strb	r2, [r3, #0]
	return 0;
  401486:	2300      	movs	r3, #0
}
  401488:	4618      	mov	r0, r3
  40148a:	370c      	adds	r7, #12
  40148c:	46bd      	mov	sp, r7
  40148e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401492:	4770      	bx	lr

00401494 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401494:	b480      	push	{r7}
  401496:	b089      	sub	sp, #36	; 0x24
  401498:	af00      	add	r7, sp, #0
  40149a:	60f8      	str	r0, [r7, #12]
  40149c:	60b9      	str	r1, [r7, #8]
  40149e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4014a0:	68bb      	ldr	r3, [r7, #8]
  4014a2:	011a      	lsls	r2, r3, #4
  4014a4:	687b      	ldr	r3, [r7, #4]
  4014a6:	429a      	cmp	r2, r3
  4014a8:	d802      	bhi.n	4014b0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4014aa:	2310      	movs	r3, #16
  4014ac:	61fb      	str	r3, [r7, #28]
  4014ae:	e001      	b.n	4014b4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4014b0:	2308      	movs	r3, #8
  4014b2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4014b4:	687b      	ldr	r3, [r7, #4]
  4014b6:	00da      	lsls	r2, r3, #3
  4014b8:	69fb      	ldr	r3, [r7, #28]
  4014ba:	68b9      	ldr	r1, [r7, #8]
  4014bc:	fb01 f303 	mul.w	r3, r1, r3
  4014c0:	085b      	lsrs	r3, r3, #1
  4014c2:	441a      	add	r2, r3
  4014c4:	69fb      	ldr	r3, [r7, #28]
  4014c6:	68b9      	ldr	r1, [r7, #8]
  4014c8:	fb01 f303 	mul.w	r3, r1, r3
  4014cc:	fbb2 f3f3 	udiv	r3, r2, r3
  4014d0:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4014d2:	69bb      	ldr	r3, [r7, #24]
  4014d4:	08db      	lsrs	r3, r3, #3
  4014d6:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4014d8:	69bb      	ldr	r3, [r7, #24]
  4014da:	f003 0307 	and.w	r3, r3, #7
  4014de:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4014e0:	697b      	ldr	r3, [r7, #20]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d003      	beq.n	4014ee <usart_set_async_baudrate+0x5a>
  4014e6:	697b      	ldr	r3, [r7, #20]
  4014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4014ec:	d301      	bcc.n	4014f2 <usart_set_async_baudrate+0x5e>
		return 1;
  4014ee:	2301      	movs	r3, #1
  4014f0:	e00f      	b.n	401512 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4014f2:	69fb      	ldr	r3, [r7, #28]
  4014f4:	2b08      	cmp	r3, #8
  4014f6:	d105      	bne.n	401504 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4014f8:	68fb      	ldr	r3, [r7, #12]
  4014fa:	685b      	ldr	r3, [r3, #4]
  4014fc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401500:	68fb      	ldr	r3, [r7, #12]
  401502:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401504:	693b      	ldr	r3, [r7, #16]
  401506:	041a      	lsls	r2, r3, #16
  401508:	697b      	ldr	r3, [r7, #20]
  40150a:	431a      	orrs	r2, r3
  40150c:	68fb      	ldr	r3, [r7, #12]
  40150e:	621a      	str	r2, [r3, #32]

	return 0;
  401510:	2300      	movs	r3, #0
}
  401512:	4618      	mov	r0, r3
  401514:	3724      	adds	r7, #36	; 0x24
  401516:	46bd      	mov	sp, r7
  401518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151c:	4770      	bx	lr
	...

00401520 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401520:	b580      	push	{r7, lr}
  401522:	b082      	sub	sp, #8
  401524:	af00      	add	r7, sp, #0
  401526:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401528:	6878      	ldr	r0, [r7, #4]
  40152a:	4b0d      	ldr	r3, [pc, #52]	; (401560 <usart_reset+0x40>)
  40152c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40152e:	687b      	ldr	r3, [r7, #4]
  401530:	2200      	movs	r2, #0
  401532:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401534:	687b      	ldr	r3, [r7, #4]
  401536:	2200      	movs	r2, #0
  401538:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40153a:	687b      	ldr	r3, [r7, #4]
  40153c:	2200      	movs	r2, #0
  40153e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401540:	6878      	ldr	r0, [r7, #4]
  401542:	4b08      	ldr	r3, [pc, #32]	; (401564 <usart_reset+0x44>)
  401544:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401546:	6878      	ldr	r0, [r7, #4]
  401548:	4b07      	ldr	r3, [pc, #28]	; (401568 <usart_reset+0x48>)
  40154a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  40154c:	6878      	ldr	r0, [r7, #4]
  40154e:	4b07      	ldr	r3, [pc, #28]	; (40156c <usart_reset+0x4c>)
  401550:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401552:	6878      	ldr	r0, [r7, #4]
  401554:	4b06      	ldr	r3, [pc, #24]	; (401570 <usart_reset+0x50>)
  401556:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401558:	bf00      	nop
  40155a:	3708      	adds	r7, #8
  40155c:	46bd      	mov	sp, r7
  40155e:	bd80      	pop	{r7, pc}
  401560:	00401701 	.word	0x00401701
  401564:	00401613 	.word	0x00401613
  401568:	00401647 	.word	0x00401647
  40156c:	00401661 	.word	0x00401661
  401570:	0040167d 	.word	0x0040167d

00401574 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401574:	b580      	push	{r7, lr}
  401576:	b084      	sub	sp, #16
  401578:	af00      	add	r7, sp, #0
  40157a:	60f8      	str	r0, [r7, #12]
  40157c:	60b9      	str	r1, [r7, #8]
  40157e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401580:	68f8      	ldr	r0, [r7, #12]
  401582:	4b1a      	ldr	r3, [pc, #104]	; (4015ec <usart_init_rs232+0x78>)
  401584:	4798      	blx	r3

	ul_reg_val = 0;
  401586:	4b1a      	ldr	r3, [pc, #104]	; (4015f0 <usart_init_rs232+0x7c>)
  401588:	2200      	movs	r2, #0
  40158a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40158c:	68bb      	ldr	r3, [r7, #8]
  40158e:	2b00      	cmp	r3, #0
  401590:	d009      	beq.n	4015a6 <usart_init_rs232+0x32>
  401592:	68bb      	ldr	r3, [r7, #8]
  401594:	681b      	ldr	r3, [r3, #0]
  401596:	687a      	ldr	r2, [r7, #4]
  401598:	4619      	mov	r1, r3
  40159a:	68f8      	ldr	r0, [r7, #12]
  40159c:	4b15      	ldr	r3, [pc, #84]	; (4015f4 <usart_init_rs232+0x80>)
  40159e:	4798      	blx	r3
  4015a0:	4603      	mov	r3, r0
  4015a2:	2b00      	cmp	r3, #0
  4015a4:	d001      	beq.n	4015aa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4015a6:	2301      	movs	r3, #1
  4015a8:	e01b      	b.n	4015e2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4015aa:	68bb      	ldr	r3, [r7, #8]
  4015ac:	685a      	ldr	r2, [r3, #4]
  4015ae:	68bb      	ldr	r3, [r7, #8]
  4015b0:	689b      	ldr	r3, [r3, #8]
  4015b2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4015b4:	68bb      	ldr	r3, [r7, #8]
  4015b6:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4015b8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4015ba:	68bb      	ldr	r3, [r7, #8]
  4015bc:	68db      	ldr	r3, [r3, #12]
  4015be:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4015c0:	4b0b      	ldr	r3, [pc, #44]	; (4015f0 <usart_init_rs232+0x7c>)
  4015c2:	681b      	ldr	r3, [r3, #0]
  4015c4:	4313      	orrs	r3, r2
  4015c6:	4a0a      	ldr	r2, [pc, #40]	; (4015f0 <usart_init_rs232+0x7c>)
  4015c8:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4015ca:	4b09      	ldr	r3, [pc, #36]	; (4015f0 <usart_init_rs232+0x7c>)
  4015cc:	681b      	ldr	r3, [r3, #0]
  4015ce:	4a08      	ldr	r2, [pc, #32]	; (4015f0 <usart_init_rs232+0x7c>)
  4015d0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4015d2:	68fb      	ldr	r3, [r7, #12]
  4015d4:	685a      	ldr	r2, [r3, #4]
  4015d6:	4b06      	ldr	r3, [pc, #24]	; (4015f0 <usart_init_rs232+0x7c>)
  4015d8:	681b      	ldr	r3, [r3, #0]
  4015da:	431a      	orrs	r2, r3
  4015dc:	68fb      	ldr	r3, [r7, #12]
  4015de:	605a      	str	r2, [r3, #4]

	return 0;
  4015e0:	2300      	movs	r3, #0
}
  4015e2:	4618      	mov	r0, r3
  4015e4:	3710      	adds	r7, #16
  4015e6:	46bd      	mov	sp, r7
  4015e8:	bd80      	pop	{r7, pc}
  4015ea:	bf00      	nop
  4015ec:	00401521 	.word	0x00401521
  4015f0:	20400a44 	.word	0x20400a44
  4015f4:	00401495 	.word	0x00401495

004015f8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4015f8:	b480      	push	{r7}
  4015fa:	b083      	sub	sp, #12
  4015fc:	af00      	add	r7, sp, #0
  4015fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401600:	687b      	ldr	r3, [r7, #4]
  401602:	2240      	movs	r2, #64	; 0x40
  401604:	601a      	str	r2, [r3, #0]
}
  401606:	bf00      	nop
  401608:	370c      	adds	r7, #12
  40160a:	46bd      	mov	sp, r7
  40160c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401610:	4770      	bx	lr

00401612 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401612:	b480      	push	{r7}
  401614:	b083      	sub	sp, #12
  401616:	af00      	add	r7, sp, #0
  401618:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40161a:	687b      	ldr	r3, [r7, #4]
  40161c:	2288      	movs	r2, #136	; 0x88
  40161e:	601a      	str	r2, [r3, #0]
}
  401620:	bf00      	nop
  401622:	370c      	adds	r7, #12
  401624:	46bd      	mov	sp, r7
  401626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162a:	4770      	bx	lr

0040162c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40162c:	b480      	push	{r7}
  40162e:	b083      	sub	sp, #12
  401630:	af00      	add	r7, sp, #0
  401632:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401634:	687b      	ldr	r3, [r7, #4]
  401636:	2210      	movs	r2, #16
  401638:	601a      	str	r2, [r3, #0]
}
  40163a:	bf00      	nop
  40163c:	370c      	adds	r7, #12
  40163e:	46bd      	mov	sp, r7
  401640:	f85d 7b04 	ldr.w	r7, [sp], #4
  401644:	4770      	bx	lr

00401646 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401646:	b480      	push	{r7}
  401648:	b083      	sub	sp, #12
  40164a:	af00      	add	r7, sp, #0
  40164c:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40164e:	687b      	ldr	r3, [r7, #4]
  401650:	2224      	movs	r2, #36	; 0x24
  401652:	601a      	str	r2, [r3, #0]
}
  401654:	bf00      	nop
  401656:	370c      	adds	r7, #12
  401658:	46bd      	mov	sp, r7
  40165a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40165e:	4770      	bx	lr

00401660 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401660:	b480      	push	{r7}
  401662:	b083      	sub	sp, #12
  401664:	af00      	add	r7, sp, #0
  401666:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401668:	687b      	ldr	r3, [r7, #4]
  40166a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40166e:	601a      	str	r2, [r3, #0]
}
  401670:	bf00      	nop
  401672:	370c      	adds	r7, #12
  401674:	46bd      	mov	sp, r7
  401676:	f85d 7b04 	ldr.w	r7, [sp], #4
  40167a:	4770      	bx	lr

0040167c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40167c:	b480      	push	{r7}
  40167e:	b083      	sub	sp, #12
  401680:	af00      	add	r7, sp, #0
  401682:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401684:	687b      	ldr	r3, [r7, #4]
  401686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40168a:	601a      	str	r2, [r3, #0]
}
  40168c:	bf00      	nop
  40168e:	370c      	adds	r7, #12
  401690:	46bd      	mov	sp, r7
  401692:	f85d 7b04 	ldr.w	r7, [sp], #4
  401696:	4770      	bx	lr

00401698 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401698:	b480      	push	{r7}
  40169a:	b083      	sub	sp, #12
  40169c:	af00      	add	r7, sp, #0
  40169e:	6078      	str	r0, [r7, #4]
  4016a0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	695b      	ldr	r3, [r3, #20]
  4016a6:	f003 0302 	and.w	r3, r3, #2
  4016aa:	2b00      	cmp	r3, #0
  4016ac:	d101      	bne.n	4016b2 <usart_write+0x1a>
		return 1;
  4016ae:	2301      	movs	r3, #1
  4016b0:	e005      	b.n	4016be <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4016b2:	683b      	ldr	r3, [r7, #0]
  4016b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	61da      	str	r2, [r3, #28]
	return 0;
  4016bc:	2300      	movs	r3, #0
}
  4016be:	4618      	mov	r0, r3
  4016c0:	370c      	adds	r7, #12
  4016c2:	46bd      	mov	sp, r7
  4016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c8:	4770      	bx	lr

004016ca <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4016ca:	b480      	push	{r7}
  4016cc:	b083      	sub	sp, #12
  4016ce:	af00      	add	r7, sp, #0
  4016d0:	6078      	str	r0, [r7, #4]
  4016d2:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	695b      	ldr	r3, [r3, #20]
  4016d8:	f003 0301 	and.w	r3, r3, #1
  4016dc:	2b00      	cmp	r3, #0
  4016de:	d101      	bne.n	4016e4 <usart_read+0x1a>
		return 1;
  4016e0:	2301      	movs	r3, #1
  4016e2:	e006      	b.n	4016f2 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016e4:	687b      	ldr	r3, [r7, #4]
  4016e6:	699b      	ldr	r3, [r3, #24]
  4016e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4016ec:	683b      	ldr	r3, [r7, #0]
  4016ee:	601a      	str	r2, [r3, #0]

	return 0;
  4016f0:	2300      	movs	r3, #0
}
  4016f2:	4618      	mov	r0, r3
  4016f4:	370c      	adds	r7, #12
  4016f6:	46bd      	mov	sp, r7
  4016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016fc:	4770      	bx	lr
	...

00401700 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401700:	b480      	push	{r7}
  401702:	b083      	sub	sp, #12
  401704:	af00      	add	r7, sp, #0
  401706:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401708:	687b      	ldr	r3, [r7, #4]
  40170a:	4a04      	ldr	r2, [pc, #16]	; (40171c <usart_disable_writeprotect+0x1c>)
  40170c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401710:	bf00      	nop
  401712:	370c      	adds	r7, #12
  401714:	46bd      	mov	sp, r7
  401716:	f85d 7b04 	ldr.w	r7, [sp], #4
  40171a:	4770      	bx	lr
  40171c:	55534100 	.word	0x55534100

00401720 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401720:	b480      	push	{r7}
  401722:	b083      	sub	sp, #12
  401724:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401726:	f3ef 8310 	mrs	r3, PRIMASK
  40172a:	607b      	str	r3, [r7, #4]
  return(result);
  40172c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40172e:	2b00      	cmp	r3, #0
  401730:	bf0c      	ite	eq
  401732:	2301      	moveq	r3, #1
  401734:	2300      	movne	r3, #0
  401736:	b2db      	uxtb	r3, r3
  401738:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40173a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40173c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401740:	4b04      	ldr	r3, [pc, #16]	; (401754 <cpu_irq_save+0x34>)
  401742:	2200      	movs	r2, #0
  401744:	701a      	strb	r2, [r3, #0]
	return flags;
  401746:	683b      	ldr	r3, [r7, #0]
}
  401748:	4618      	mov	r0, r3
  40174a:	370c      	adds	r7, #12
  40174c:	46bd      	mov	sp, r7
  40174e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401752:	4770      	bx	lr
  401754:	20400000 	.word	0x20400000

00401758 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401758:	b480      	push	{r7}
  40175a:	b083      	sub	sp, #12
  40175c:	af00      	add	r7, sp, #0
  40175e:	6078      	str	r0, [r7, #4]
	return (flags);
  401760:	687b      	ldr	r3, [r7, #4]
  401762:	2b00      	cmp	r3, #0
  401764:	bf14      	ite	ne
  401766:	2301      	movne	r3, #1
  401768:	2300      	moveq	r3, #0
  40176a:	b2db      	uxtb	r3, r3
}
  40176c:	4618      	mov	r0, r3
  40176e:	370c      	adds	r7, #12
  401770:	46bd      	mov	sp, r7
  401772:	f85d 7b04 	ldr.w	r7, [sp], #4
  401776:	4770      	bx	lr

00401778 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401778:	b580      	push	{r7, lr}
  40177a:	b082      	sub	sp, #8
  40177c:	af00      	add	r7, sp, #0
  40177e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401780:	6878      	ldr	r0, [r7, #4]
  401782:	4b07      	ldr	r3, [pc, #28]	; (4017a0 <cpu_irq_restore+0x28>)
  401784:	4798      	blx	r3
  401786:	4603      	mov	r3, r0
  401788:	2b00      	cmp	r3, #0
  40178a:	d005      	beq.n	401798 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40178c:	4b05      	ldr	r3, [pc, #20]	; (4017a4 <cpu_irq_restore+0x2c>)
  40178e:	2201      	movs	r2, #1
  401790:	701a      	strb	r2, [r3, #0]
  401792:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401796:	b662      	cpsie	i
}
  401798:	bf00      	nop
  40179a:	3708      	adds	r7, #8
  40179c:	46bd      	mov	sp, r7
  40179e:	bd80      	pop	{r7, pc}
  4017a0:	00401759 	.word	0x00401759
  4017a4:	20400000 	.word	0x20400000

004017a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4017a8:	b580      	push	{r7, lr}
  4017aa:	b084      	sub	sp, #16
  4017ac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4017ae:	4b1e      	ldr	r3, [pc, #120]	; (401828 <Reset_Handler+0x80>)
  4017b0:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4017b2:	4b1e      	ldr	r3, [pc, #120]	; (40182c <Reset_Handler+0x84>)
  4017b4:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4017b6:	68fa      	ldr	r2, [r7, #12]
  4017b8:	68bb      	ldr	r3, [r7, #8]
  4017ba:	429a      	cmp	r2, r3
  4017bc:	d00c      	beq.n	4017d8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4017be:	e007      	b.n	4017d0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4017c0:	68bb      	ldr	r3, [r7, #8]
  4017c2:	1d1a      	adds	r2, r3, #4
  4017c4:	60ba      	str	r2, [r7, #8]
  4017c6:	68fa      	ldr	r2, [r7, #12]
  4017c8:	1d11      	adds	r1, r2, #4
  4017ca:	60f9      	str	r1, [r7, #12]
  4017cc:	6812      	ldr	r2, [r2, #0]
  4017ce:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4017d0:	68bb      	ldr	r3, [r7, #8]
  4017d2:	4a17      	ldr	r2, [pc, #92]	; (401830 <Reset_Handler+0x88>)
  4017d4:	4293      	cmp	r3, r2
  4017d6:	d3f3      	bcc.n	4017c0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4017d8:	4b16      	ldr	r3, [pc, #88]	; (401834 <Reset_Handler+0x8c>)
  4017da:	60bb      	str	r3, [r7, #8]
  4017dc:	e004      	b.n	4017e8 <Reset_Handler+0x40>
                *pDest++ = 0;
  4017de:	68bb      	ldr	r3, [r7, #8]
  4017e0:	1d1a      	adds	r2, r3, #4
  4017e2:	60ba      	str	r2, [r7, #8]
  4017e4:	2200      	movs	r2, #0
  4017e6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4017e8:	68bb      	ldr	r3, [r7, #8]
  4017ea:	4a13      	ldr	r2, [pc, #76]	; (401838 <Reset_Handler+0x90>)
  4017ec:	4293      	cmp	r3, r2
  4017ee:	d3f6      	bcc.n	4017de <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4017f0:	4b12      	ldr	r3, [pc, #72]	; (40183c <Reset_Handler+0x94>)
  4017f2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017f4:	4a12      	ldr	r2, [pc, #72]	; (401840 <Reset_Handler+0x98>)
  4017f6:	68fb      	ldr	r3, [r7, #12]
  4017f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017fc:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4017fe:	4b11      	ldr	r3, [pc, #68]	; (401844 <Reset_Handler+0x9c>)
  401800:	4798      	blx	r3
  401802:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401804:	4a10      	ldr	r2, [pc, #64]	; (401848 <Reset_Handler+0xa0>)
  401806:	4b10      	ldr	r3, [pc, #64]	; (401848 <Reset_Handler+0xa0>)
  401808:	681b      	ldr	r3, [r3, #0]
  40180a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40180e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401814:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401818:	6878      	ldr	r0, [r7, #4]
  40181a:	4b0c      	ldr	r3, [pc, #48]	; (40184c <Reset_Handler+0xa4>)
  40181c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40181e:	4b0c      	ldr	r3, [pc, #48]	; (401850 <Reset_Handler+0xa8>)
  401820:	4798      	blx	r3

        /* Branch to main function */
        main();
  401822:	4b0c      	ldr	r3, [pc, #48]	; (401854 <Reset_Handler+0xac>)
  401824:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401826:	e7fe      	b.n	401826 <Reset_Handler+0x7e>
  401828:	00407dcc 	.word	0x00407dcc
  40182c:	20400000 	.word	0x20400000
  401830:	204009b8 	.word	0x204009b8
  401834:	204009b8 	.word	0x204009b8
  401838:	20400ab4 	.word	0x20400ab4
  40183c:	00400000 	.word	0x00400000
  401840:	e000ed00 	.word	0xe000ed00
  401844:	00401721 	.word	0x00401721
  401848:	e000ed88 	.word	0xe000ed88
  40184c:	00401779 	.word	0x00401779
  401850:	0040226d 	.word	0x0040226d
  401854:	00402125 	.word	0x00402125

00401858 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401858:	b480      	push	{r7}
  40185a:	af00      	add	r7, sp, #0
        while (1) {
  40185c:	e7fe      	b.n	40185c <Dummy_Handler+0x4>
	...

00401860 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401860:	b480      	push	{r7}
  401862:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401864:	4b52      	ldr	r3, [pc, #328]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  401866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401868:	f003 0303 	and.w	r3, r3, #3
  40186c:	2b01      	cmp	r3, #1
  40186e:	d014      	beq.n	40189a <SystemCoreClockUpdate+0x3a>
  401870:	2b01      	cmp	r3, #1
  401872:	d302      	bcc.n	40187a <SystemCoreClockUpdate+0x1a>
  401874:	2b02      	cmp	r3, #2
  401876:	d038      	beq.n	4018ea <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401878:	e07a      	b.n	401970 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40187a:	4b4e      	ldr	r3, [pc, #312]	; (4019b4 <SystemCoreClockUpdate+0x154>)
  40187c:	695b      	ldr	r3, [r3, #20]
  40187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401882:	2b00      	cmp	r3, #0
  401884:	d004      	beq.n	401890 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401886:	4b4c      	ldr	r3, [pc, #304]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401888:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40188c:	601a      	str	r2, [r3, #0]
    break;
  40188e:	e06f      	b.n	401970 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401890:	4b49      	ldr	r3, [pc, #292]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401892:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401896:	601a      	str	r2, [r3, #0]
    break;
  401898:	e06a      	b.n	401970 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40189a:	4b45      	ldr	r3, [pc, #276]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  40189c:	6a1b      	ldr	r3, [r3, #32]
  40189e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4018a2:	2b00      	cmp	r3, #0
  4018a4:	d003      	beq.n	4018ae <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4018a6:	4b44      	ldr	r3, [pc, #272]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018a8:	4a44      	ldr	r2, [pc, #272]	; (4019bc <SystemCoreClockUpdate+0x15c>)
  4018aa:	601a      	str	r2, [r3, #0]
    break;
  4018ac:	e060      	b.n	401970 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018ae:	4b42      	ldr	r3, [pc, #264]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018b0:	4a43      	ldr	r2, [pc, #268]	; (4019c0 <SystemCoreClockUpdate+0x160>)
  4018b2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018b4:	4b3e      	ldr	r3, [pc, #248]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  4018b6:	6a1b      	ldr	r3, [r3, #32]
  4018b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018bc:	2b10      	cmp	r3, #16
  4018be:	d004      	beq.n	4018ca <SystemCoreClockUpdate+0x6a>
  4018c0:	2b20      	cmp	r3, #32
  4018c2:	d008      	beq.n	4018d6 <SystemCoreClockUpdate+0x76>
  4018c4:	2b00      	cmp	r3, #0
  4018c6:	d00e      	beq.n	4018e6 <SystemCoreClockUpdate+0x86>
          break;
  4018c8:	e00e      	b.n	4018e8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4018ca:	4b3b      	ldr	r3, [pc, #236]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	005b      	lsls	r3, r3, #1
  4018d0:	4a39      	ldr	r2, [pc, #228]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018d2:	6013      	str	r3, [r2, #0]
          break;
  4018d4:	e008      	b.n	4018e8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4018d6:	4b38      	ldr	r3, [pc, #224]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018d8:	681a      	ldr	r2, [r3, #0]
  4018da:	4613      	mov	r3, r2
  4018dc:	005b      	lsls	r3, r3, #1
  4018de:	4413      	add	r3, r2
  4018e0:	4a35      	ldr	r2, [pc, #212]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018e2:	6013      	str	r3, [r2, #0]
          break;
  4018e4:	e000      	b.n	4018e8 <SystemCoreClockUpdate+0x88>
          break;
  4018e6:	bf00      	nop
    break;
  4018e8:	e042      	b.n	401970 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018ea:	4b31      	ldr	r3, [pc, #196]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  4018ec:	6a1b      	ldr	r3, [r3, #32]
  4018ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4018f2:	2b00      	cmp	r3, #0
  4018f4:	d003      	beq.n	4018fe <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018f6:	4b30      	ldr	r3, [pc, #192]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4018f8:	4a30      	ldr	r2, [pc, #192]	; (4019bc <SystemCoreClockUpdate+0x15c>)
  4018fa:	601a      	str	r2, [r3, #0]
  4018fc:	e01c      	b.n	401938 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018fe:	4b2e      	ldr	r3, [pc, #184]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401900:	4a2f      	ldr	r2, [pc, #188]	; (4019c0 <SystemCoreClockUpdate+0x160>)
  401902:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401904:	4b2a      	ldr	r3, [pc, #168]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  401906:	6a1b      	ldr	r3, [r3, #32]
  401908:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40190c:	2b10      	cmp	r3, #16
  40190e:	d004      	beq.n	40191a <SystemCoreClockUpdate+0xba>
  401910:	2b20      	cmp	r3, #32
  401912:	d008      	beq.n	401926 <SystemCoreClockUpdate+0xc6>
  401914:	2b00      	cmp	r3, #0
  401916:	d00e      	beq.n	401936 <SystemCoreClockUpdate+0xd6>
          break;
  401918:	e00e      	b.n	401938 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  40191a:	4b27      	ldr	r3, [pc, #156]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  40191c:	681b      	ldr	r3, [r3, #0]
  40191e:	005b      	lsls	r3, r3, #1
  401920:	4a25      	ldr	r2, [pc, #148]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401922:	6013      	str	r3, [r2, #0]
          break;
  401924:	e008      	b.n	401938 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401926:	4b24      	ldr	r3, [pc, #144]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401928:	681a      	ldr	r2, [r3, #0]
  40192a:	4613      	mov	r3, r2
  40192c:	005b      	lsls	r3, r3, #1
  40192e:	4413      	add	r3, r2
  401930:	4a21      	ldr	r2, [pc, #132]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401932:	6013      	str	r3, [r2, #0]
          break;
  401934:	e000      	b.n	401938 <SystemCoreClockUpdate+0xd8>
          break;
  401936:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401938:	4b1d      	ldr	r3, [pc, #116]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  40193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40193c:	f003 0303 	and.w	r3, r3, #3
  401940:	2b02      	cmp	r3, #2
  401942:	d114      	bne.n	40196e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401944:	4b1a      	ldr	r3, [pc, #104]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  401946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401948:	0c1b      	lsrs	r3, r3, #16
  40194a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40194e:	3301      	adds	r3, #1
  401950:	4a19      	ldr	r2, [pc, #100]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401952:	6812      	ldr	r2, [r2, #0]
  401954:	fb02 f303 	mul.w	r3, r2, r3
  401958:	4a17      	ldr	r2, [pc, #92]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  40195a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40195c:	4b14      	ldr	r3, [pc, #80]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  40195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401960:	b2db      	uxtb	r3, r3
  401962:	4a15      	ldr	r2, [pc, #84]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  401964:	6812      	ldr	r2, [r2, #0]
  401966:	fbb2 f3f3 	udiv	r3, r2, r3
  40196a:	4a13      	ldr	r2, [pc, #76]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  40196c:	6013      	str	r3, [r2, #0]
    break;
  40196e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401970:	4b0f      	ldr	r3, [pc, #60]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  401972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401974:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401978:	2b70      	cmp	r3, #112	; 0x70
  40197a:	d108      	bne.n	40198e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  40197c:	4b0e      	ldr	r3, [pc, #56]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  40197e:	681b      	ldr	r3, [r3, #0]
  401980:	4a10      	ldr	r2, [pc, #64]	; (4019c4 <SystemCoreClockUpdate+0x164>)
  401982:	fba2 2303 	umull	r2, r3, r2, r3
  401986:	085b      	lsrs	r3, r3, #1
  401988:	4a0b      	ldr	r2, [pc, #44]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  40198a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  40198c:	e00a      	b.n	4019a4 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40198e:	4b08      	ldr	r3, [pc, #32]	; (4019b0 <SystemCoreClockUpdate+0x150>)
  401990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401992:	091b      	lsrs	r3, r3, #4
  401994:	f003 0307 	and.w	r3, r3, #7
  401998:	4a07      	ldr	r2, [pc, #28]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  40199a:	6812      	ldr	r2, [r2, #0]
  40199c:	fa22 f303 	lsr.w	r3, r2, r3
  4019a0:	4a05      	ldr	r2, [pc, #20]	; (4019b8 <SystemCoreClockUpdate+0x158>)
  4019a2:	6013      	str	r3, [r2, #0]
}
  4019a4:	bf00      	nop
  4019a6:	46bd      	mov	sp, r7
  4019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ac:	4770      	bx	lr
  4019ae:	bf00      	nop
  4019b0:	400e0600 	.word	0x400e0600
  4019b4:	400e1810 	.word	0x400e1810
  4019b8:	20400004 	.word	0x20400004
  4019bc:	00b71b00 	.word	0x00b71b00
  4019c0:	003d0900 	.word	0x003d0900
  4019c4:	aaaaaaab 	.word	0xaaaaaaab

004019c8 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4019c8:	b480      	push	{r7}
  4019ca:	b083      	sub	sp, #12
  4019cc:	af00      	add	r7, sp, #0
  4019ce:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4019d0:	687b      	ldr	r3, [r7, #4]
  4019d2:	4a19      	ldr	r2, [pc, #100]	; (401a38 <system_init_flash+0x70>)
  4019d4:	4293      	cmp	r3, r2
  4019d6:	d804      	bhi.n	4019e2 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4019d8:	4b18      	ldr	r3, [pc, #96]	; (401a3c <system_init_flash+0x74>)
  4019da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4019de:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4019e0:	e023      	b.n	401a2a <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4019e2:	687b      	ldr	r3, [r7, #4]
  4019e4:	4a16      	ldr	r2, [pc, #88]	; (401a40 <system_init_flash+0x78>)
  4019e6:	4293      	cmp	r3, r2
  4019e8:	d803      	bhi.n	4019f2 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4019ea:	4b14      	ldr	r3, [pc, #80]	; (401a3c <system_init_flash+0x74>)
  4019ec:	4a15      	ldr	r2, [pc, #84]	; (401a44 <system_init_flash+0x7c>)
  4019ee:	601a      	str	r2, [r3, #0]
}
  4019f0:	e01b      	b.n	401a2a <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	4a14      	ldr	r2, [pc, #80]	; (401a48 <system_init_flash+0x80>)
  4019f6:	4293      	cmp	r3, r2
  4019f8:	d803      	bhi.n	401a02 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019fa:	4b10      	ldr	r3, [pc, #64]	; (401a3c <system_init_flash+0x74>)
  4019fc:	4a13      	ldr	r2, [pc, #76]	; (401a4c <system_init_flash+0x84>)
  4019fe:	601a      	str	r2, [r3, #0]
}
  401a00:	e013      	b.n	401a2a <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	4a12      	ldr	r2, [pc, #72]	; (401a50 <system_init_flash+0x88>)
  401a06:	4293      	cmp	r3, r2
  401a08:	d803      	bhi.n	401a12 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401a0a:	4b0c      	ldr	r3, [pc, #48]	; (401a3c <system_init_flash+0x74>)
  401a0c:	4a11      	ldr	r2, [pc, #68]	; (401a54 <system_init_flash+0x8c>)
  401a0e:	601a      	str	r2, [r3, #0]
}
  401a10:	e00b      	b.n	401a2a <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401a12:	687b      	ldr	r3, [r7, #4]
  401a14:	4a10      	ldr	r2, [pc, #64]	; (401a58 <system_init_flash+0x90>)
  401a16:	4293      	cmp	r3, r2
  401a18:	d804      	bhi.n	401a24 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401a1a:	4b08      	ldr	r3, [pc, #32]	; (401a3c <system_init_flash+0x74>)
  401a1c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401a20:	601a      	str	r2, [r3, #0]
}
  401a22:	e002      	b.n	401a2a <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401a24:	4b05      	ldr	r3, [pc, #20]	; (401a3c <system_init_flash+0x74>)
  401a26:	4a0d      	ldr	r2, [pc, #52]	; (401a5c <system_init_flash+0x94>)
  401a28:	601a      	str	r2, [r3, #0]
}
  401a2a:	bf00      	nop
  401a2c:	370c      	adds	r7, #12
  401a2e:	46bd      	mov	sp, r7
  401a30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a34:	4770      	bx	lr
  401a36:	bf00      	nop
  401a38:	01312cff 	.word	0x01312cff
  401a3c:	400e0c00 	.word	0x400e0c00
  401a40:	026259ff 	.word	0x026259ff
  401a44:	04000100 	.word	0x04000100
  401a48:	039386ff 	.word	0x039386ff
  401a4c:	04000200 	.word	0x04000200
  401a50:	04c4b3ff 	.word	0x04c4b3ff
  401a54:	04000300 	.word	0x04000300
  401a58:	05f5e0ff 	.word	0x05f5e0ff
  401a5c:	04000500 	.word	0x04000500

00401a60 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401a60:	b480      	push	{r7}
  401a62:	b085      	sub	sp, #20
  401a64:	af00      	add	r7, sp, #0
  401a66:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401a68:	4b10      	ldr	r3, [pc, #64]	; (401aac <_sbrk+0x4c>)
  401a6a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401a6c:	4b10      	ldr	r3, [pc, #64]	; (401ab0 <_sbrk+0x50>)
  401a6e:	681b      	ldr	r3, [r3, #0]
  401a70:	2b00      	cmp	r3, #0
  401a72:	d102      	bne.n	401a7a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401a74:	4b0e      	ldr	r3, [pc, #56]	; (401ab0 <_sbrk+0x50>)
  401a76:	4a0f      	ldr	r2, [pc, #60]	; (401ab4 <_sbrk+0x54>)
  401a78:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401a7a:	4b0d      	ldr	r3, [pc, #52]	; (401ab0 <_sbrk+0x50>)
  401a7c:	681b      	ldr	r3, [r3, #0]
  401a7e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401a80:	68ba      	ldr	r2, [r7, #8]
  401a82:	687b      	ldr	r3, [r7, #4]
  401a84:	441a      	add	r2, r3
  401a86:	68fb      	ldr	r3, [r7, #12]
  401a88:	429a      	cmp	r2, r3
  401a8a:	dd02      	ble.n	401a92 <_sbrk+0x32>
		return (caddr_t) -1;	
  401a8c:	f04f 33ff 	mov.w	r3, #4294967295
  401a90:	e006      	b.n	401aa0 <_sbrk+0x40>
	}

	heap += incr;
  401a92:	4b07      	ldr	r3, [pc, #28]	; (401ab0 <_sbrk+0x50>)
  401a94:	681a      	ldr	r2, [r3, #0]
  401a96:	687b      	ldr	r3, [r7, #4]
  401a98:	4413      	add	r3, r2
  401a9a:	4a05      	ldr	r2, [pc, #20]	; (401ab0 <_sbrk+0x50>)
  401a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401a9e:	68bb      	ldr	r3, [r7, #8]
}
  401aa0:	4618      	mov	r0, r3
  401aa2:	3714      	adds	r7, #20
  401aa4:	46bd      	mov	sp, r7
  401aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aaa:	4770      	bx	lr
  401aac:	2045fffc 	.word	0x2045fffc
  401ab0:	20400a48 	.word	0x20400a48
  401ab4:	20402cb8 	.word	0x20402cb8

00401ab8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401ab8:	b480      	push	{r7}
  401aba:	b083      	sub	sp, #12
  401abc:	af00      	add	r7, sp, #0
  401abe:	6078      	str	r0, [r7, #4]
	return -1;
  401ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
  401ac4:	4618      	mov	r0, r3
  401ac6:	370c      	adds	r7, #12
  401ac8:	46bd      	mov	sp, r7
  401aca:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ace:	4770      	bx	lr

00401ad0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401ad0:	b480      	push	{r7}
  401ad2:	b083      	sub	sp, #12
  401ad4:	af00      	add	r7, sp, #0
  401ad6:	6078      	str	r0, [r7, #4]
  401ad8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401ada:	683b      	ldr	r3, [r7, #0]
  401adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ae0:	605a      	str	r2, [r3, #4]

	return 0;
  401ae2:	2300      	movs	r3, #0
}
  401ae4:	4618      	mov	r0, r3
  401ae6:	370c      	adds	r7, #12
  401ae8:	46bd      	mov	sp, r7
  401aea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aee:	4770      	bx	lr

00401af0 <_isatty>:

extern int _isatty(int file)
{
  401af0:	b480      	push	{r7}
  401af2:	b083      	sub	sp, #12
  401af4:	af00      	add	r7, sp, #0
  401af6:	6078      	str	r0, [r7, #4]
	return 1;
  401af8:	2301      	movs	r3, #1
}
  401afa:	4618      	mov	r0, r3
  401afc:	370c      	adds	r7, #12
  401afe:	46bd      	mov	sp, r7
  401b00:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b04:	4770      	bx	lr

00401b06 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401b06:	b480      	push	{r7}
  401b08:	b085      	sub	sp, #20
  401b0a:	af00      	add	r7, sp, #0
  401b0c:	60f8      	str	r0, [r7, #12]
  401b0e:	60b9      	str	r1, [r7, #8]
  401b10:	607a      	str	r2, [r7, #4]
	return 0;
  401b12:	2300      	movs	r3, #0
}
  401b14:	4618      	mov	r0, r3
  401b16:	3714      	adds	r7, #20
  401b18:	46bd      	mov	sp, r7
  401b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b1e:	4770      	bx	lr

00401b20 <osc_get_rate>:
{
  401b20:	b480      	push	{r7}
  401b22:	b083      	sub	sp, #12
  401b24:	af00      	add	r7, sp, #0
  401b26:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401b28:	687b      	ldr	r3, [r7, #4]
  401b2a:	2b07      	cmp	r3, #7
  401b2c:	d825      	bhi.n	401b7a <osc_get_rate+0x5a>
  401b2e:	a201      	add	r2, pc, #4	; (adr r2, 401b34 <osc_get_rate+0x14>)
  401b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b34:	00401b55 	.word	0x00401b55
  401b38:	00401b5b 	.word	0x00401b5b
  401b3c:	00401b61 	.word	0x00401b61
  401b40:	00401b67 	.word	0x00401b67
  401b44:	00401b6b 	.word	0x00401b6b
  401b48:	00401b6f 	.word	0x00401b6f
  401b4c:	00401b73 	.word	0x00401b73
  401b50:	00401b77 	.word	0x00401b77
		return OSC_SLCK_32K_RC_HZ;
  401b54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b58:	e010      	b.n	401b7c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b5e:	e00d      	b.n	401b7c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b64:	e00a      	b.n	401b7c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401b66:	4b08      	ldr	r3, [pc, #32]	; (401b88 <osc_get_rate+0x68>)
  401b68:	e008      	b.n	401b7c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401b6a:	4b08      	ldr	r3, [pc, #32]	; (401b8c <osc_get_rate+0x6c>)
  401b6c:	e006      	b.n	401b7c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401b6e:	4b08      	ldr	r3, [pc, #32]	; (401b90 <osc_get_rate+0x70>)
  401b70:	e004      	b.n	401b7c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401b72:	4b07      	ldr	r3, [pc, #28]	; (401b90 <osc_get_rate+0x70>)
  401b74:	e002      	b.n	401b7c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401b76:	4b06      	ldr	r3, [pc, #24]	; (401b90 <osc_get_rate+0x70>)
  401b78:	e000      	b.n	401b7c <osc_get_rate+0x5c>
	return 0;
  401b7a:	2300      	movs	r3, #0
}
  401b7c:	4618      	mov	r0, r3
  401b7e:	370c      	adds	r7, #12
  401b80:	46bd      	mov	sp, r7
  401b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b86:	4770      	bx	lr
  401b88:	003d0900 	.word	0x003d0900
  401b8c:	007a1200 	.word	0x007a1200
  401b90:	00b71b00 	.word	0x00b71b00

00401b94 <sysclk_get_main_hz>:
{
  401b94:	b580      	push	{r7, lr}
  401b96:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401b98:	2006      	movs	r0, #6
  401b9a:	4b05      	ldr	r3, [pc, #20]	; (401bb0 <sysclk_get_main_hz+0x1c>)
  401b9c:	4798      	blx	r3
  401b9e:	4602      	mov	r2, r0
  401ba0:	4613      	mov	r3, r2
  401ba2:	009b      	lsls	r3, r3, #2
  401ba4:	4413      	add	r3, r2
  401ba6:	009a      	lsls	r2, r3, #2
  401ba8:	4413      	add	r3, r2
}
  401baa:	4618      	mov	r0, r3
  401bac:	bd80      	pop	{r7, pc}
  401bae:	bf00      	nop
  401bb0:	00401b21 	.word	0x00401b21

00401bb4 <sysclk_get_cpu_hz>:
{
  401bb4:	b580      	push	{r7, lr}
  401bb6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401bb8:	4b02      	ldr	r3, [pc, #8]	; (401bc4 <sysclk_get_cpu_hz+0x10>)
  401bba:	4798      	blx	r3
  401bbc:	4603      	mov	r3, r0
}
  401bbe:	4618      	mov	r0, r3
  401bc0:	bd80      	pop	{r7, pc}
  401bc2:	bf00      	nop
  401bc4:	00401b95 	.word	0x00401b95

00401bc8 <sysclk_get_peripheral_hz>:
{
  401bc8:	b580      	push	{r7, lr}
  401bca:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401bcc:	4b02      	ldr	r3, [pc, #8]	; (401bd8 <sysclk_get_peripheral_hz+0x10>)
  401bce:	4798      	blx	r3
  401bd0:	4603      	mov	r3, r0
  401bd2:	085b      	lsrs	r3, r3, #1
}
  401bd4:	4618      	mov	r0, r3
  401bd6:	bd80      	pop	{r7, pc}
  401bd8:	00401b95 	.word	0x00401b95

00401bdc <sysclk_enable_peripheral_clock>:
{
  401bdc:	b580      	push	{r7, lr}
  401bde:	b082      	sub	sp, #8
  401be0:	af00      	add	r7, sp, #0
  401be2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401be4:	6878      	ldr	r0, [r7, #4]
  401be6:	4b03      	ldr	r3, [pc, #12]	; (401bf4 <sysclk_enable_peripheral_clock+0x18>)
  401be8:	4798      	blx	r3
}
  401bea:	bf00      	nop
  401bec:	3708      	adds	r7, #8
  401bee:	46bd      	mov	sp, r7
  401bf0:	bd80      	pop	{r7, pc}
  401bf2:	bf00      	nop
  401bf4:	00401081 	.word	0x00401081

00401bf8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401bf8:	b580      	push	{r7, lr}
  401bfa:	b08c      	sub	sp, #48	; 0x30
  401bfc:	af00      	add	r7, sp, #0
  401bfe:	6078      	str	r0, [r7, #4]
  401c00:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401c02:	4b49      	ldr	r3, [pc, #292]	; (401d28 <usart_serial_init+0x130>)
  401c04:	4798      	blx	r3
  401c06:	4603      	mov	r3, r0
  401c08:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401c0a:	683b      	ldr	r3, [r7, #0]
  401c0c:	681b      	ldr	r3, [r3, #0]
  401c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401c10:	683b      	ldr	r3, [r7, #0]
  401c12:	689b      	ldr	r3, [r3, #8]
  401c14:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401c16:	683b      	ldr	r3, [r7, #0]
  401c18:	681b      	ldr	r3, [r3, #0]
  401c1a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401c1c:	683b      	ldr	r3, [r7, #0]
  401c1e:	685b      	ldr	r3, [r3, #4]
  401c20:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401c22:	683b      	ldr	r3, [r7, #0]
  401c24:	689b      	ldr	r3, [r3, #8]
  401c26:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401c28:	683b      	ldr	r3, [r7, #0]
  401c2a:	68db      	ldr	r3, [r3, #12]
  401c2c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401c2e:	2300      	movs	r3, #0
  401c30:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c32:	687b      	ldr	r3, [r7, #4]
  401c34:	4a3d      	ldr	r2, [pc, #244]	; (401d2c <usart_serial_init+0x134>)
  401c36:	4293      	cmp	r3, r2
  401c38:	d108      	bne.n	401c4c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401c3a:	2007      	movs	r0, #7
  401c3c:	4b3c      	ldr	r3, [pc, #240]	; (401d30 <usart_serial_init+0x138>)
  401c3e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c44:	4619      	mov	r1, r3
  401c46:	6878      	ldr	r0, [r7, #4]
  401c48:	4b3a      	ldr	r3, [pc, #232]	; (401d34 <usart_serial_init+0x13c>)
  401c4a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c4c:	687b      	ldr	r3, [r7, #4]
  401c4e:	4a3a      	ldr	r2, [pc, #232]	; (401d38 <usart_serial_init+0x140>)
  401c50:	4293      	cmp	r3, r2
  401c52:	d108      	bne.n	401c66 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401c54:	2008      	movs	r0, #8
  401c56:	4b36      	ldr	r3, [pc, #216]	; (401d30 <usart_serial_init+0x138>)
  401c58:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c5e:	4619      	mov	r1, r3
  401c60:	6878      	ldr	r0, [r7, #4]
  401c62:	4b34      	ldr	r3, [pc, #208]	; (401d34 <usart_serial_init+0x13c>)
  401c64:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401c66:	687b      	ldr	r3, [r7, #4]
  401c68:	4a34      	ldr	r2, [pc, #208]	; (401d3c <usart_serial_init+0x144>)
  401c6a:	4293      	cmp	r3, r2
  401c6c:	d108      	bne.n	401c80 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401c6e:	202c      	movs	r0, #44	; 0x2c
  401c70:	4b2f      	ldr	r3, [pc, #188]	; (401d30 <usart_serial_init+0x138>)
  401c72:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c78:	4619      	mov	r1, r3
  401c7a:	6878      	ldr	r0, [r7, #4]
  401c7c:	4b2d      	ldr	r3, [pc, #180]	; (401d34 <usart_serial_init+0x13c>)
  401c7e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401c80:	687b      	ldr	r3, [r7, #4]
  401c82:	4a2f      	ldr	r2, [pc, #188]	; (401d40 <usart_serial_init+0x148>)
  401c84:	4293      	cmp	r3, r2
  401c86:	d108      	bne.n	401c9a <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401c88:	202d      	movs	r0, #45	; 0x2d
  401c8a:	4b29      	ldr	r3, [pc, #164]	; (401d30 <usart_serial_init+0x138>)
  401c8c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c92:	4619      	mov	r1, r3
  401c94:	6878      	ldr	r0, [r7, #4]
  401c96:	4b27      	ldr	r3, [pc, #156]	; (401d34 <usart_serial_init+0x13c>)
  401c98:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401c9a:	687b      	ldr	r3, [r7, #4]
  401c9c:	4a29      	ldr	r2, [pc, #164]	; (401d44 <usart_serial_init+0x14c>)
  401c9e:	4293      	cmp	r3, r2
  401ca0:	d111      	bne.n	401cc6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401ca2:	200d      	movs	r0, #13
  401ca4:	4b22      	ldr	r3, [pc, #136]	; (401d30 <usart_serial_init+0x138>)
  401ca6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401ca8:	4b1f      	ldr	r3, [pc, #124]	; (401d28 <usart_serial_init+0x130>)
  401caa:	4798      	blx	r3
  401cac:	4602      	mov	r2, r0
  401cae:	f107 030c 	add.w	r3, r7, #12
  401cb2:	4619      	mov	r1, r3
  401cb4:	6878      	ldr	r0, [r7, #4]
  401cb6:	4b24      	ldr	r3, [pc, #144]	; (401d48 <usart_serial_init+0x150>)
  401cb8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401cba:	6878      	ldr	r0, [r7, #4]
  401cbc:	4b23      	ldr	r3, [pc, #140]	; (401d4c <usart_serial_init+0x154>)
  401cbe:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401cc0:	6878      	ldr	r0, [r7, #4]
  401cc2:	4b23      	ldr	r3, [pc, #140]	; (401d50 <usart_serial_init+0x158>)
  401cc4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401cc6:	687b      	ldr	r3, [r7, #4]
  401cc8:	4a22      	ldr	r2, [pc, #136]	; (401d54 <usart_serial_init+0x15c>)
  401cca:	4293      	cmp	r3, r2
  401ccc:	d111      	bne.n	401cf2 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401cce:	200e      	movs	r0, #14
  401cd0:	4b17      	ldr	r3, [pc, #92]	; (401d30 <usart_serial_init+0x138>)
  401cd2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401cd4:	4b14      	ldr	r3, [pc, #80]	; (401d28 <usart_serial_init+0x130>)
  401cd6:	4798      	blx	r3
  401cd8:	4602      	mov	r2, r0
  401cda:	f107 030c 	add.w	r3, r7, #12
  401cde:	4619      	mov	r1, r3
  401ce0:	6878      	ldr	r0, [r7, #4]
  401ce2:	4b19      	ldr	r3, [pc, #100]	; (401d48 <usart_serial_init+0x150>)
  401ce4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401ce6:	6878      	ldr	r0, [r7, #4]
  401ce8:	4b18      	ldr	r3, [pc, #96]	; (401d4c <usart_serial_init+0x154>)
  401cea:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401cec:	6878      	ldr	r0, [r7, #4]
  401cee:	4b18      	ldr	r3, [pc, #96]	; (401d50 <usart_serial_init+0x158>)
  401cf0:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	4a18      	ldr	r2, [pc, #96]	; (401d58 <usart_serial_init+0x160>)
  401cf6:	4293      	cmp	r3, r2
  401cf8:	d111      	bne.n	401d1e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401cfa:	200f      	movs	r0, #15
  401cfc:	4b0c      	ldr	r3, [pc, #48]	; (401d30 <usart_serial_init+0x138>)
  401cfe:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d00:	4b09      	ldr	r3, [pc, #36]	; (401d28 <usart_serial_init+0x130>)
  401d02:	4798      	blx	r3
  401d04:	4602      	mov	r2, r0
  401d06:	f107 030c 	add.w	r3, r7, #12
  401d0a:	4619      	mov	r1, r3
  401d0c:	6878      	ldr	r0, [r7, #4]
  401d0e:	4b0e      	ldr	r3, [pc, #56]	; (401d48 <usart_serial_init+0x150>)
  401d10:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d12:	6878      	ldr	r0, [r7, #4]
  401d14:	4b0d      	ldr	r3, [pc, #52]	; (401d4c <usart_serial_init+0x154>)
  401d16:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d18:	6878      	ldr	r0, [r7, #4]
  401d1a:	4b0d      	ldr	r3, [pc, #52]	; (401d50 <usart_serial_init+0x158>)
  401d1c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401d1e:	bf00      	nop
  401d20:	3730      	adds	r7, #48	; 0x30
  401d22:	46bd      	mov	sp, r7
  401d24:	bd80      	pop	{r7, pc}
  401d26:	bf00      	nop
  401d28:	00401bc9 	.word	0x00401bc9
  401d2c:	400e0800 	.word	0x400e0800
  401d30:	00401bdd 	.word	0x00401bdd
  401d34:	004013db 	.word	0x004013db
  401d38:	400e0a00 	.word	0x400e0a00
  401d3c:	400e1a00 	.word	0x400e1a00
  401d40:	400e1c00 	.word	0x400e1c00
  401d44:	40024000 	.word	0x40024000
  401d48:	00401575 	.word	0x00401575
  401d4c:	004015f9 	.word	0x004015f9
  401d50:	0040162d 	.word	0x0040162d
  401d54:	40028000 	.word	0x40028000
  401d58:	4002c000 	.word	0x4002c000

00401d5c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401d5c:	b580      	push	{r7, lr}
  401d5e:	b082      	sub	sp, #8
  401d60:	af00      	add	r7, sp, #0
  401d62:	6078      	str	r0, [r7, #4]
  401d64:	460b      	mov	r3, r1
  401d66:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401d68:	687b      	ldr	r3, [r7, #4]
  401d6a:	4a36      	ldr	r2, [pc, #216]	; (401e44 <usart_serial_putchar+0xe8>)
  401d6c:	4293      	cmp	r3, r2
  401d6e:	d10a      	bne.n	401d86 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401d70:	bf00      	nop
  401d72:	78fb      	ldrb	r3, [r7, #3]
  401d74:	4619      	mov	r1, r3
  401d76:	6878      	ldr	r0, [r7, #4]
  401d78:	4b33      	ldr	r3, [pc, #204]	; (401e48 <usart_serial_putchar+0xec>)
  401d7a:	4798      	blx	r3
  401d7c:	4603      	mov	r3, r0
  401d7e:	2b00      	cmp	r3, #0
  401d80:	d1f7      	bne.n	401d72 <usart_serial_putchar+0x16>
		return 1;
  401d82:	2301      	movs	r3, #1
  401d84:	e05a      	b.n	401e3c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401d86:	687b      	ldr	r3, [r7, #4]
  401d88:	4a30      	ldr	r2, [pc, #192]	; (401e4c <usart_serial_putchar+0xf0>)
  401d8a:	4293      	cmp	r3, r2
  401d8c:	d10a      	bne.n	401da4 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401d8e:	bf00      	nop
  401d90:	78fb      	ldrb	r3, [r7, #3]
  401d92:	4619      	mov	r1, r3
  401d94:	6878      	ldr	r0, [r7, #4]
  401d96:	4b2c      	ldr	r3, [pc, #176]	; (401e48 <usart_serial_putchar+0xec>)
  401d98:	4798      	blx	r3
  401d9a:	4603      	mov	r3, r0
  401d9c:	2b00      	cmp	r3, #0
  401d9e:	d1f7      	bne.n	401d90 <usart_serial_putchar+0x34>
		return 1;
  401da0:	2301      	movs	r3, #1
  401da2:	e04b      	b.n	401e3c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401da4:	687b      	ldr	r3, [r7, #4]
  401da6:	4a2a      	ldr	r2, [pc, #168]	; (401e50 <usart_serial_putchar+0xf4>)
  401da8:	4293      	cmp	r3, r2
  401daa:	d10a      	bne.n	401dc2 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401dac:	bf00      	nop
  401dae:	78fb      	ldrb	r3, [r7, #3]
  401db0:	4619      	mov	r1, r3
  401db2:	6878      	ldr	r0, [r7, #4]
  401db4:	4b24      	ldr	r3, [pc, #144]	; (401e48 <usart_serial_putchar+0xec>)
  401db6:	4798      	blx	r3
  401db8:	4603      	mov	r3, r0
  401dba:	2b00      	cmp	r3, #0
  401dbc:	d1f7      	bne.n	401dae <usart_serial_putchar+0x52>
		return 1;
  401dbe:	2301      	movs	r3, #1
  401dc0:	e03c      	b.n	401e3c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401dc2:	687b      	ldr	r3, [r7, #4]
  401dc4:	4a23      	ldr	r2, [pc, #140]	; (401e54 <usart_serial_putchar+0xf8>)
  401dc6:	4293      	cmp	r3, r2
  401dc8:	d10a      	bne.n	401de0 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401dca:	bf00      	nop
  401dcc:	78fb      	ldrb	r3, [r7, #3]
  401dce:	4619      	mov	r1, r3
  401dd0:	6878      	ldr	r0, [r7, #4]
  401dd2:	4b1d      	ldr	r3, [pc, #116]	; (401e48 <usart_serial_putchar+0xec>)
  401dd4:	4798      	blx	r3
  401dd6:	4603      	mov	r3, r0
  401dd8:	2b00      	cmp	r3, #0
  401dda:	d1f7      	bne.n	401dcc <usart_serial_putchar+0x70>
		return 1;
  401ddc:	2301      	movs	r3, #1
  401dde:	e02d      	b.n	401e3c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401de0:	687b      	ldr	r3, [r7, #4]
  401de2:	4a1d      	ldr	r2, [pc, #116]	; (401e58 <usart_serial_putchar+0xfc>)
  401de4:	4293      	cmp	r3, r2
  401de6:	d10a      	bne.n	401dfe <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401de8:	bf00      	nop
  401dea:	78fb      	ldrb	r3, [r7, #3]
  401dec:	4619      	mov	r1, r3
  401dee:	6878      	ldr	r0, [r7, #4]
  401df0:	4b1a      	ldr	r3, [pc, #104]	; (401e5c <usart_serial_putchar+0x100>)
  401df2:	4798      	blx	r3
  401df4:	4603      	mov	r3, r0
  401df6:	2b00      	cmp	r3, #0
  401df8:	d1f7      	bne.n	401dea <usart_serial_putchar+0x8e>
		return 1;
  401dfa:	2301      	movs	r3, #1
  401dfc:	e01e      	b.n	401e3c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401dfe:	687b      	ldr	r3, [r7, #4]
  401e00:	4a17      	ldr	r2, [pc, #92]	; (401e60 <usart_serial_putchar+0x104>)
  401e02:	4293      	cmp	r3, r2
  401e04:	d10a      	bne.n	401e1c <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401e06:	bf00      	nop
  401e08:	78fb      	ldrb	r3, [r7, #3]
  401e0a:	4619      	mov	r1, r3
  401e0c:	6878      	ldr	r0, [r7, #4]
  401e0e:	4b13      	ldr	r3, [pc, #76]	; (401e5c <usart_serial_putchar+0x100>)
  401e10:	4798      	blx	r3
  401e12:	4603      	mov	r3, r0
  401e14:	2b00      	cmp	r3, #0
  401e16:	d1f7      	bne.n	401e08 <usart_serial_putchar+0xac>
		return 1;
  401e18:	2301      	movs	r3, #1
  401e1a:	e00f      	b.n	401e3c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	4a11      	ldr	r2, [pc, #68]	; (401e64 <usart_serial_putchar+0x108>)
  401e20:	4293      	cmp	r3, r2
  401e22:	d10a      	bne.n	401e3a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401e24:	bf00      	nop
  401e26:	78fb      	ldrb	r3, [r7, #3]
  401e28:	4619      	mov	r1, r3
  401e2a:	6878      	ldr	r0, [r7, #4]
  401e2c:	4b0b      	ldr	r3, [pc, #44]	; (401e5c <usart_serial_putchar+0x100>)
  401e2e:	4798      	blx	r3
  401e30:	4603      	mov	r3, r0
  401e32:	2b00      	cmp	r3, #0
  401e34:	d1f7      	bne.n	401e26 <usart_serial_putchar+0xca>
		return 1;
  401e36:	2301      	movs	r3, #1
  401e38:	e000      	b.n	401e3c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401e3a:	2300      	movs	r3, #0
}
  401e3c:	4618      	mov	r0, r3
  401e3e:	3708      	adds	r7, #8
  401e40:	46bd      	mov	sp, r7
  401e42:	bd80      	pop	{r7, pc}
  401e44:	400e0800 	.word	0x400e0800
  401e48:	00401433 	.word	0x00401433
  401e4c:	400e0a00 	.word	0x400e0a00
  401e50:	400e1a00 	.word	0x400e1a00
  401e54:	400e1c00 	.word	0x400e1c00
  401e58:	40024000 	.word	0x40024000
  401e5c:	00401699 	.word	0x00401699
  401e60:	40028000 	.word	0x40028000
  401e64:	4002c000 	.word	0x4002c000

00401e68 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401e68:	b580      	push	{r7, lr}
  401e6a:	b084      	sub	sp, #16
  401e6c:	af00      	add	r7, sp, #0
  401e6e:	6078      	str	r0, [r7, #4]
  401e70:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401e72:	2300      	movs	r3, #0
  401e74:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401e76:	687b      	ldr	r3, [r7, #4]
  401e78:	4a34      	ldr	r2, [pc, #208]	; (401f4c <usart_serial_getchar+0xe4>)
  401e7a:	4293      	cmp	r3, r2
  401e7c:	d107      	bne.n	401e8e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401e7e:	bf00      	nop
  401e80:	6839      	ldr	r1, [r7, #0]
  401e82:	6878      	ldr	r0, [r7, #4]
  401e84:	4b32      	ldr	r3, [pc, #200]	; (401f50 <usart_serial_getchar+0xe8>)
  401e86:	4798      	blx	r3
  401e88:	4603      	mov	r3, r0
  401e8a:	2b00      	cmp	r3, #0
  401e8c:	d1f8      	bne.n	401e80 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401e8e:	687b      	ldr	r3, [r7, #4]
  401e90:	4a30      	ldr	r2, [pc, #192]	; (401f54 <usart_serial_getchar+0xec>)
  401e92:	4293      	cmp	r3, r2
  401e94:	d107      	bne.n	401ea6 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401e96:	bf00      	nop
  401e98:	6839      	ldr	r1, [r7, #0]
  401e9a:	6878      	ldr	r0, [r7, #4]
  401e9c:	4b2c      	ldr	r3, [pc, #176]	; (401f50 <usart_serial_getchar+0xe8>)
  401e9e:	4798      	blx	r3
  401ea0:	4603      	mov	r3, r0
  401ea2:	2b00      	cmp	r3, #0
  401ea4:	d1f8      	bne.n	401e98 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401ea6:	687b      	ldr	r3, [r7, #4]
  401ea8:	4a2b      	ldr	r2, [pc, #172]	; (401f58 <usart_serial_getchar+0xf0>)
  401eaa:	4293      	cmp	r3, r2
  401eac:	d107      	bne.n	401ebe <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401eae:	bf00      	nop
  401eb0:	6839      	ldr	r1, [r7, #0]
  401eb2:	6878      	ldr	r0, [r7, #4]
  401eb4:	4b26      	ldr	r3, [pc, #152]	; (401f50 <usart_serial_getchar+0xe8>)
  401eb6:	4798      	blx	r3
  401eb8:	4603      	mov	r3, r0
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d1f8      	bne.n	401eb0 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401ebe:	687b      	ldr	r3, [r7, #4]
  401ec0:	4a26      	ldr	r2, [pc, #152]	; (401f5c <usart_serial_getchar+0xf4>)
  401ec2:	4293      	cmp	r3, r2
  401ec4:	d107      	bne.n	401ed6 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401ec6:	bf00      	nop
  401ec8:	6839      	ldr	r1, [r7, #0]
  401eca:	6878      	ldr	r0, [r7, #4]
  401ecc:	4b20      	ldr	r3, [pc, #128]	; (401f50 <usart_serial_getchar+0xe8>)
  401ece:	4798      	blx	r3
  401ed0:	4603      	mov	r3, r0
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d1f8      	bne.n	401ec8 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401ed6:	687b      	ldr	r3, [r7, #4]
  401ed8:	4a21      	ldr	r2, [pc, #132]	; (401f60 <usart_serial_getchar+0xf8>)
  401eda:	4293      	cmp	r3, r2
  401edc:	d10d      	bne.n	401efa <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401ede:	bf00      	nop
  401ee0:	f107 030c 	add.w	r3, r7, #12
  401ee4:	4619      	mov	r1, r3
  401ee6:	6878      	ldr	r0, [r7, #4]
  401ee8:	4b1e      	ldr	r3, [pc, #120]	; (401f64 <usart_serial_getchar+0xfc>)
  401eea:	4798      	blx	r3
  401eec:	4603      	mov	r3, r0
  401eee:	2b00      	cmp	r3, #0
  401ef0:	d1f6      	bne.n	401ee0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401ef2:	68fb      	ldr	r3, [r7, #12]
  401ef4:	b2da      	uxtb	r2, r3
  401ef6:	683b      	ldr	r3, [r7, #0]
  401ef8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401efa:	687b      	ldr	r3, [r7, #4]
  401efc:	4a1a      	ldr	r2, [pc, #104]	; (401f68 <usart_serial_getchar+0x100>)
  401efe:	4293      	cmp	r3, r2
  401f00:	d10d      	bne.n	401f1e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401f02:	bf00      	nop
  401f04:	f107 030c 	add.w	r3, r7, #12
  401f08:	4619      	mov	r1, r3
  401f0a:	6878      	ldr	r0, [r7, #4]
  401f0c:	4b15      	ldr	r3, [pc, #84]	; (401f64 <usart_serial_getchar+0xfc>)
  401f0e:	4798      	blx	r3
  401f10:	4603      	mov	r3, r0
  401f12:	2b00      	cmp	r3, #0
  401f14:	d1f6      	bne.n	401f04 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401f16:	68fb      	ldr	r3, [r7, #12]
  401f18:	b2da      	uxtb	r2, r3
  401f1a:	683b      	ldr	r3, [r7, #0]
  401f1c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401f1e:	687b      	ldr	r3, [r7, #4]
  401f20:	4a12      	ldr	r2, [pc, #72]	; (401f6c <usart_serial_getchar+0x104>)
  401f22:	4293      	cmp	r3, r2
  401f24:	d10d      	bne.n	401f42 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401f26:	bf00      	nop
  401f28:	f107 030c 	add.w	r3, r7, #12
  401f2c:	4619      	mov	r1, r3
  401f2e:	6878      	ldr	r0, [r7, #4]
  401f30:	4b0c      	ldr	r3, [pc, #48]	; (401f64 <usart_serial_getchar+0xfc>)
  401f32:	4798      	blx	r3
  401f34:	4603      	mov	r3, r0
  401f36:	2b00      	cmp	r3, #0
  401f38:	d1f6      	bne.n	401f28 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401f3a:	68fb      	ldr	r3, [r7, #12]
  401f3c:	b2da      	uxtb	r2, r3
  401f3e:	683b      	ldr	r3, [r7, #0]
  401f40:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401f42:	bf00      	nop
  401f44:	3710      	adds	r7, #16
  401f46:	46bd      	mov	sp, r7
  401f48:	bd80      	pop	{r7, pc}
  401f4a:	bf00      	nop
  401f4c:	400e0800 	.word	0x400e0800
  401f50:	00401463 	.word	0x00401463
  401f54:	400e0a00 	.word	0x400e0a00
  401f58:	400e1a00 	.word	0x400e1a00
  401f5c:	400e1c00 	.word	0x400e1c00
  401f60:	40024000 	.word	0x40024000
  401f64:	004016cb 	.word	0x004016cb
  401f68:	40028000 	.word	0x40028000
  401f6c:	4002c000 	.word	0x4002c000

00401f70 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401f70:	b580      	push	{r7, lr}
  401f72:	b082      	sub	sp, #8
  401f74:	af00      	add	r7, sp, #0
  401f76:	6078      	str	r0, [r7, #4]
  401f78:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401f7a:	4a0f      	ldr	r2, [pc, #60]	; (401fb8 <stdio_serial_init+0x48>)
  401f7c:	687b      	ldr	r3, [r7, #4]
  401f7e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401f80:	4b0e      	ldr	r3, [pc, #56]	; (401fbc <stdio_serial_init+0x4c>)
  401f82:	4a0f      	ldr	r2, [pc, #60]	; (401fc0 <stdio_serial_init+0x50>)
  401f84:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401f86:	4b0f      	ldr	r3, [pc, #60]	; (401fc4 <stdio_serial_init+0x54>)
  401f88:	4a0f      	ldr	r2, [pc, #60]	; (401fc8 <stdio_serial_init+0x58>)
  401f8a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401f8c:	6839      	ldr	r1, [r7, #0]
  401f8e:	6878      	ldr	r0, [r7, #4]
  401f90:	4b0e      	ldr	r3, [pc, #56]	; (401fcc <stdio_serial_init+0x5c>)
  401f92:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401f94:	4b0e      	ldr	r3, [pc, #56]	; (401fd0 <stdio_serial_init+0x60>)
  401f96:	681b      	ldr	r3, [r3, #0]
  401f98:	689b      	ldr	r3, [r3, #8]
  401f9a:	2100      	movs	r1, #0
  401f9c:	4618      	mov	r0, r3
  401f9e:	4b0d      	ldr	r3, [pc, #52]	; (401fd4 <stdio_serial_init+0x64>)
  401fa0:	4798      	blx	r3
	setbuf(stdin, NULL);
  401fa2:	4b0b      	ldr	r3, [pc, #44]	; (401fd0 <stdio_serial_init+0x60>)
  401fa4:	681b      	ldr	r3, [r3, #0]
  401fa6:	685b      	ldr	r3, [r3, #4]
  401fa8:	2100      	movs	r1, #0
  401faa:	4618      	mov	r0, r3
  401fac:	4b09      	ldr	r3, [pc, #36]	; (401fd4 <stdio_serial_init+0x64>)
  401fae:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401fb0:	bf00      	nop
  401fb2:	3708      	adds	r7, #8
  401fb4:	46bd      	mov	sp, r7
  401fb6:	bd80      	pop	{r7, pc}
  401fb8:	20400a88 	.word	0x20400a88
  401fbc:	20400a84 	.word	0x20400a84
  401fc0:	00401d5d 	.word	0x00401d5d
  401fc4:	20400a80 	.word	0x20400a80
  401fc8:	00401e69 	.word	0x00401e69
  401fcc:	00401bf9 	.word	0x00401bf9
  401fd0:	20400008 	.word	0x20400008
  401fd4:	0040242d 	.word	0x0040242d

00401fd8 <configure_console>:
 * 8 bits
 * 1 stop bit
 * sem paridade
 */
static void configure_console(void)
{
  401fd8:	b590      	push	{r4, r7, lr}
  401fda:	b085      	sub	sp, #20
  401fdc:	af00      	add	r7, sp, #0

  /* Configura USART1 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  401fde:	200b      	movs	r0, #11
  401fe0:	4b15      	ldr	r3, [pc, #84]	; (402038 <configure_console+0x60>)
  401fe2:	4798      	blx	r3
  sysclk_enable_peripheral_clock(ID_PIOA);
  401fe4:	200a      	movs	r0, #10
  401fe6:	4b14      	ldr	r3, [pc, #80]	; (402038 <configure_console+0x60>)
  401fe8:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  401fea:	2210      	movs	r2, #16
  401fec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ff0:	4812      	ldr	r0, [pc, #72]	; (40203c <configure_console+0x64>)
  401ff2:	4b13      	ldr	r3, [pc, #76]	; (402040 <configure_console+0x68>)
  401ff4:	4798      	blx	r3
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  401ff6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401ffa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ffe:	4811      	ldr	r0, [pc, #68]	; (402044 <configure_console+0x6c>)
  402000:	4b0f      	ldr	r3, [pc, #60]	; (402040 <configure_console+0x68>)
  402002:	4798      	blx	r3
 	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402004:	4a10      	ldr	r2, [pc, #64]	; (402048 <configure_console+0x70>)
  402006:	4b10      	ldr	r3, [pc, #64]	; (402048 <configure_console+0x70>)
  402008:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  40200c:	f043 0310 	orr.w	r3, r3, #16
  402010:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
 
	const usart_serial_options_t uart_serial_options = {
  402014:	4b0d      	ldr	r3, [pc, #52]	; (40204c <configure_console+0x74>)
  402016:	463c      	mov	r4, r7
  402018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40201a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40201e:	200e      	movs	r0, #14
  402020:	4b05      	ldr	r3, [pc, #20]	; (402038 <configure_console+0x60>)
  402022:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402024:	463b      	mov	r3, r7
  402026:	4619      	mov	r1, r3
  402028:	4809      	ldr	r0, [pc, #36]	; (402050 <configure_console+0x78>)
  40202a:	4b0a      	ldr	r3, [pc, #40]	; (402054 <configure_console+0x7c>)
  40202c:	4798      	blx	r3
}
  40202e:	bf00      	nop
  402030:	3714      	adds	r7, #20
  402032:	46bd      	mov	sp, r7
  402034:	bd90      	pop	{r4, r7, pc}
  402036:	bf00      	nop
  402038:	00401bdd 	.word	0x00401bdd
  40203c:	400e1000 	.word	0x400e1000
  402040:	00400b51 	.word	0x00400b51
  402044:	400e0e00 	.word	0x400e0e00
  402048:	40088000 	.word	0x40088000
  40204c:	00407aa0 	.word	0x00407aa0
  402050:	40028000 	.word	0x40028000
  402054:	00401f71 	.word	0x00401f71

00402058 <mcu6050_i2c_bus_init>:

/*	
 *  \Brief: The function is used as I2C bus init
 */
void mcu6050_i2c_bus_init(void)
{
  402058:	b580      	push	{r7, lr}
  40205a:	b084      	sub	sp, #16
  40205c:	af00      	add	r7, sp, #0
	twihs_options_t bno055_option;
	pmc_enable_periph_clk(TWIHS_MCU6050_ID);
  40205e:	2013      	movs	r0, #19
  402060:	4b08      	ldr	r3, [pc, #32]	; (402084 <mcu6050_i2c_bus_init+0x2c>)
  402062:	4798      	blx	r3

	/* Configure the options of TWI driver */
	bno055_option.master_clk = sysclk_get_cpu_hz();
  402064:	4b08      	ldr	r3, [pc, #32]	; (402088 <mcu6050_i2c_bus_init+0x30>)
  402066:	4798      	blx	r3
  402068:	4603      	mov	r3, r0
  40206a:	607b      	str	r3, [r7, #4]
	bno055_option.speed      = 40000;
  40206c:	f649 4340 	movw	r3, #40000	; 0x9c40
  402070:	60bb      	str	r3, [r7, #8]
	twihs_master_init(TWIHS_MCU6050, &bno055_option);
  402072:	1d3b      	adds	r3, r7, #4
  402074:	4619      	mov	r1, r3
  402076:	4805      	ldr	r0, [pc, #20]	; (40208c <mcu6050_i2c_bus_init+0x34>)
  402078:	4b05      	ldr	r3, [pc, #20]	; (402090 <mcu6050_i2c_bus_init+0x38>)
  40207a:	4798      	blx	r3
}
  40207c:	bf00      	nop
  40207e:	3710      	adds	r7, #16
  402080:	46bd      	mov	sp, r7
  402082:	bd80      	pop	{r7, pc}
  402084:	00401081 	.word	0x00401081
  402088:	00401bb5 	.word	0x00401bb5
  40208c:	40018000 	.word	0x40018000
  402090:	0040112d 	.word	0x0040112d

00402094 <i2c_bus_read>:
 *	\param reg_addr : Address of the first register, will data is going to be read
 *	\param reg_data : This data read from the sensor, which is hold in an array
 *	\param cnt : The no of byte of data to be read
 */
int8_t i2c_bus_read(uint16_t dev_addr, uint16_t reg_addr, uint16_t *reg_data, uint16_t cnt)
{
  402094:	b580      	push	{r7, lr}
  402096:	b08a      	sub	sp, #40	; 0x28
  402098:	af00      	add	r7, sp, #0
  40209a:	60ba      	str	r2, [r7, #8]
  40209c:	461a      	mov	r2, r3
  40209e:	4603      	mov	r3, r0
  4020a0:	81fb      	strh	r3, [r7, #14]
  4020a2:	460b      	mov	r3, r1
  4020a4:	81bb      	strh	r3, [r7, #12]
  4020a6:	4613      	mov	r3, r2
  4020a8:	80fb      	strh	r3, [r7, #6]
	int32_t ierror = 0x00;
  4020aa:	2300      	movs	r3, #0
  4020ac:	627b      	str	r3, [r7, #36]	; 0x24
	
	twihs_packet_t p_packet;
	p_packet.chip         = dev_addr;
  4020ae:	89fb      	ldrh	r3, [r7, #14]
  4020b0:	b2db      	uxtb	r3, r3
  4020b2:	f887 3020 	strb.w	r3, [r7, #32]
	p_packet.addr[0]      = reg_addr;
  4020b6:	89bb      	ldrh	r3, [r7, #12]
  4020b8:	b2db      	uxtb	r3, r3
  4020ba:	743b      	strb	r3, [r7, #16]
	p_packet.addr_length  = 1;
  4020bc:	2301      	movs	r3, #1
  4020be:	617b      	str	r3, [r7, #20]
	p_packet.buffer       = reg_data;
  4020c0:	68bb      	ldr	r3, [r7, #8]
  4020c2:	61bb      	str	r3, [r7, #24]
	p_packet.length       = cnt;
  4020c4:	88fb      	ldrh	r3, [r7, #6]
  4020c6:	61fb      	str	r3, [r7, #28]
	
  // TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para
  //       conseguirmos pegar o valor correto.
	ierror = twihs_master_read(TWIHS_MCU6050, &p_packet);
  4020c8:	f107 0310 	add.w	r3, r7, #16
  4020cc:	4619      	mov	r1, r3
  4020ce:	4805      	ldr	r0, [pc, #20]	; (4020e4 <i2c_bus_read+0x50>)
  4020d0:	4b05      	ldr	r3, [pc, #20]	; (4020e8 <i2c_bus_read+0x54>)
  4020d2:	4798      	blx	r3
  4020d4:	4603      	mov	r3, r0
  4020d6:	627b      	str	r3, [r7, #36]	; 0x24
	//  ierror = twihs_master_read(TWIHS_MCU6050, &p_packet);

	return (int8_t)ierror;
  4020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020da:	b25b      	sxtb	r3, r3
}
  4020dc:	4618      	mov	r0, r3
  4020de:	3728      	adds	r7, #40	; 0x28
  4020e0:	46bd      	mov	sp, r7
  4020e2:	bd80      	pop	{r7, pc}
  4020e4:	40018000 	.word	0x40018000
  4020e8:	004012d5 	.word	0x004012d5

004020ec <Adafruit_FT6206_touched>:
	i2c_bus_write(FT62XX_ADDR,reg_addr, xwrite, 1);
	i2c_bus_read(FT62XX_ADDR, reg_addr, xread, 1);
	return xread;
}

uint8_t Adafruit_FT6206_touched(void) {
  4020ec:	b590      	push	{r4, r7, lr}
  4020ee:	b083      	sub	sp, #12
  4020f0:	af00      	add	r7, sp, #0
	uint8_t touchIsvalid;
	
	i2c_bus_read(FT62XX_ADDR, FT62XX_REG_NUMTOUCHES,&touchIsvalid, 1);
  4020f2:	1dfa      	adds	r2, r7, #7
  4020f4:	2301      	movs	r3, #1
  4020f6:	2102      	movs	r1, #2
  4020f8:	2038      	movs	r0, #56	; 0x38
  4020fa:	4c09      	ldr	r4, [pc, #36]	; (402120 <Adafruit_FT6206_touched+0x34>)
  4020fc:	47a0      	blx	r4
	i2c_bus_read(FT62XX_ADDR, FT62XX_REG_NUMTOUCHES,&touchIsvalid, 1);
  4020fe:	1dfa      	adds	r2, r7, #7
  402100:	2301      	movs	r3, #1
  402102:	2102      	movs	r1, #2
  402104:	2038      	movs	r0, #56	; 0x38
  402106:	4c06      	ldr	r4, [pc, #24]	; (402120 <Adafruit_FT6206_touched+0x34>)
  402108:	47a0      	blx	r4
	
	if (touchIsvalid > 2) {
  40210a:	79fb      	ldrb	r3, [r7, #7]
  40210c:	2b02      	cmp	r3, #2
  40210e:	d901      	bls.n	402114 <Adafruit_FT6206_touched+0x28>
		touchIsvalid = 0;
  402110:	2300      	movs	r3, #0
  402112:	71fb      	strb	r3, [r7, #7]
	}
	return touchIsvalid;
  402114:	79fb      	ldrb	r3, [r7, #7]
}
  402116:	4618      	mov	r0, r3
  402118:	370c      	adds	r7, #12
  40211a:	46bd      	mov	sp, r7
  40211c:	bd90      	pop	{r4, r7, pc}
  40211e:	bf00      	nop
  402120:	00402095 	.word	0x00402095

00402124 <main>:


/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  402124:	b590      	push	{r4, r7, lr}
  402126:	b085      	sub	sp, #20
  402128:	af00      	add	r7, sp, #0
  
	/* buffer para recebimento de dados */
	uint16_t bufferRX[2]={0,0};
  40212a:	2300      	movs	r3, #0
  40212c:	813b      	strh	r3, [r7, #8]
  40212e:	2300      	movs	r3, #0
  402130:	817b      	strh	r3, [r7, #10]
	uint16_t bufferTX[2]={0,0};
  402132:	2300      	movs	r3, #0
  402134:	80bb      	strh	r3, [r7, #4]
  402136:	2300      	movs	r3, #0
  402138:	80fb      	strh	r3, [r7, #6]
	uint8_t posYL;
	uint16_t posY;
	
	
	/* Initialize the SAM system */
	sysclk_init();
  40213a:	4b3b      	ldr	r3, [pc, #236]	; (402228 <main+0x104>)
  40213c:	4798      	blx	r3
	board_init();
  40213e:	4b3b      	ldr	r3, [pc, #236]	; (40222c <main+0x108>)
  402140:	4798      	blx	r3
   
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402142:	4b3b      	ldr	r3, [pc, #236]	; (402230 <main+0x10c>)
  402144:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402148:	605a      	str	r2, [r3, #4]
  
	/* Inicializa com serial com PC*/
	configure_console();
  40214a:	4b3a      	ldr	r3, [pc, #232]	; (402234 <main+0x110>)
  40214c:	4798      	blx	r3
	/************************************************************************/
	/* MPU                                                                  */
	/************************************************************************/
  
	/* Inicializa i2c */
	printf("Inicializando bus i2c \n");
  40214e:	483a      	ldr	r0, [pc, #232]	; (402238 <main+0x114>)
  402150:	4b3a      	ldr	r3, [pc, #232]	; (40223c <main+0x118>)
  402152:	4798      	blx	r3
	mcu6050_i2c_bus_init();
  402154:	4b3a      	ldr	r3, [pc, #232]	; (402240 <main+0x11c>)
  402156:	4798      	blx	r3
	//i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)

	//i2c_bus_write(FT62XX_ADDR, FT62XX_REG_VENDID, 1, 1);
	//i2c_bus_read(uint16_t dev_addr, uint16_t reg_addr, uint16_t *reg_data, uint16_t cnt)
	
	i2c_bus_read(FT62XX_ADDR, FT62XX_REG_VENDID, &rtn8, 1);
  402158:	1cfa      	adds	r2, r7, #3
  40215a:	2301      	movs	r3, #1
  40215c:	21a8      	movs	r1, #168	; 0xa8
  40215e:	2038      	movs	r0, #56	; 0x38
  402160:	4c38      	ldr	r4, [pc, #224]	; (402244 <main+0x120>)
  402162:	47a0      	blx	r4
	i2c_bus_read(FT62XX_ADDR, FT62XX_REG_VENDID, &rtn8, 1);
  402164:	1cfa      	adds	r2, r7, #3
  402166:	2301      	movs	r3, #1
  402168:	21a8      	movs	r1, #168	; 0xa8
  40216a:	2038      	movs	r0, #56	; 0x38
  40216c:	4c35      	ldr	r4, [pc, #212]	; (402244 <main+0x120>)
  40216e:	47a0      	blx	r4
	
	//i2c_bus_read(FT62XX_ADDR, 0x01, rtn, 1);
	//twihs_master_write(TWIHS_MCU6050, FT62XX_REG_VENDID);
	//twihs_master_read(TWIHS_MCU6050, rtn);
	//rtn = Adafruit_FT6206readRegister8(FT62XX_VENDID);
	printf("Vend ID: 0x%x\n", rtn8);
  402170:	78fb      	ldrb	r3, [r7, #3]
  402172:	4619      	mov	r1, r3
  402174:	4834      	ldr	r0, [pc, #208]	; (402248 <main+0x124>)
  402176:	4b35      	ldr	r3, [pc, #212]	; (40224c <main+0x128>)
  402178:	4798      	blx	r3
	//delay_ms(2000);
	
	
	//i2c_bus_write(FT62XX_ADDR, FT62XX_REG_CHIPID, 0, 1);
	i2c_bus_read(FT62XX_ADDR, FT62XX_NUM_XH,&rtn8, 1);
  40217a:	1cfa      	adds	r2, r7, #3
  40217c:	2301      	movs	r3, #1
  40217e:	2103      	movs	r1, #3
  402180:	2038      	movs	r0, #56	; 0x38
  402182:	4c30      	ldr	r4, [pc, #192]	; (402244 <main+0x120>)
  402184:	47a0      	blx	r4
	i2c_bus_read(FT62XX_ADDR, FT62XX_NUM_XH,&rtn8, 1);
  402186:	1cfa      	adds	r2, r7, #3
  402188:	2301      	movs	r3, #1
  40218a:	2103      	movs	r1, #3
  40218c:	2038      	movs	r0, #56	; 0x38
  40218e:	4c2d      	ldr	r4, [pc, #180]	; (402244 <main+0x120>)
  402190:	47a0      	blx	r4
	printf("Firm Ver: 0x%x\n", rtn8);
  402192:	78fb      	ldrb	r3, [r7, #3]
  402194:	4619      	mov	r1, r3
  402196:	482e      	ldr	r0, [pc, #184]	; (402250 <main+0x12c>)
  402198:	4b2c      	ldr	r3, [pc, #176]	; (40224c <main+0x128>)
  40219a:	4798      	blx	r3
	//delay_ms(2000);
	
	i2c_bus_read(FT62XX_ADDR, FT62XX_REG_FIRMVERS,&rtn8, 1);
  40219c:	1cfa      	adds	r2, r7, #3
  40219e:	2301      	movs	r3, #1
  4021a0:	21a6      	movs	r1, #166	; 0xa6
  4021a2:	2038      	movs	r0, #56	; 0x38
  4021a4:	4c27      	ldr	r4, [pc, #156]	; (402244 <main+0x120>)
  4021a6:	47a0      	blx	r4
	i2c_bus_read(FT62XX_ADDR, FT62XX_REG_FIRMVERS,&rtn8, 1);
  4021a8:	1cfa      	adds	r2, r7, #3
  4021aa:	2301      	movs	r3, #1
  4021ac:	21a6      	movs	r1, #166	; 0xa6
  4021ae:	2038      	movs	r0, #56	; 0x38
  4021b0:	4c24      	ldr	r4, [pc, #144]	; (402244 <main+0x120>)
  4021b2:	47a0      	blx	r4
	printf("Vend ID: 0x%x\n", rtn8);
  4021b4:	78fb      	ldrb	r3, [r7, #3]
  4021b6:	4619      	mov	r1, r3
  4021b8:	4823      	ldr	r0, [pc, #140]	; (402248 <main+0x124>)
  4021ba:	4b24      	ldr	r3, [pc, #144]	; (40224c <main+0x128>)
  4021bc:	4798      	blx	r3
	//delay_ms(2000);
	
	
	for (int16_t i = 0; i < 0x10; i++) {
  4021be:	2300      	movs	r3, #0
  4021c0:	81fb      	strh	r3, [r7, #14]
  4021c2:	e022      	b.n	40220a <main+0xe6>
		printf("I2C $");
  4021c4:	4823      	ldr	r0, [pc, #140]	; (402254 <main+0x130>)
  4021c6:	4b21      	ldr	r3, [pc, #132]	; (40224c <main+0x128>)
  4021c8:	4798      	blx	r3
		printf("%x",i);
  4021ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  4021ce:	4619      	mov	r1, r3
  4021d0:	4821      	ldr	r0, [pc, #132]	; (402258 <main+0x134>)
  4021d2:	4b1e      	ldr	r3, [pc, #120]	; (40224c <main+0x128>)
  4021d4:	4798      	blx	r3
		printf(" = 0x");
  4021d6:	4821      	ldr	r0, [pc, #132]	; (40225c <main+0x138>)
  4021d8:	4b1c      	ldr	r3, [pc, #112]	; (40224c <main+0x128>)
  4021da:	4798      	blx	r3
		i2c_bus_read(FT62XX_ADDR, i,&rtn8, 1);
  4021dc:	89f9      	ldrh	r1, [r7, #14]
  4021de:	1cfa      	adds	r2, r7, #3
  4021e0:	2301      	movs	r3, #1
  4021e2:	2038      	movs	r0, #56	; 0x38
  4021e4:	4c17      	ldr	r4, [pc, #92]	; (402244 <main+0x120>)
  4021e6:	47a0      	blx	r4
		i2c_bus_read(FT62XX_ADDR, i,&rtn8, 1);
  4021e8:	89f9      	ldrh	r1, [r7, #14]
  4021ea:	1cfa      	adds	r2, r7, #3
  4021ec:	2301      	movs	r3, #1
  4021ee:	2038      	movs	r0, #56	; 0x38
  4021f0:	4c14      	ldr	r4, [pc, #80]	; (402244 <main+0x120>)
  4021f2:	47a0      	blx	r4
		printf("x%x\n", rtn8);
  4021f4:	78fb      	ldrb	r3, [r7, #3]
  4021f6:	4619      	mov	r1, r3
  4021f8:	4819      	ldr	r0, [pc, #100]	; (402260 <main+0x13c>)
  4021fa:	4b14      	ldr	r3, [pc, #80]	; (40224c <main+0x128>)
  4021fc:	4798      	blx	r3
	for (int16_t i = 0; i < 0x10; i++) {
  4021fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  402202:	b29b      	uxth	r3, r3
  402204:	3301      	adds	r3, #1
  402206:	b29b      	uxth	r3, r3
  402208:	81fb      	strh	r3, [r7, #14]
  40220a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  40220e:	2b0f      	cmp	r3, #15
  402210:	ddd8      	ble.n	4021c4 <main+0xa0>
	//RTT_init(1000, 0, 0);         
	//int tick_old = 0;
	
	while (1) {
		
		rtn8 = Adafruit_FT6206_touched();
  402212:	4b14      	ldr	r3, [pc, #80]	; (402264 <main+0x140>)
  402214:	4798      	blx	r3
  402216:	4603      	mov	r3, r0
  402218:	70fb      	strb	r3, [r7, #3]
		printf("Touch = %d\n", rtn8);
  40221a:	78fb      	ldrb	r3, [r7, #3]
  40221c:	4619      	mov	r1, r3
  40221e:	4812      	ldr	r0, [pc, #72]	; (402268 <main+0x144>)
  402220:	4b0a      	ldr	r3, [pc, #40]	; (40224c <main+0x128>)
  402222:	4798      	blx	r3
		rtn8 = Adafruit_FT6206_touched();
  402224:	e7f5      	b.n	402212 <main+0xee>
  402226:	bf00      	nop
  402228:	004004ad 	.word	0x004004ad
  40222c:	00400a7d 	.word	0x00400a7d
  402230:	400e1850 	.word	0x400e1850
  402234:	00401fd9 	.word	0x00401fd9
  402238:	00407ab0 	.word	0x00407ab0
  40223c:	0040241d 	.word	0x0040241d
  402240:	00402059 	.word	0x00402059
  402244:	00402095 	.word	0x00402095
  402248:	00407ac8 	.word	0x00407ac8
  40224c:	00402359 	.word	0x00402359
  402250:	00407ad8 	.word	0x00407ad8
  402254:	00407ae8 	.word	0x00407ae8
  402258:	00407af0 	.word	0x00407af0
  40225c:	00407af4 	.word	0x00407af4
  402260:	00407afc 	.word	0x00407afc
  402264:	004020ed 	.word	0x004020ed
  402268:	00407b04 	.word	0x00407b04

0040226c <__libc_init_array>:
  40226c:	b570      	push	{r4, r5, r6, lr}
  40226e:	4e0f      	ldr	r6, [pc, #60]	; (4022ac <__libc_init_array+0x40>)
  402270:	4d0f      	ldr	r5, [pc, #60]	; (4022b0 <__libc_init_array+0x44>)
  402272:	1b76      	subs	r6, r6, r5
  402274:	10b6      	asrs	r6, r6, #2
  402276:	bf18      	it	ne
  402278:	2400      	movne	r4, #0
  40227a:	d005      	beq.n	402288 <__libc_init_array+0x1c>
  40227c:	3401      	adds	r4, #1
  40227e:	f855 3b04 	ldr.w	r3, [r5], #4
  402282:	4798      	blx	r3
  402284:	42a6      	cmp	r6, r4
  402286:	d1f9      	bne.n	40227c <__libc_init_array+0x10>
  402288:	4e0a      	ldr	r6, [pc, #40]	; (4022b4 <__libc_init_array+0x48>)
  40228a:	4d0b      	ldr	r5, [pc, #44]	; (4022b8 <__libc_init_array+0x4c>)
  40228c:	1b76      	subs	r6, r6, r5
  40228e:	f005 fd87 	bl	407da0 <_init>
  402292:	10b6      	asrs	r6, r6, #2
  402294:	bf18      	it	ne
  402296:	2400      	movne	r4, #0
  402298:	d006      	beq.n	4022a8 <__libc_init_array+0x3c>
  40229a:	3401      	adds	r4, #1
  40229c:	f855 3b04 	ldr.w	r3, [r5], #4
  4022a0:	4798      	blx	r3
  4022a2:	42a6      	cmp	r6, r4
  4022a4:	d1f9      	bne.n	40229a <__libc_init_array+0x2e>
  4022a6:	bd70      	pop	{r4, r5, r6, pc}
  4022a8:	bd70      	pop	{r4, r5, r6, pc}
  4022aa:	bf00      	nop
  4022ac:	00407dac 	.word	0x00407dac
  4022b0:	00407dac 	.word	0x00407dac
  4022b4:	00407db4 	.word	0x00407db4
  4022b8:	00407dac 	.word	0x00407dac

004022bc <memset>:
  4022bc:	b470      	push	{r4, r5, r6}
  4022be:	0786      	lsls	r6, r0, #30
  4022c0:	d046      	beq.n	402350 <memset+0x94>
  4022c2:	1e54      	subs	r4, r2, #1
  4022c4:	2a00      	cmp	r2, #0
  4022c6:	d041      	beq.n	40234c <memset+0x90>
  4022c8:	b2ca      	uxtb	r2, r1
  4022ca:	4603      	mov	r3, r0
  4022cc:	e002      	b.n	4022d4 <memset+0x18>
  4022ce:	f114 34ff 	adds.w	r4, r4, #4294967295
  4022d2:	d33b      	bcc.n	40234c <memset+0x90>
  4022d4:	f803 2b01 	strb.w	r2, [r3], #1
  4022d8:	079d      	lsls	r5, r3, #30
  4022da:	d1f8      	bne.n	4022ce <memset+0x12>
  4022dc:	2c03      	cmp	r4, #3
  4022de:	d92e      	bls.n	40233e <memset+0x82>
  4022e0:	b2cd      	uxtb	r5, r1
  4022e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4022e6:	2c0f      	cmp	r4, #15
  4022e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4022ec:	d919      	bls.n	402322 <memset+0x66>
  4022ee:	f103 0210 	add.w	r2, r3, #16
  4022f2:	4626      	mov	r6, r4
  4022f4:	3e10      	subs	r6, #16
  4022f6:	2e0f      	cmp	r6, #15
  4022f8:	f842 5c10 	str.w	r5, [r2, #-16]
  4022fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  402300:	f842 5c08 	str.w	r5, [r2, #-8]
  402304:	f842 5c04 	str.w	r5, [r2, #-4]
  402308:	f102 0210 	add.w	r2, r2, #16
  40230c:	d8f2      	bhi.n	4022f4 <memset+0x38>
  40230e:	f1a4 0210 	sub.w	r2, r4, #16
  402312:	f022 020f 	bic.w	r2, r2, #15
  402316:	f004 040f 	and.w	r4, r4, #15
  40231a:	3210      	adds	r2, #16
  40231c:	2c03      	cmp	r4, #3
  40231e:	4413      	add	r3, r2
  402320:	d90d      	bls.n	40233e <memset+0x82>
  402322:	461e      	mov	r6, r3
  402324:	4622      	mov	r2, r4
  402326:	3a04      	subs	r2, #4
  402328:	2a03      	cmp	r2, #3
  40232a:	f846 5b04 	str.w	r5, [r6], #4
  40232e:	d8fa      	bhi.n	402326 <memset+0x6a>
  402330:	1f22      	subs	r2, r4, #4
  402332:	f022 0203 	bic.w	r2, r2, #3
  402336:	3204      	adds	r2, #4
  402338:	4413      	add	r3, r2
  40233a:	f004 0403 	and.w	r4, r4, #3
  40233e:	b12c      	cbz	r4, 40234c <memset+0x90>
  402340:	b2c9      	uxtb	r1, r1
  402342:	441c      	add	r4, r3
  402344:	f803 1b01 	strb.w	r1, [r3], #1
  402348:	429c      	cmp	r4, r3
  40234a:	d1fb      	bne.n	402344 <memset+0x88>
  40234c:	bc70      	pop	{r4, r5, r6}
  40234e:	4770      	bx	lr
  402350:	4614      	mov	r4, r2
  402352:	4603      	mov	r3, r0
  402354:	e7c2      	b.n	4022dc <memset+0x20>
  402356:	bf00      	nop

00402358 <printf>:
  402358:	b40f      	push	{r0, r1, r2, r3}
  40235a:	b500      	push	{lr}
  40235c:	4907      	ldr	r1, [pc, #28]	; (40237c <printf+0x24>)
  40235e:	b083      	sub	sp, #12
  402360:	ab04      	add	r3, sp, #16
  402362:	6808      	ldr	r0, [r1, #0]
  402364:	f853 2b04 	ldr.w	r2, [r3], #4
  402368:	6881      	ldr	r1, [r0, #8]
  40236a:	9301      	str	r3, [sp, #4]
  40236c:	f000 f9b6 	bl	4026dc <_vfprintf_r>
  402370:	b003      	add	sp, #12
  402372:	f85d eb04 	ldr.w	lr, [sp], #4
  402376:	b004      	add	sp, #16
  402378:	4770      	bx	lr
  40237a:	bf00      	nop
  40237c:	20400008 	.word	0x20400008

00402380 <_puts_r>:
  402380:	b5f0      	push	{r4, r5, r6, r7, lr}
  402382:	4605      	mov	r5, r0
  402384:	b089      	sub	sp, #36	; 0x24
  402386:	4608      	mov	r0, r1
  402388:	460c      	mov	r4, r1
  40238a:	f000 f939 	bl	402600 <strlen>
  40238e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402390:	4f21      	ldr	r7, [pc, #132]	; (402418 <_puts_r+0x98>)
  402392:	9404      	str	r4, [sp, #16]
  402394:	2601      	movs	r6, #1
  402396:	1c44      	adds	r4, r0, #1
  402398:	a904      	add	r1, sp, #16
  40239a:	2202      	movs	r2, #2
  40239c:	9403      	str	r4, [sp, #12]
  40239e:	9005      	str	r0, [sp, #20]
  4023a0:	68ac      	ldr	r4, [r5, #8]
  4023a2:	9706      	str	r7, [sp, #24]
  4023a4:	9607      	str	r6, [sp, #28]
  4023a6:	9101      	str	r1, [sp, #4]
  4023a8:	9202      	str	r2, [sp, #8]
  4023aa:	b353      	cbz	r3, 402402 <_puts_r+0x82>
  4023ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4023ae:	f013 0f01 	tst.w	r3, #1
  4023b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023b6:	b29a      	uxth	r2, r3
  4023b8:	d101      	bne.n	4023be <_puts_r+0x3e>
  4023ba:	0590      	lsls	r0, r2, #22
  4023bc:	d525      	bpl.n	40240a <_puts_r+0x8a>
  4023be:	0491      	lsls	r1, r2, #18
  4023c0:	d406      	bmi.n	4023d0 <_puts_r+0x50>
  4023c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4023c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4023c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4023cc:	81a3      	strh	r3, [r4, #12]
  4023ce:	6662      	str	r2, [r4, #100]	; 0x64
  4023d0:	4628      	mov	r0, r5
  4023d2:	aa01      	add	r2, sp, #4
  4023d4:	4621      	mov	r1, r4
  4023d6:	f002 ff21 	bl	40521c <__sfvwrite_r>
  4023da:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4023dc:	2800      	cmp	r0, #0
  4023de:	bf0c      	ite	eq
  4023e0:	250a      	moveq	r5, #10
  4023e2:	f04f 35ff 	movne.w	r5, #4294967295
  4023e6:	07da      	lsls	r2, r3, #31
  4023e8:	d402      	bmi.n	4023f0 <_puts_r+0x70>
  4023ea:	89a3      	ldrh	r3, [r4, #12]
  4023ec:	059b      	lsls	r3, r3, #22
  4023ee:	d502      	bpl.n	4023f6 <_puts_r+0x76>
  4023f0:	4628      	mov	r0, r5
  4023f2:	b009      	add	sp, #36	; 0x24
  4023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4023f8:	f003 f8c6 	bl	405588 <__retarget_lock_release_recursive>
  4023fc:	4628      	mov	r0, r5
  4023fe:	b009      	add	sp, #36	; 0x24
  402400:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402402:	4628      	mov	r0, r5
  402404:	f002 fd82 	bl	404f0c <__sinit>
  402408:	e7d0      	b.n	4023ac <_puts_r+0x2c>
  40240a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40240c:	f003 f8ba 	bl	405584 <__retarget_lock_acquire_recursive>
  402410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402414:	b29a      	uxth	r2, r3
  402416:	e7d2      	b.n	4023be <_puts_r+0x3e>
  402418:	00407b14 	.word	0x00407b14

0040241c <puts>:
  40241c:	4b02      	ldr	r3, [pc, #8]	; (402428 <puts+0xc>)
  40241e:	4601      	mov	r1, r0
  402420:	6818      	ldr	r0, [r3, #0]
  402422:	f7ff bfad 	b.w	402380 <_puts_r>
  402426:	bf00      	nop
  402428:	20400008 	.word	0x20400008

0040242c <setbuf>:
  40242c:	2900      	cmp	r1, #0
  40242e:	bf0c      	ite	eq
  402430:	2202      	moveq	r2, #2
  402432:	2200      	movne	r2, #0
  402434:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402438:	f000 b800 	b.w	40243c <setvbuf>

0040243c <setvbuf>:
  40243c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402440:	4c61      	ldr	r4, [pc, #388]	; (4025c8 <setvbuf+0x18c>)
  402442:	6825      	ldr	r5, [r4, #0]
  402444:	b083      	sub	sp, #12
  402446:	4604      	mov	r4, r0
  402448:	460f      	mov	r7, r1
  40244a:	4690      	mov	r8, r2
  40244c:	461e      	mov	r6, r3
  40244e:	b115      	cbz	r5, 402456 <setvbuf+0x1a>
  402450:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402452:	2b00      	cmp	r3, #0
  402454:	d064      	beq.n	402520 <setvbuf+0xe4>
  402456:	f1b8 0f02 	cmp.w	r8, #2
  40245a:	d006      	beq.n	40246a <setvbuf+0x2e>
  40245c:	f1b8 0f01 	cmp.w	r8, #1
  402460:	f200 809f 	bhi.w	4025a2 <setvbuf+0x166>
  402464:	2e00      	cmp	r6, #0
  402466:	f2c0 809c 	blt.w	4025a2 <setvbuf+0x166>
  40246a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40246c:	07d8      	lsls	r0, r3, #31
  40246e:	d534      	bpl.n	4024da <setvbuf+0x9e>
  402470:	4621      	mov	r1, r4
  402472:	4628      	mov	r0, r5
  402474:	f002 fcf2 	bl	404e5c <_fflush_r>
  402478:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40247a:	b141      	cbz	r1, 40248e <setvbuf+0x52>
  40247c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402480:	4299      	cmp	r1, r3
  402482:	d002      	beq.n	40248a <setvbuf+0x4e>
  402484:	4628      	mov	r0, r5
  402486:	f002 fde3 	bl	405050 <_free_r>
  40248a:	2300      	movs	r3, #0
  40248c:	6323      	str	r3, [r4, #48]	; 0x30
  40248e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402492:	2200      	movs	r2, #0
  402494:	61a2      	str	r2, [r4, #24]
  402496:	6062      	str	r2, [r4, #4]
  402498:	061a      	lsls	r2, r3, #24
  40249a:	d43a      	bmi.n	402512 <setvbuf+0xd6>
  40249c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4024a0:	f023 0303 	bic.w	r3, r3, #3
  4024a4:	f1b8 0f02 	cmp.w	r8, #2
  4024a8:	81a3      	strh	r3, [r4, #12]
  4024aa:	d01d      	beq.n	4024e8 <setvbuf+0xac>
  4024ac:	ab01      	add	r3, sp, #4
  4024ae:	466a      	mov	r2, sp
  4024b0:	4621      	mov	r1, r4
  4024b2:	4628      	mov	r0, r5
  4024b4:	f003 f86a 	bl	40558c <__swhatbuf_r>
  4024b8:	89a3      	ldrh	r3, [r4, #12]
  4024ba:	4318      	orrs	r0, r3
  4024bc:	81a0      	strh	r0, [r4, #12]
  4024be:	2e00      	cmp	r6, #0
  4024c0:	d132      	bne.n	402528 <setvbuf+0xec>
  4024c2:	9e00      	ldr	r6, [sp, #0]
  4024c4:	4630      	mov	r0, r6
  4024c6:	f003 f8d9 	bl	40567c <malloc>
  4024ca:	4607      	mov	r7, r0
  4024cc:	2800      	cmp	r0, #0
  4024ce:	d06b      	beq.n	4025a8 <setvbuf+0x16c>
  4024d0:	89a3      	ldrh	r3, [r4, #12]
  4024d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4024d6:	81a3      	strh	r3, [r4, #12]
  4024d8:	e028      	b.n	40252c <setvbuf+0xf0>
  4024da:	89a3      	ldrh	r3, [r4, #12]
  4024dc:	0599      	lsls	r1, r3, #22
  4024de:	d4c7      	bmi.n	402470 <setvbuf+0x34>
  4024e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4024e2:	f003 f84f 	bl	405584 <__retarget_lock_acquire_recursive>
  4024e6:	e7c3      	b.n	402470 <setvbuf+0x34>
  4024e8:	2500      	movs	r5, #0
  4024ea:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4024ec:	2600      	movs	r6, #0
  4024ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4024f2:	f043 0302 	orr.w	r3, r3, #2
  4024f6:	2001      	movs	r0, #1
  4024f8:	60a6      	str	r6, [r4, #8]
  4024fa:	07ce      	lsls	r6, r1, #31
  4024fc:	81a3      	strh	r3, [r4, #12]
  4024fe:	6022      	str	r2, [r4, #0]
  402500:	6122      	str	r2, [r4, #16]
  402502:	6160      	str	r0, [r4, #20]
  402504:	d401      	bmi.n	40250a <setvbuf+0xce>
  402506:	0598      	lsls	r0, r3, #22
  402508:	d53e      	bpl.n	402588 <setvbuf+0x14c>
  40250a:	4628      	mov	r0, r5
  40250c:	b003      	add	sp, #12
  40250e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402512:	6921      	ldr	r1, [r4, #16]
  402514:	4628      	mov	r0, r5
  402516:	f002 fd9b 	bl	405050 <_free_r>
  40251a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40251e:	e7bd      	b.n	40249c <setvbuf+0x60>
  402520:	4628      	mov	r0, r5
  402522:	f002 fcf3 	bl	404f0c <__sinit>
  402526:	e796      	b.n	402456 <setvbuf+0x1a>
  402528:	2f00      	cmp	r7, #0
  40252a:	d0cb      	beq.n	4024c4 <setvbuf+0x88>
  40252c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40252e:	2b00      	cmp	r3, #0
  402530:	d033      	beq.n	40259a <setvbuf+0x15e>
  402532:	9b00      	ldr	r3, [sp, #0]
  402534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402538:	6027      	str	r7, [r4, #0]
  40253a:	429e      	cmp	r6, r3
  40253c:	bf1c      	itt	ne
  40253e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402542:	81a2      	strhne	r2, [r4, #12]
  402544:	f1b8 0f01 	cmp.w	r8, #1
  402548:	bf04      	itt	eq
  40254a:	f042 0201 	orreq.w	r2, r2, #1
  40254e:	81a2      	strheq	r2, [r4, #12]
  402550:	b292      	uxth	r2, r2
  402552:	f012 0308 	ands.w	r3, r2, #8
  402556:	6127      	str	r7, [r4, #16]
  402558:	6166      	str	r6, [r4, #20]
  40255a:	d00e      	beq.n	40257a <setvbuf+0x13e>
  40255c:	07d1      	lsls	r1, r2, #31
  40255e:	d51a      	bpl.n	402596 <setvbuf+0x15a>
  402560:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402562:	4276      	negs	r6, r6
  402564:	2300      	movs	r3, #0
  402566:	f015 0501 	ands.w	r5, r5, #1
  40256a:	61a6      	str	r6, [r4, #24]
  40256c:	60a3      	str	r3, [r4, #8]
  40256e:	d009      	beq.n	402584 <setvbuf+0x148>
  402570:	2500      	movs	r5, #0
  402572:	4628      	mov	r0, r5
  402574:	b003      	add	sp, #12
  402576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40257a:	60a3      	str	r3, [r4, #8]
  40257c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40257e:	f015 0501 	ands.w	r5, r5, #1
  402582:	d1f5      	bne.n	402570 <setvbuf+0x134>
  402584:	0593      	lsls	r3, r2, #22
  402586:	d4c0      	bmi.n	40250a <setvbuf+0xce>
  402588:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40258a:	f002 fffd 	bl	405588 <__retarget_lock_release_recursive>
  40258e:	4628      	mov	r0, r5
  402590:	b003      	add	sp, #12
  402592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402596:	60a6      	str	r6, [r4, #8]
  402598:	e7f0      	b.n	40257c <setvbuf+0x140>
  40259a:	4628      	mov	r0, r5
  40259c:	f002 fcb6 	bl	404f0c <__sinit>
  4025a0:	e7c7      	b.n	402532 <setvbuf+0xf6>
  4025a2:	f04f 35ff 	mov.w	r5, #4294967295
  4025a6:	e7b0      	b.n	40250a <setvbuf+0xce>
  4025a8:	f8dd 9000 	ldr.w	r9, [sp]
  4025ac:	45b1      	cmp	r9, r6
  4025ae:	d004      	beq.n	4025ba <setvbuf+0x17e>
  4025b0:	4648      	mov	r0, r9
  4025b2:	f003 f863 	bl	40567c <malloc>
  4025b6:	4607      	mov	r7, r0
  4025b8:	b920      	cbnz	r0, 4025c4 <setvbuf+0x188>
  4025ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4025be:	f04f 35ff 	mov.w	r5, #4294967295
  4025c2:	e792      	b.n	4024ea <setvbuf+0xae>
  4025c4:	464e      	mov	r6, r9
  4025c6:	e783      	b.n	4024d0 <setvbuf+0x94>
  4025c8:	20400008 	.word	0x20400008
	...

00402600 <strlen>:
  402600:	f890 f000 	pld	[r0]
  402604:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402608:	f020 0107 	bic.w	r1, r0, #7
  40260c:	f06f 0c00 	mvn.w	ip, #0
  402610:	f010 0407 	ands.w	r4, r0, #7
  402614:	f891 f020 	pld	[r1, #32]
  402618:	f040 8049 	bne.w	4026ae <strlen+0xae>
  40261c:	f04f 0400 	mov.w	r4, #0
  402620:	f06f 0007 	mvn.w	r0, #7
  402624:	e9d1 2300 	ldrd	r2, r3, [r1]
  402628:	f891 f040 	pld	[r1, #64]	; 0x40
  40262c:	f100 0008 	add.w	r0, r0, #8
  402630:	fa82 f24c 	uadd8	r2, r2, ip
  402634:	faa4 f28c 	sel	r2, r4, ip
  402638:	fa83 f34c 	uadd8	r3, r3, ip
  40263c:	faa2 f38c 	sel	r3, r2, ip
  402640:	bb4b      	cbnz	r3, 402696 <strlen+0x96>
  402642:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402646:	fa82 f24c 	uadd8	r2, r2, ip
  40264a:	f100 0008 	add.w	r0, r0, #8
  40264e:	faa4 f28c 	sel	r2, r4, ip
  402652:	fa83 f34c 	uadd8	r3, r3, ip
  402656:	faa2 f38c 	sel	r3, r2, ip
  40265a:	b9e3      	cbnz	r3, 402696 <strlen+0x96>
  40265c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402660:	fa82 f24c 	uadd8	r2, r2, ip
  402664:	f100 0008 	add.w	r0, r0, #8
  402668:	faa4 f28c 	sel	r2, r4, ip
  40266c:	fa83 f34c 	uadd8	r3, r3, ip
  402670:	faa2 f38c 	sel	r3, r2, ip
  402674:	b97b      	cbnz	r3, 402696 <strlen+0x96>
  402676:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40267a:	f101 0120 	add.w	r1, r1, #32
  40267e:	fa82 f24c 	uadd8	r2, r2, ip
  402682:	f100 0008 	add.w	r0, r0, #8
  402686:	faa4 f28c 	sel	r2, r4, ip
  40268a:	fa83 f34c 	uadd8	r3, r3, ip
  40268e:	faa2 f38c 	sel	r3, r2, ip
  402692:	2b00      	cmp	r3, #0
  402694:	d0c6      	beq.n	402624 <strlen+0x24>
  402696:	2a00      	cmp	r2, #0
  402698:	bf04      	itt	eq
  40269a:	3004      	addeq	r0, #4
  40269c:	461a      	moveq	r2, r3
  40269e:	ba12      	rev	r2, r2
  4026a0:	fab2 f282 	clz	r2, r2
  4026a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4026a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4026ac:	4770      	bx	lr
  4026ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4026b2:	f004 0503 	and.w	r5, r4, #3
  4026b6:	f1c4 0000 	rsb	r0, r4, #0
  4026ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4026be:	f014 0f04 	tst.w	r4, #4
  4026c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4026c6:	fa0c f505 	lsl.w	r5, ip, r5
  4026ca:	ea62 0205 	orn	r2, r2, r5
  4026ce:	bf1c      	itt	ne
  4026d0:	ea63 0305 	ornne	r3, r3, r5
  4026d4:	4662      	movne	r2, ip
  4026d6:	f04f 0400 	mov.w	r4, #0
  4026da:	e7a9      	b.n	402630 <strlen+0x30>

004026dc <_vfprintf_r>:
  4026dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026e0:	b0c1      	sub	sp, #260	; 0x104
  4026e2:	461d      	mov	r5, r3
  4026e4:	468a      	mov	sl, r1
  4026e6:	4691      	mov	r9, r2
  4026e8:	4604      	mov	r4, r0
  4026ea:	9008      	str	r0, [sp, #32]
  4026ec:	f002 ff38 	bl	405560 <_localeconv_r>
  4026f0:	6803      	ldr	r3, [r0, #0]
  4026f2:	9315      	str	r3, [sp, #84]	; 0x54
  4026f4:	4618      	mov	r0, r3
  4026f6:	f7ff ff83 	bl	402600 <strlen>
  4026fa:	950e      	str	r5, [sp, #56]	; 0x38
  4026fc:	9014      	str	r0, [sp, #80]	; 0x50
  4026fe:	b11c      	cbz	r4, 402708 <_vfprintf_r+0x2c>
  402700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402702:	2b00      	cmp	r3, #0
  402704:	f000 825f 	beq.w	402bc6 <_vfprintf_r+0x4ea>
  402708:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40270c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  402710:	f013 0f01 	tst.w	r3, #1
  402714:	b293      	uxth	r3, r2
  402716:	d102      	bne.n	40271e <_vfprintf_r+0x42>
  402718:	0599      	lsls	r1, r3, #22
  40271a:	f140 8275 	bpl.w	402c08 <_vfprintf_r+0x52c>
  40271e:	049f      	lsls	r7, r3, #18
  402720:	d40a      	bmi.n	402738 <_vfprintf_r+0x5c>
  402722:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  402726:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40272a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40272e:	f8aa 300c 	strh.w	r3, [sl, #12]
  402732:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  402736:	b29b      	uxth	r3, r3
  402738:	071e      	lsls	r6, r3, #28
  40273a:	f140 8223 	bpl.w	402b84 <_vfprintf_r+0x4a8>
  40273e:	f8da 2010 	ldr.w	r2, [sl, #16]
  402742:	2a00      	cmp	r2, #0
  402744:	f000 821e 	beq.w	402b84 <_vfprintf_r+0x4a8>
  402748:	f003 021a 	and.w	r2, r3, #26
  40274c:	2a0a      	cmp	r2, #10
  40274e:	f000 823e 	beq.w	402bce <_vfprintf_r+0x4f2>
  402752:	2300      	movs	r3, #0
  402754:	4618      	mov	r0, r3
  402756:	9311      	str	r3, [sp, #68]	; 0x44
  402758:	9313      	str	r3, [sp, #76]	; 0x4c
  40275a:	9312      	str	r3, [sp, #72]	; 0x48
  40275c:	9325      	str	r3, [sp, #148]	; 0x94
  40275e:	9324      	str	r3, [sp, #144]	; 0x90
  402760:	9318      	str	r3, [sp, #96]	; 0x60
  402762:	9319      	str	r3, [sp, #100]	; 0x64
  402764:	930b      	str	r3, [sp, #44]	; 0x2c
  402766:	ab30      	add	r3, sp, #192	; 0xc0
  402768:	9323      	str	r3, [sp, #140]	; 0x8c
  40276a:	4698      	mov	r8, r3
  40276c:	9016      	str	r0, [sp, #88]	; 0x58
  40276e:	9017      	str	r0, [sp, #92]	; 0x5c
  402770:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  402774:	f899 3000 	ldrb.w	r3, [r9]
  402778:	464c      	mov	r4, r9
  40277a:	b1eb      	cbz	r3, 4027b8 <_vfprintf_r+0xdc>
  40277c:	2b25      	cmp	r3, #37	; 0x25
  40277e:	d102      	bne.n	402786 <_vfprintf_r+0xaa>
  402780:	e01a      	b.n	4027b8 <_vfprintf_r+0xdc>
  402782:	2b25      	cmp	r3, #37	; 0x25
  402784:	d003      	beq.n	40278e <_vfprintf_r+0xb2>
  402786:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40278a:	2b00      	cmp	r3, #0
  40278c:	d1f9      	bne.n	402782 <_vfprintf_r+0xa6>
  40278e:	eba4 0509 	sub.w	r5, r4, r9
  402792:	b18d      	cbz	r5, 4027b8 <_vfprintf_r+0xdc>
  402794:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402796:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402798:	f8c8 9000 	str.w	r9, [r8]
  40279c:	3301      	adds	r3, #1
  40279e:	442a      	add	r2, r5
  4027a0:	2b07      	cmp	r3, #7
  4027a2:	f8c8 5004 	str.w	r5, [r8, #4]
  4027a6:	9225      	str	r2, [sp, #148]	; 0x94
  4027a8:	9324      	str	r3, [sp, #144]	; 0x90
  4027aa:	f300 8201 	bgt.w	402bb0 <_vfprintf_r+0x4d4>
  4027ae:	f108 0808 	add.w	r8, r8, #8
  4027b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4027b4:	442b      	add	r3, r5
  4027b6:	930b      	str	r3, [sp, #44]	; 0x2c
  4027b8:	7823      	ldrb	r3, [r4, #0]
  4027ba:	2b00      	cmp	r3, #0
  4027bc:	f000 83f0 	beq.w	402fa0 <_vfprintf_r+0x8c4>
  4027c0:	2300      	movs	r3, #0
  4027c2:	461a      	mov	r2, r3
  4027c4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4027c8:	4619      	mov	r1, r3
  4027ca:	930c      	str	r3, [sp, #48]	; 0x30
  4027cc:	469b      	mov	fp, r3
  4027ce:	7866      	ldrb	r6, [r4, #1]
  4027d0:	f04f 33ff 	mov.w	r3, #4294967295
  4027d4:	f104 0901 	add.w	r9, r4, #1
  4027d8:	9309      	str	r3, [sp, #36]	; 0x24
  4027da:	f109 0901 	add.w	r9, r9, #1
  4027de:	f1a6 0320 	sub.w	r3, r6, #32
  4027e2:	2b58      	cmp	r3, #88	; 0x58
  4027e4:	f200 83bf 	bhi.w	402f66 <_vfprintf_r+0x88a>
  4027e8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4027ec:	03bd02e0 	.word	0x03bd02e0
  4027f0:	034f03bd 	.word	0x034f03bd
  4027f4:	03bd03bd 	.word	0x03bd03bd
  4027f8:	03bd03bd 	.word	0x03bd03bd
  4027fc:	03bd03bd 	.word	0x03bd03bd
  402800:	03080354 	.word	0x03080354
  402804:	021a03bd 	.word	0x021a03bd
  402808:	03bd02e8 	.word	0x03bd02e8
  40280c:	033a0303 	.word	0x033a0303
  402810:	033a033a 	.word	0x033a033a
  402814:	033a033a 	.word	0x033a033a
  402818:	033a033a 	.word	0x033a033a
  40281c:	033a033a 	.word	0x033a033a
  402820:	03bd03bd 	.word	0x03bd03bd
  402824:	03bd03bd 	.word	0x03bd03bd
  402828:	03bd03bd 	.word	0x03bd03bd
  40282c:	03bd03bd 	.word	0x03bd03bd
  402830:	03bd03bd 	.word	0x03bd03bd
  402834:	03620349 	.word	0x03620349
  402838:	036203bd 	.word	0x036203bd
  40283c:	03bd03bd 	.word	0x03bd03bd
  402840:	03bd03bd 	.word	0x03bd03bd
  402844:	03bd03a2 	.word	0x03bd03a2
  402848:	006f03bd 	.word	0x006f03bd
  40284c:	03bd03bd 	.word	0x03bd03bd
  402850:	03bd03bd 	.word	0x03bd03bd
  402854:	005903bd 	.word	0x005903bd
  402858:	03bd03bd 	.word	0x03bd03bd
  40285c:	03bd031e 	.word	0x03bd031e
  402860:	03bd03bd 	.word	0x03bd03bd
  402864:	03bd03bd 	.word	0x03bd03bd
  402868:	03bd03bd 	.word	0x03bd03bd
  40286c:	03bd03bd 	.word	0x03bd03bd
  402870:	032403bd 	.word	0x032403bd
  402874:	03620273 	.word	0x03620273
  402878:	03620362 	.word	0x03620362
  40287c:	027302b7 	.word	0x027302b7
  402880:	03bd03bd 	.word	0x03bd03bd
  402884:	03bd02bc 	.word	0x03bd02bc
  402888:	007102c9 	.word	0x007102c9
  40288c:	0247030d 	.word	0x0247030d
  402890:	025203bd 	.word	0x025203bd
  402894:	005b03bd 	.word	0x005b03bd
  402898:	03bd03bd 	.word	0x03bd03bd
  40289c:	021f      	.short	0x021f
  40289e:	f04b 0b10 	orr.w	fp, fp, #16
  4028a2:	f01b 0f20 	tst.w	fp, #32
  4028a6:	f040 8353 	bne.w	402f50 <_vfprintf_r+0x874>
  4028aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4028ac:	f01b 0f10 	tst.w	fp, #16
  4028b0:	4613      	mov	r3, r2
  4028b2:	f040 85b4 	bne.w	40341e <_vfprintf_r+0xd42>
  4028b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4028ba:	f000 85b0 	beq.w	40341e <_vfprintf_r+0xd42>
  4028be:	8814      	ldrh	r4, [r2, #0]
  4028c0:	3204      	adds	r2, #4
  4028c2:	2500      	movs	r5, #0
  4028c4:	2301      	movs	r3, #1
  4028c6:	920e      	str	r2, [sp, #56]	; 0x38
  4028c8:	e014      	b.n	4028f4 <_vfprintf_r+0x218>
  4028ca:	f04b 0b10 	orr.w	fp, fp, #16
  4028ce:	f01b 0320 	ands.w	r3, fp, #32
  4028d2:	f040 8332 	bne.w	402f3a <_vfprintf_r+0x85e>
  4028d6:	f01b 0210 	ands.w	r2, fp, #16
  4028da:	f040 8589 	bne.w	4033f0 <_vfprintf_r+0xd14>
  4028de:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4028e2:	f000 8585 	beq.w	4033f0 <_vfprintf_r+0xd14>
  4028e6:	990e      	ldr	r1, [sp, #56]	; 0x38
  4028e8:	4613      	mov	r3, r2
  4028ea:	460a      	mov	r2, r1
  4028ec:	3204      	adds	r2, #4
  4028ee:	880c      	ldrh	r4, [r1, #0]
  4028f0:	920e      	str	r2, [sp, #56]	; 0x38
  4028f2:	2500      	movs	r5, #0
  4028f4:	f04f 0a00 	mov.w	sl, #0
  4028f8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4028fc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4028fe:	1c4a      	adds	r2, r1, #1
  402900:	f000 820b 	beq.w	402d1a <_vfprintf_r+0x63e>
  402904:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402908:	9206      	str	r2, [sp, #24]
  40290a:	ea54 0205 	orrs.w	r2, r4, r5
  40290e:	f040 820a 	bne.w	402d26 <_vfprintf_r+0x64a>
  402912:	2900      	cmp	r1, #0
  402914:	f040 846f 	bne.w	4031f6 <_vfprintf_r+0xb1a>
  402918:	2b00      	cmp	r3, #0
  40291a:	f040 852d 	bne.w	403378 <_vfprintf_r+0xc9c>
  40291e:	f01b 0301 	ands.w	r3, fp, #1
  402922:	930d      	str	r3, [sp, #52]	; 0x34
  402924:	f000 8668 	beq.w	4035f8 <_vfprintf_r+0xf1c>
  402928:	af40      	add	r7, sp, #256	; 0x100
  40292a:	2330      	movs	r3, #48	; 0x30
  40292c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  402930:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402934:	4293      	cmp	r3, r2
  402936:	bfb8      	it	lt
  402938:	4613      	movlt	r3, r2
  40293a:	9307      	str	r3, [sp, #28]
  40293c:	2300      	movs	r3, #0
  40293e:	9310      	str	r3, [sp, #64]	; 0x40
  402940:	f1ba 0f00 	cmp.w	sl, #0
  402944:	d002      	beq.n	40294c <_vfprintf_r+0x270>
  402946:	9b07      	ldr	r3, [sp, #28]
  402948:	3301      	adds	r3, #1
  40294a:	9307      	str	r3, [sp, #28]
  40294c:	9b06      	ldr	r3, [sp, #24]
  40294e:	f013 0302 	ands.w	r3, r3, #2
  402952:	930f      	str	r3, [sp, #60]	; 0x3c
  402954:	d002      	beq.n	40295c <_vfprintf_r+0x280>
  402956:	9b07      	ldr	r3, [sp, #28]
  402958:	3302      	adds	r3, #2
  40295a:	9307      	str	r3, [sp, #28]
  40295c:	9b06      	ldr	r3, [sp, #24]
  40295e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402962:	f040 831b 	bne.w	402f9c <_vfprintf_r+0x8c0>
  402966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402968:	9a07      	ldr	r2, [sp, #28]
  40296a:	eba3 0b02 	sub.w	fp, r3, r2
  40296e:	f1bb 0f00 	cmp.w	fp, #0
  402972:	f340 8313 	ble.w	402f9c <_vfprintf_r+0x8c0>
  402976:	f1bb 0f10 	cmp.w	fp, #16
  40297a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40297c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40297e:	dd28      	ble.n	4029d2 <_vfprintf_r+0x2f6>
  402980:	4643      	mov	r3, r8
  402982:	2410      	movs	r4, #16
  402984:	46a8      	mov	r8, r5
  402986:	f8dd a020 	ldr.w	sl, [sp, #32]
  40298a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40298c:	e006      	b.n	40299c <_vfprintf_r+0x2c0>
  40298e:	f1ab 0b10 	sub.w	fp, fp, #16
  402992:	f1bb 0f10 	cmp.w	fp, #16
  402996:	f103 0308 	add.w	r3, r3, #8
  40299a:	dd18      	ble.n	4029ce <_vfprintf_r+0x2f2>
  40299c:	3201      	adds	r2, #1
  40299e:	48b9      	ldr	r0, [pc, #740]	; (402c84 <_vfprintf_r+0x5a8>)
  4029a0:	9224      	str	r2, [sp, #144]	; 0x90
  4029a2:	3110      	adds	r1, #16
  4029a4:	2a07      	cmp	r2, #7
  4029a6:	9125      	str	r1, [sp, #148]	; 0x94
  4029a8:	e883 0011 	stmia.w	r3, {r0, r4}
  4029ac:	ddef      	ble.n	40298e <_vfprintf_r+0x2b2>
  4029ae:	aa23      	add	r2, sp, #140	; 0x8c
  4029b0:	4629      	mov	r1, r5
  4029b2:	4650      	mov	r0, sl
  4029b4:	f003 ffac 	bl	406910 <__sprint_r>
  4029b8:	2800      	cmp	r0, #0
  4029ba:	f040 836a 	bne.w	403092 <_vfprintf_r+0x9b6>
  4029be:	f1ab 0b10 	sub.w	fp, fp, #16
  4029c2:	f1bb 0f10 	cmp.w	fp, #16
  4029c6:	9925      	ldr	r1, [sp, #148]	; 0x94
  4029c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4029ca:	ab30      	add	r3, sp, #192	; 0xc0
  4029cc:	dce6      	bgt.n	40299c <_vfprintf_r+0x2c0>
  4029ce:	4645      	mov	r5, r8
  4029d0:	4698      	mov	r8, r3
  4029d2:	3201      	adds	r2, #1
  4029d4:	4bab      	ldr	r3, [pc, #684]	; (402c84 <_vfprintf_r+0x5a8>)
  4029d6:	9224      	str	r2, [sp, #144]	; 0x90
  4029d8:	eb0b 0401 	add.w	r4, fp, r1
  4029dc:	2a07      	cmp	r2, #7
  4029de:	9425      	str	r4, [sp, #148]	; 0x94
  4029e0:	e888 0808 	stmia.w	r8, {r3, fp}
  4029e4:	f300 84cd 	bgt.w	403382 <_vfprintf_r+0xca6>
  4029e8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4029ec:	f108 0808 	add.w	r8, r8, #8
  4029f0:	f1ba 0f00 	cmp.w	sl, #0
  4029f4:	d00e      	beq.n	402a14 <_vfprintf_r+0x338>
  4029f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4029f8:	3301      	adds	r3, #1
  4029fa:	3401      	adds	r4, #1
  4029fc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  402a00:	2201      	movs	r2, #1
  402a02:	2b07      	cmp	r3, #7
  402a04:	9425      	str	r4, [sp, #148]	; 0x94
  402a06:	9324      	str	r3, [sp, #144]	; 0x90
  402a08:	e888 0006 	stmia.w	r8, {r1, r2}
  402a0c:	f300 840a 	bgt.w	403224 <_vfprintf_r+0xb48>
  402a10:	f108 0808 	add.w	r8, r8, #8
  402a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402a16:	b16b      	cbz	r3, 402a34 <_vfprintf_r+0x358>
  402a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402a1a:	3301      	adds	r3, #1
  402a1c:	3402      	adds	r4, #2
  402a1e:	a91c      	add	r1, sp, #112	; 0x70
  402a20:	2202      	movs	r2, #2
  402a22:	2b07      	cmp	r3, #7
  402a24:	9425      	str	r4, [sp, #148]	; 0x94
  402a26:	9324      	str	r3, [sp, #144]	; 0x90
  402a28:	e888 0006 	stmia.w	r8, {r1, r2}
  402a2c:	f300 8406 	bgt.w	40323c <_vfprintf_r+0xb60>
  402a30:	f108 0808 	add.w	r8, r8, #8
  402a34:	2d80      	cmp	r5, #128	; 0x80
  402a36:	f000 832e 	beq.w	403096 <_vfprintf_r+0x9ba>
  402a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a3e:	eba3 0a02 	sub.w	sl, r3, r2
  402a42:	f1ba 0f00 	cmp.w	sl, #0
  402a46:	dd3b      	ble.n	402ac0 <_vfprintf_r+0x3e4>
  402a48:	f1ba 0f10 	cmp.w	sl, #16
  402a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402a4e:	4d8e      	ldr	r5, [pc, #568]	; (402c88 <_vfprintf_r+0x5ac>)
  402a50:	dd2b      	ble.n	402aaa <_vfprintf_r+0x3ce>
  402a52:	4642      	mov	r2, r8
  402a54:	4621      	mov	r1, r4
  402a56:	46b0      	mov	r8, r6
  402a58:	f04f 0b10 	mov.w	fp, #16
  402a5c:	462e      	mov	r6, r5
  402a5e:	9c08      	ldr	r4, [sp, #32]
  402a60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402a62:	e006      	b.n	402a72 <_vfprintf_r+0x396>
  402a64:	f1aa 0a10 	sub.w	sl, sl, #16
  402a68:	f1ba 0f10 	cmp.w	sl, #16
  402a6c:	f102 0208 	add.w	r2, r2, #8
  402a70:	dd17      	ble.n	402aa2 <_vfprintf_r+0x3c6>
  402a72:	3301      	adds	r3, #1
  402a74:	3110      	adds	r1, #16
  402a76:	2b07      	cmp	r3, #7
  402a78:	9125      	str	r1, [sp, #148]	; 0x94
  402a7a:	9324      	str	r3, [sp, #144]	; 0x90
  402a7c:	e882 0840 	stmia.w	r2, {r6, fp}
  402a80:	ddf0      	ble.n	402a64 <_vfprintf_r+0x388>
  402a82:	aa23      	add	r2, sp, #140	; 0x8c
  402a84:	4629      	mov	r1, r5
  402a86:	4620      	mov	r0, r4
  402a88:	f003 ff42 	bl	406910 <__sprint_r>
  402a8c:	2800      	cmp	r0, #0
  402a8e:	f040 8300 	bne.w	403092 <_vfprintf_r+0x9b6>
  402a92:	f1aa 0a10 	sub.w	sl, sl, #16
  402a96:	f1ba 0f10 	cmp.w	sl, #16
  402a9a:	9925      	ldr	r1, [sp, #148]	; 0x94
  402a9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402a9e:	aa30      	add	r2, sp, #192	; 0xc0
  402aa0:	dce7      	bgt.n	402a72 <_vfprintf_r+0x396>
  402aa2:	4635      	mov	r5, r6
  402aa4:	460c      	mov	r4, r1
  402aa6:	4646      	mov	r6, r8
  402aa8:	4690      	mov	r8, r2
  402aaa:	3301      	adds	r3, #1
  402aac:	4454      	add	r4, sl
  402aae:	2b07      	cmp	r3, #7
  402ab0:	9425      	str	r4, [sp, #148]	; 0x94
  402ab2:	9324      	str	r3, [sp, #144]	; 0x90
  402ab4:	e888 0420 	stmia.w	r8, {r5, sl}
  402ab8:	f300 83a9 	bgt.w	40320e <_vfprintf_r+0xb32>
  402abc:	f108 0808 	add.w	r8, r8, #8
  402ac0:	9b06      	ldr	r3, [sp, #24]
  402ac2:	05db      	lsls	r3, r3, #23
  402ac4:	f100 8285 	bmi.w	402fd2 <_vfprintf_r+0x8f6>
  402ac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402aca:	990d      	ldr	r1, [sp, #52]	; 0x34
  402acc:	f8c8 7000 	str.w	r7, [r8]
  402ad0:	3301      	adds	r3, #1
  402ad2:	440c      	add	r4, r1
  402ad4:	2b07      	cmp	r3, #7
  402ad6:	9425      	str	r4, [sp, #148]	; 0x94
  402ad8:	f8c8 1004 	str.w	r1, [r8, #4]
  402adc:	9324      	str	r3, [sp, #144]	; 0x90
  402ade:	f300 8375 	bgt.w	4031cc <_vfprintf_r+0xaf0>
  402ae2:	f108 0808 	add.w	r8, r8, #8
  402ae6:	9b06      	ldr	r3, [sp, #24]
  402ae8:	0759      	lsls	r1, r3, #29
  402aea:	d53b      	bpl.n	402b64 <_vfprintf_r+0x488>
  402aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402aee:	9a07      	ldr	r2, [sp, #28]
  402af0:	1a9d      	subs	r5, r3, r2
  402af2:	2d00      	cmp	r5, #0
  402af4:	dd36      	ble.n	402b64 <_vfprintf_r+0x488>
  402af6:	2d10      	cmp	r5, #16
  402af8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402afa:	dd21      	ble.n	402b40 <_vfprintf_r+0x464>
  402afc:	2610      	movs	r6, #16
  402afe:	9f08      	ldr	r7, [sp, #32]
  402b00:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  402b04:	e004      	b.n	402b10 <_vfprintf_r+0x434>
  402b06:	3d10      	subs	r5, #16
  402b08:	2d10      	cmp	r5, #16
  402b0a:	f108 0808 	add.w	r8, r8, #8
  402b0e:	dd17      	ble.n	402b40 <_vfprintf_r+0x464>
  402b10:	3301      	adds	r3, #1
  402b12:	4a5c      	ldr	r2, [pc, #368]	; (402c84 <_vfprintf_r+0x5a8>)
  402b14:	9324      	str	r3, [sp, #144]	; 0x90
  402b16:	3410      	adds	r4, #16
  402b18:	2b07      	cmp	r3, #7
  402b1a:	9425      	str	r4, [sp, #148]	; 0x94
  402b1c:	e888 0044 	stmia.w	r8, {r2, r6}
  402b20:	ddf1      	ble.n	402b06 <_vfprintf_r+0x42a>
  402b22:	aa23      	add	r2, sp, #140	; 0x8c
  402b24:	4651      	mov	r1, sl
  402b26:	4638      	mov	r0, r7
  402b28:	f003 fef2 	bl	406910 <__sprint_r>
  402b2c:	2800      	cmp	r0, #0
  402b2e:	f040 823f 	bne.w	402fb0 <_vfprintf_r+0x8d4>
  402b32:	3d10      	subs	r5, #16
  402b34:	2d10      	cmp	r5, #16
  402b36:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402b3a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  402b3e:	dce7      	bgt.n	402b10 <_vfprintf_r+0x434>
  402b40:	3301      	adds	r3, #1
  402b42:	4a50      	ldr	r2, [pc, #320]	; (402c84 <_vfprintf_r+0x5a8>)
  402b44:	9324      	str	r3, [sp, #144]	; 0x90
  402b46:	442c      	add	r4, r5
  402b48:	2b07      	cmp	r3, #7
  402b4a:	9425      	str	r4, [sp, #148]	; 0x94
  402b4c:	e888 0024 	stmia.w	r8, {r2, r5}
  402b50:	dd08      	ble.n	402b64 <_vfprintf_r+0x488>
  402b52:	aa23      	add	r2, sp, #140	; 0x8c
  402b54:	990a      	ldr	r1, [sp, #40]	; 0x28
  402b56:	9808      	ldr	r0, [sp, #32]
  402b58:	f003 feda 	bl	406910 <__sprint_r>
  402b5c:	2800      	cmp	r0, #0
  402b5e:	f040 8347 	bne.w	4031f0 <_vfprintf_r+0xb14>
  402b62:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402b68:	9907      	ldr	r1, [sp, #28]
  402b6a:	428a      	cmp	r2, r1
  402b6c:	bfac      	ite	ge
  402b6e:	189b      	addge	r3, r3, r2
  402b70:	185b      	addlt	r3, r3, r1
  402b72:	930b      	str	r3, [sp, #44]	; 0x2c
  402b74:	2c00      	cmp	r4, #0
  402b76:	f040 8333 	bne.w	4031e0 <_vfprintf_r+0xb04>
  402b7a:	2300      	movs	r3, #0
  402b7c:	9324      	str	r3, [sp, #144]	; 0x90
  402b7e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  402b82:	e5f7      	b.n	402774 <_vfprintf_r+0x98>
  402b84:	4651      	mov	r1, sl
  402b86:	9808      	ldr	r0, [sp, #32]
  402b88:	f001 f896 	bl	403cb8 <__swsetup_r>
  402b8c:	2800      	cmp	r0, #0
  402b8e:	d038      	beq.n	402c02 <_vfprintf_r+0x526>
  402b90:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  402b94:	07dd      	lsls	r5, r3, #31
  402b96:	d404      	bmi.n	402ba2 <_vfprintf_r+0x4c6>
  402b98:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  402b9c:	059c      	lsls	r4, r3, #22
  402b9e:	f140 85ca 	bpl.w	403736 <_vfprintf_r+0x105a>
  402ba2:	f04f 33ff 	mov.w	r3, #4294967295
  402ba6:	930b      	str	r3, [sp, #44]	; 0x2c
  402ba8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402baa:	b041      	add	sp, #260	; 0x104
  402bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bb0:	aa23      	add	r2, sp, #140	; 0x8c
  402bb2:	990a      	ldr	r1, [sp, #40]	; 0x28
  402bb4:	9808      	ldr	r0, [sp, #32]
  402bb6:	f003 feab 	bl	406910 <__sprint_r>
  402bba:	2800      	cmp	r0, #0
  402bbc:	f040 8318 	bne.w	4031f0 <_vfprintf_r+0xb14>
  402bc0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  402bc4:	e5f5      	b.n	4027b2 <_vfprintf_r+0xd6>
  402bc6:	9808      	ldr	r0, [sp, #32]
  402bc8:	f002 f9a0 	bl	404f0c <__sinit>
  402bcc:	e59c      	b.n	402708 <_vfprintf_r+0x2c>
  402bce:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  402bd2:	2a00      	cmp	r2, #0
  402bd4:	f6ff adbd 	blt.w	402752 <_vfprintf_r+0x76>
  402bd8:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  402bdc:	07d0      	lsls	r0, r2, #31
  402bde:	d405      	bmi.n	402bec <_vfprintf_r+0x510>
  402be0:	0599      	lsls	r1, r3, #22
  402be2:	d403      	bmi.n	402bec <_vfprintf_r+0x510>
  402be4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  402be8:	f002 fcce 	bl	405588 <__retarget_lock_release_recursive>
  402bec:	462b      	mov	r3, r5
  402bee:	464a      	mov	r2, r9
  402bf0:	4651      	mov	r1, sl
  402bf2:	9808      	ldr	r0, [sp, #32]
  402bf4:	f001 f81e 	bl	403c34 <__sbprintf>
  402bf8:	900b      	str	r0, [sp, #44]	; 0x2c
  402bfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402bfc:	b041      	add	sp, #260	; 0x104
  402bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c02:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  402c06:	e59f      	b.n	402748 <_vfprintf_r+0x6c>
  402c08:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  402c0c:	f002 fcba 	bl	405584 <__retarget_lock_acquire_recursive>
  402c10:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  402c14:	b293      	uxth	r3, r2
  402c16:	e582      	b.n	40271e <_vfprintf_r+0x42>
  402c18:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c1a:	930e      	str	r3, [sp, #56]	; 0x38
  402c1c:	4240      	negs	r0, r0
  402c1e:	900c      	str	r0, [sp, #48]	; 0x30
  402c20:	f04b 0b04 	orr.w	fp, fp, #4
  402c24:	f899 6000 	ldrb.w	r6, [r9]
  402c28:	e5d7      	b.n	4027da <_vfprintf_r+0xfe>
  402c2a:	2a00      	cmp	r2, #0
  402c2c:	f040 87df 	bne.w	403bee <_vfprintf_r+0x1512>
  402c30:	4b16      	ldr	r3, [pc, #88]	; (402c8c <_vfprintf_r+0x5b0>)
  402c32:	9318      	str	r3, [sp, #96]	; 0x60
  402c34:	f01b 0f20 	tst.w	fp, #32
  402c38:	f040 84b9 	bne.w	4035ae <_vfprintf_r+0xed2>
  402c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402c3e:	f01b 0f10 	tst.w	fp, #16
  402c42:	4613      	mov	r3, r2
  402c44:	f040 83dc 	bne.w	403400 <_vfprintf_r+0xd24>
  402c48:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402c4c:	f000 83d8 	beq.w	403400 <_vfprintf_r+0xd24>
  402c50:	3304      	adds	r3, #4
  402c52:	8814      	ldrh	r4, [r2, #0]
  402c54:	930e      	str	r3, [sp, #56]	; 0x38
  402c56:	2500      	movs	r5, #0
  402c58:	f01b 0f01 	tst.w	fp, #1
  402c5c:	f000 8322 	beq.w	4032a4 <_vfprintf_r+0xbc8>
  402c60:	ea54 0305 	orrs.w	r3, r4, r5
  402c64:	f000 831e 	beq.w	4032a4 <_vfprintf_r+0xbc8>
  402c68:	2330      	movs	r3, #48	; 0x30
  402c6a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  402c6e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  402c72:	f04b 0b02 	orr.w	fp, fp, #2
  402c76:	2302      	movs	r3, #2
  402c78:	e63c      	b.n	4028f4 <_vfprintf_r+0x218>
  402c7a:	f04b 0b20 	orr.w	fp, fp, #32
  402c7e:	f899 6000 	ldrb.w	r6, [r9]
  402c82:	e5aa      	b.n	4027da <_vfprintf_r+0xfe>
  402c84:	00407b5c 	.word	0x00407b5c
  402c88:	00407b6c 	.word	0x00407b6c
  402c8c:	00407b3c 	.word	0x00407b3c
  402c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402c92:	6817      	ldr	r7, [r2, #0]
  402c94:	2400      	movs	r4, #0
  402c96:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  402c9a:	1d15      	adds	r5, r2, #4
  402c9c:	2f00      	cmp	r7, #0
  402c9e:	f000 864e 	beq.w	40393e <_vfprintf_r+0x1262>
  402ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402ca4:	1c53      	adds	r3, r2, #1
  402ca6:	f000 85cc 	beq.w	403842 <_vfprintf_r+0x1166>
  402caa:	4621      	mov	r1, r4
  402cac:	4638      	mov	r0, r7
  402cae:	f002 ff9f 	bl	405bf0 <memchr>
  402cb2:	2800      	cmp	r0, #0
  402cb4:	f000 8697 	beq.w	4039e6 <_vfprintf_r+0x130a>
  402cb8:	1bc3      	subs	r3, r0, r7
  402cba:	930d      	str	r3, [sp, #52]	; 0x34
  402cbc:	9409      	str	r4, [sp, #36]	; 0x24
  402cbe:	950e      	str	r5, [sp, #56]	; 0x38
  402cc0:	f8cd b018 	str.w	fp, [sp, #24]
  402cc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402cc8:	9307      	str	r3, [sp, #28]
  402cca:	9410      	str	r4, [sp, #64]	; 0x40
  402ccc:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  402cd0:	e636      	b.n	402940 <_vfprintf_r+0x264>
  402cd2:	2a00      	cmp	r2, #0
  402cd4:	f040 8796 	bne.w	403c04 <_vfprintf_r+0x1528>
  402cd8:	f01b 0f20 	tst.w	fp, #32
  402cdc:	f040 845a 	bne.w	403594 <_vfprintf_r+0xeb8>
  402ce0:	f01b 0f10 	tst.w	fp, #16
  402ce4:	f040 83a2 	bne.w	40342c <_vfprintf_r+0xd50>
  402ce8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402cec:	f000 839e 	beq.w	40342c <_vfprintf_r+0xd50>
  402cf0:	990e      	ldr	r1, [sp, #56]	; 0x38
  402cf2:	f9b1 4000 	ldrsh.w	r4, [r1]
  402cf6:	3104      	adds	r1, #4
  402cf8:	17e5      	asrs	r5, r4, #31
  402cfa:	4622      	mov	r2, r4
  402cfc:	462b      	mov	r3, r5
  402cfe:	910e      	str	r1, [sp, #56]	; 0x38
  402d00:	2a00      	cmp	r2, #0
  402d02:	f173 0300 	sbcs.w	r3, r3, #0
  402d06:	f2c0 8487 	blt.w	403618 <_vfprintf_r+0xf3c>
  402d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
  402d0c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  402d10:	1c4a      	adds	r2, r1, #1
  402d12:	f04f 0301 	mov.w	r3, #1
  402d16:	f47f adf5 	bne.w	402904 <_vfprintf_r+0x228>
  402d1a:	ea54 0205 	orrs.w	r2, r4, r5
  402d1e:	f000 826c 	beq.w	4031fa <_vfprintf_r+0xb1e>
  402d22:	f8cd b018 	str.w	fp, [sp, #24]
  402d26:	2b01      	cmp	r3, #1
  402d28:	f000 8308 	beq.w	40333c <_vfprintf_r+0xc60>
  402d2c:	2b02      	cmp	r3, #2
  402d2e:	f040 8295 	bne.w	40325c <_vfprintf_r+0xb80>
  402d32:	9818      	ldr	r0, [sp, #96]	; 0x60
  402d34:	af30      	add	r7, sp, #192	; 0xc0
  402d36:	0923      	lsrs	r3, r4, #4
  402d38:	f004 010f 	and.w	r1, r4, #15
  402d3c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402d40:	092a      	lsrs	r2, r5, #4
  402d42:	461c      	mov	r4, r3
  402d44:	4615      	mov	r5, r2
  402d46:	5c43      	ldrb	r3, [r0, r1]
  402d48:	f807 3d01 	strb.w	r3, [r7, #-1]!
  402d4c:	ea54 0305 	orrs.w	r3, r4, r5
  402d50:	d1f1      	bne.n	402d36 <_vfprintf_r+0x65a>
  402d52:	ab30      	add	r3, sp, #192	; 0xc0
  402d54:	1bdb      	subs	r3, r3, r7
  402d56:	930d      	str	r3, [sp, #52]	; 0x34
  402d58:	e5ea      	b.n	402930 <_vfprintf_r+0x254>
  402d5a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  402d5e:	f899 6000 	ldrb.w	r6, [r9]
  402d62:	e53a      	b.n	4027da <_vfprintf_r+0xfe>
  402d64:	f899 6000 	ldrb.w	r6, [r9]
  402d68:	2e6c      	cmp	r6, #108	; 0x6c
  402d6a:	bf03      	ittte	eq
  402d6c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  402d70:	f04b 0b20 	orreq.w	fp, fp, #32
  402d74:	f109 0901 	addeq.w	r9, r9, #1
  402d78:	f04b 0b10 	orrne.w	fp, fp, #16
  402d7c:	e52d      	b.n	4027da <_vfprintf_r+0xfe>
  402d7e:	2a00      	cmp	r2, #0
  402d80:	f040 874c 	bne.w	403c1c <_vfprintf_r+0x1540>
  402d84:	f01b 0f20 	tst.w	fp, #32
  402d88:	f040 853f 	bne.w	40380a <_vfprintf_r+0x112e>
  402d8c:	f01b 0f10 	tst.w	fp, #16
  402d90:	f040 80fc 	bne.w	402f8c <_vfprintf_r+0x8b0>
  402d94:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402d98:	f000 80f8 	beq.w	402f8c <_vfprintf_r+0x8b0>
  402d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d9e:	6813      	ldr	r3, [r2, #0]
  402da0:	3204      	adds	r2, #4
  402da2:	920e      	str	r2, [sp, #56]	; 0x38
  402da4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  402da8:	801a      	strh	r2, [r3, #0]
  402daa:	e4e3      	b.n	402774 <_vfprintf_r+0x98>
  402dac:	f899 6000 	ldrb.w	r6, [r9]
  402db0:	2900      	cmp	r1, #0
  402db2:	f47f ad12 	bne.w	4027da <_vfprintf_r+0xfe>
  402db6:	2201      	movs	r2, #1
  402db8:	2120      	movs	r1, #32
  402dba:	e50e      	b.n	4027da <_vfprintf_r+0xfe>
  402dbc:	f899 6000 	ldrb.w	r6, [r9]
  402dc0:	2e2a      	cmp	r6, #42	; 0x2a
  402dc2:	f109 0001 	add.w	r0, r9, #1
  402dc6:	f000 86f1 	beq.w	403bac <_vfprintf_r+0x14d0>
  402dca:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  402dce:	2b09      	cmp	r3, #9
  402dd0:	4681      	mov	r9, r0
  402dd2:	bf98      	it	ls
  402dd4:	2000      	movls	r0, #0
  402dd6:	f200 863d 	bhi.w	403a54 <_vfprintf_r+0x1378>
  402dda:	f819 6b01 	ldrb.w	r6, [r9], #1
  402dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402de2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  402de6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  402dea:	2b09      	cmp	r3, #9
  402dec:	d9f5      	bls.n	402dda <_vfprintf_r+0x6fe>
  402dee:	9009      	str	r0, [sp, #36]	; 0x24
  402df0:	e4f5      	b.n	4027de <_vfprintf_r+0x102>
  402df2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402df6:	f899 6000 	ldrb.w	r6, [r9]
  402dfa:	e4ee      	b.n	4027da <_vfprintf_r+0xfe>
  402dfc:	f899 6000 	ldrb.w	r6, [r9]
  402e00:	2201      	movs	r2, #1
  402e02:	212b      	movs	r1, #43	; 0x2b
  402e04:	e4e9      	b.n	4027da <_vfprintf_r+0xfe>
  402e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e08:	4bae      	ldr	r3, [pc, #696]	; (4030c4 <_vfprintf_r+0x9e8>)
  402e0a:	6814      	ldr	r4, [r2, #0]
  402e0c:	9318      	str	r3, [sp, #96]	; 0x60
  402e0e:	2678      	movs	r6, #120	; 0x78
  402e10:	2330      	movs	r3, #48	; 0x30
  402e12:	3204      	adds	r2, #4
  402e14:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  402e18:	f04b 0b02 	orr.w	fp, fp, #2
  402e1c:	920e      	str	r2, [sp, #56]	; 0x38
  402e1e:	2500      	movs	r5, #0
  402e20:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  402e24:	2302      	movs	r3, #2
  402e26:	e565      	b.n	4028f4 <_vfprintf_r+0x218>
  402e28:	2a00      	cmp	r2, #0
  402e2a:	f040 86e4 	bne.w	403bf6 <_vfprintf_r+0x151a>
  402e2e:	4ba6      	ldr	r3, [pc, #664]	; (4030c8 <_vfprintf_r+0x9ec>)
  402e30:	9318      	str	r3, [sp, #96]	; 0x60
  402e32:	e6ff      	b.n	402c34 <_vfprintf_r+0x558>
  402e34:	990e      	ldr	r1, [sp, #56]	; 0x38
  402e36:	f8cd b018 	str.w	fp, [sp, #24]
  402e3a:	680a      	ldr	r2, [r1, #0]
  402e3c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  402e40:	2300      	movs	r3, #0
  402e42:	460a      	mov	r2, r1
  402e44:	469a      	mov	sl, r3
  402e46:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402e4a:	3204      	adds	r2, #4
  402e4c:	2301      	movs	r3, #1
  402e4e:	9307      	str	r3, [sp, #28]
  402e50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  402e54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  402e58:	920e      	str	r2, [sp, #56]	; 0x38
  402e5a:	930d      	str	r3, [sp, #52]	; 0x34
  402e5c:	af26      	add	r7, sp, #152	; 0x98
  402e5e:	e575      	b.n	40294c <_vfprintf_r+0x270>
  402e60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  402e64:	2000      	movs	r0, #0
  402e66:	f819 6b01 	ldrb.w	r6, [r9], #1
  402e6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e6e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  402e72:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  402e76:	2b09      	cmp	r3, #9
  402e78:	d9f5      	bls.n	402e66 <_vfprintf_r+0x78a>
  402e7a:	900c      	str	r0, [sp, #48]	; 0x30
  402e7c:	e4af      	b.n	4027de <_vfprintf_r+0x102>
  402e7e:	2a00      	cmp	r2, #0
  402e80:	f040 86c8 	bne.w	403c14 <_vfprintf_r+0x1538>
  402e84:	f04b 0b10 	orr.w	fp, fp, #16
  402e88:	e726      	b.n	402cd8 <_vfprintf_r+0x5fc>
  402e8a:	f04b 0b01 	orr.w	fp, fp, #1
  402e8e:	f899 6000 	ldrb.w	r6, [r9]
  402e92:	e4a2      	b.n	4027da <_vfprintf_r+0xfe>
  402e94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402e96:	6823      	ldr	r3, [r4, #0]
  402e98:	930c      	str	r3, [sp, #48]	; 0x30
  402e9a:	4618      	mov	r0, r3
  402e9c:	2800      	cmp	r0, #0
  402e9e:	4623      	mov	r3, r4
  402ea0:	f103 0304 	add.w	r3, r3, #4
  402ea4:	f6ff aeb8 	blt.w	402c18 <_vfprintf_r+0x53c>
  402ea8:	930e      	str	r3, [sp, #56]	; 0x38
  402eaa:	f899 6000 	ldrb.w	r6, [r9]
  402eae:	e494      	b.n	4027da <_vfprintf_r+0xfe>
  402eb0:	2a00      	cmp	r2, #0
  402eb2:	f040 86b7 	bne.w	403c24 <_vfprintf_r+0x1548>
  402eb6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  402eb8:	3507      	adds	r5, #7
  402eba:	f025 0307 	bic.w	r3, r5, #7
  402ebe:	f103 0208 	add.w	r2, r3, #8
  402ec2:	920e      	str	r2, [sp, #56]	; 0x38
  402ec4:	681a      	ldr	r2, [r3, #0]
  402ec6:	9213      	str	r2, [sp, #76]	; 0x4c
  402ec8:	685b      	ldr	r3, [r3, #4]
  402eca:	9312      	str	r3, [sp, #72]	; 0x48
  402ecc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402ece:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  402ed0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402ed4:	4628      	mov	r0, r5
  402ed6:	4621      	mov	r1, r4
  402ed8:	f04f 32ff 	mov.w	r2, #4294967295
  402edc:	4b7b      	ldr	r3, [pc, #492]	; (4030cc <_vfprintf_r+0x9f0>)
  402ede:	f004 fc19 	bl	407714 <__aeabi_dcmpun>
  402ee2:	2800      	cmp	r0, #0
  402ee4:	f040 83a2 	bne.w	40362c <_vfprintf_r+0xf50>
  402ee8:	4628      	mov	r0, r5
  402eea:	4621      	mov	r1, r4
  402eec:	f04f 32ff 	mov.w	r2, #4294967295
  402ef0:	4b76      	ldr	r3, [pc, #472]	; (4030cc <_vfprintf_r+0x9f0>)
  402ef2:	f004 fbf1 	bl	4076d8 <__aeabi_dcmple>
  402ef6:	2800      	cmp	r0, #0
  402ef8:	f040 8398 	bne.w	40362c <_vfprintf_r+0xf50>
  402efc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402efe:	9813      	ldr	r0, [sp, #76]	; 0x4c
  402f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402f02:	9912      	ldr	r1, [sp, #72]	; 0x48
  402f04:	f004 fbde 	bl	4076c4 <__aeabi_dcmplt>
  402f08:	2800      	cmp	r0, #0
  402f0a:	f040 8435 	bne.w	403778 <_vfprintf_r+0x109c>
  402f0e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  402f12:	4f6f      	ldr	r7, [pc, #444]	; (4030d0 <_vfprintf_r+0x9f4>)
  402f14:	4b6f      	ldr	r3, [pc, #444]	; (4030d4 <_vfprintf_r+0x9f8>)
  402f16:	2203      	movs	r2, #3
  402f18:	2100      	movs	r1, #0
  402f1a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  402f1e:	9207      	str	r2, [sp, #28]
  402f20:	9109      	str	r1, [sp, #36]	; 0x24
  402f22:	9006      	str	r0, [sp, #24]
  402f24:	2e47      	cmp	r6, #71	; 0x47
  402f26:	bfd8      	it	le
  402f28:	461f      	movle	r7, r3
  402f2a:	920d      	str	r2, [sp, #52]	; 0x34
  402f2c:	9110      	str	r1, [sp, #64]	; 0x40
  402f2e:	e507      	b.n	402940 <_vfprintf_r+0x264>
  402f30:	f04b 0b08 	orr.w	fp, fp, #8
  402f34:	f899 6000 	ldrb.w	r6, [r9]
  402f38:	e44f      	b.n	4027da <_vfprintf_r+0xfe>
  402f3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  402f3c:	3507      	adds	r5, #7
  402f3e:	f025 0307 	bic.w	r3, r5, #7
  402f42:	f103 0208 	add.w	r2, r3, #8
  402f46:	e9d3 4500 	ldrd	r4, r5, [r3]
  402f4a:	920e      	str	r2, [sp, #56]	; 0x38
  402f4c:	2300      	movs	r3, #0
  402f4e:	e4d1      	b.n	4028f4 <_vfprintf_r+0x218>
  402f50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  402f52:	3507      	adds	r5, #7
  402f54:	f025 0307 	bic.w	r3, r5, #7
  402f58:	f103 0208 	add.w	r2, r3, #8
  402f5c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402f60:	920e      	str	r2, [sp, #56]	; 0x38
  402f62:	2301      	movs	r3, #1
  402f64:	e4c6      	b.n	4028f4 <_vfprintf_r+0x218>
  402f66:	2a00      	cmp	r2, #0
  402f68:	f040 8650 	bne.w	403c0c <_vfprintf_r+0x1530>
  402f6c:	b1c6      	cbz	r6, 402fa0 <_vfprintf_r+0x8c4>
  402f6e:	2300      	movs	r3, #0
  402f70:	2201      	movs	r2, #1
  402f72:	469a      	mov	sl, r3
  402f74:	9207      	str	r2, [sp, #28]
  402f76:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  402f7a:	f8cd b018 	str.w	fp, [sp, #24]
  402f7e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402f82:	9309      	str	r3, [sp, #36]	; 0x24
  402f84:	9310      	str	r3, [sp, #64]	; 0x40
  402f86:	920d      	str	r2, [sp, #52]	; 0x34
  402f88:	af26      	add	r7, sp, #152	; 0x98
  402f8a:	e4df      	b.n	40294c <_vfprintf_r+0x270>
  402f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402f8e:	6813      	ldr	r3, [r2, #0]
  402f90:	3204      	adds	r2, #4
  402f92:	920e      	str	r2, [sp, #56]	; 0x38
  402f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402f96:	601a      	str	r2, [r3, #0]
  402f98:	f7ff bbec 	b.w	402774 <_vfprintf_r+0x98>
  402f9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402f9e:	e527      	b.n	4029f0 <_vfprintf_r+0x314>
  402fa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402fa2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  402fa6:	2b00      	cmp	r3, #0
  402fa8:	f040 8594 	bne.w	403ad4 <_vfprintf_r+0x13f8>
  402fac:	2300      	movs	r3, #0
  402fae:	9324      	str	r3, [sp, #144]	; 0x90
  402fb0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  402fb4:	f013 0f01 	tst.w	r3, #1
  402fb8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  402fbc:	d102      	bne.n	402fc4 <_vfprintf_r+0x8e8>
  402fbe:	059a      	lsls	r2, r3, #22
  402fc0:	f140 8249 	bpl.w	403456 <_vfprintf_r+0xd7a>
  402fc4:	065b      	lsls	r3, r3, #25
  402fc6:	f53f adec 	bmi.w	402ba2 <_vfprintf_r+0x4c6>
  402fca:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402fcc:	b041      	add	sp, #260	; 0x104
  402fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fd2:	2e65      	cmp	r6, #101	; 0x65
  402fd4:	f340 80b2 	ble.w	40313c <_vfprintf_r+0xa60>
  402fd8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402fda:	9813      	ldr	r0, [sp, #76]	; 0x4c
  402fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402fde:	9912      	ldr	r1, [sp, #72]	; 0x48
  402fe0:	f004 fb66 	bl	4076b0 <__aeabi_dcmpeq>
  402fe4:	2800      	cmp	r0, #0
  402fe6:	f000 8160 	beq.w	4032aa <_vfprintf_r+0xbce>
  402fea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402fec:	4a3a      	ldr	r2, [pc, #232]	; (4030d8 <_vfprintf_r+0x9fc>)
  402fee:	f8c8 2000 	str.w	r2, [r8]
  402ff2:	3301      	adds	r3, #1
  402ff4:	3401      	adds	r4, #1
  402ff6:	2201      	movs	r2, #1
  402ff8:	2b07      	cmp	r3, #7
  402ffa:	9425      	str	r4, [sp, #148]	; 0x94
  402ffc:	9324      	str	r3, [sp, #144]	; 0x90
  402ffe:	f8c8 2004 	str.w	r2, [r8, #4]
  403002:	f300 83bf 	bgt.w	403784 <_vfprintf_r+0x10a8>
  403006:	f108 0808 	add.w	r8, r8, #8
  40300a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40300c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40300e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403010:	4293      	cmp	r3, r2
  403012:	db03      	blt.n	40301c <_vfprintf_r+0x940>
  403014:	9b06      	ldr	r3, [sp, #24]
  403016:	07df      	lsls	r7, r3, #31
  403018:	f57f ad65 	bpl.w	402ae6 <_vfprintf_r+0x40a>
  40301c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40301e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403020:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403022:	f8c8 2000 	str.w	r2, [r8]
  403026:	3301      	adds	r3, #1
  403028:	440c      	add	r4, r1
  40302a:	2b07      	cmp	r3, #7
  40302c:	f8c8 1004 	str.w	r1, [r8, #4]
  403030:	9425      	str	r4, [sp, #148]	; 0x94
  403032:	9324      	str	r3, [sp, #144]	; 0x90
  403034:	f300 83f8 	bgt.w	403828 <_vfprintf_r+0x114c>
  403038:	f108 0808 	add.w	r8, r8, #8
  40303c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40303e:	1e5e      	subs	r6, r3, #1
  403040:	2e00      	cmp	r6, #0
  403042:	f77f ad50 	ble.w	402ae6 <_vfprintf_r+0x40a>
  403046:	2e10      	cmp	r6, #16
  403048:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40304a:	4d24      	ldr	r5, [pc, #144]	; (4030dc <_vfprintf_r+0xa00>)
  40304c:	f340 81dd 	ble.w	40340a <_vfprintf_r+0xd2e>
  403050:	2710      	movs	r7, #16
  403052:	f8dd a020 	ldr.w	sl, [sp, #32]
  403056:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40305a:	e005      	b.n	403068 <_vfprintf_r+0x98c>
  40305c:	f108 0808 	add.w	r8, r8, #8
  403060:	3e10      	subs	r6, #16
  403062:	2e10      	cmp	r6, #16
  403064:	f340 81d1 	ble.w	40340a <_vfprintf_r+0xd2e>
  403068:	3301      	adds	r3, #1
  40306a:	3410      	adds	r4, #16
  40306c:	2b07      	cmp	r3, #7
  40306e:	9425      	str	r4, [sp, #148]	; 0x94
  403070:	9324      	str	r3, [sp, #144]	; 0x90
  403072:	e888 00a0 	stmia.w	r8, {r5, r7}
  403076:	ddf1      	ble.n	40305c <_vfprintf_r+0x980>
  403078:	aa23      	add	r2, sp, #140	; 0x8c
  40307a:	4659      	mov	r1, fp
  40307c:	4650      	mov	r0, sl
  40307e:	f003 fc47 	bl	406910 <__sprint_r>
  403082:	2800      	cmp	r0, #0
  403084:	f040 83cd 	bne.w	403822 <_vfprintf_r+0x1146>
  403088:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40308a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40308c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403090:	e7e6      	b.n	403060 <_vfprintf_r+0x984>
  403092:	46aa      	mov	sl, r5
  403094:	e78c      	b.n	402fb0 <_vfprintf_r+0x8d4>
  403096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403098:	9a07      	ldr	r2, [sp, #28]
  40309a:	eba3 0a02 	sub.w	sl, r3, r2
  40309e:	f1ba 0f00 	cmp.w	sl, #0
  4030a2:	f77f acca 	ble.w	402a3a <_vfprintf_r+0x35e>
  4030a6:	f1ba 0f10 	cmp.w	sl, #16
  4030aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4030ac:	4d0b      	ldr	r5, [pc, #44]	; (4030dc <_vfprintf_r+0xa00>)
  4030ae:	dd39      	ble.n	403124 <_vfprintf_r+0xa48>
  4030b0:	4642      	mov	r2, r8
  4030b2:	4621      	mov	r1, r4
  4030b4:	46b0      	mov	r8, r6
  4030b6:	f04f 0b10 	mov.w	fp, #16
  4030ba:	462e      	mov	r6, r5
  4030bc:	9c08      	ldr	r4, [sp, #32]
  4030be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4030c0:	e015      	b.n	4030ee <_vfprintf_r+0xa12>
  4030c2:	bf00      	nop
  4030c4:	00407b3c 	.word	0x00407b3c
  4030c8:	00407b28 	.word	0x00407b28
  4030cc:	7fefffff 	.word	0x7fefffff
  4030d0:	00407b1c 	.word	0x00407b1c
  4030d4:	00407b18 	.word	0x00407b18
  4030d8:	00407b58 	.word	0x00407b58
  4030dc:	00407b6c 	.word	0x00407b6c
  4030e0:	f1aa 0a10 	sub.w	sl, sl, #16
  4030e4:	f1ba 0f10 	cmp.w	sl, #16
  4030e8:	f102 0208 	add.w	r2, r2, #8
  4030ec:	dd16      	ble.n	40311c <_vfprintf_r+0xa40>
  4030ee:	3301      	adds	r3, #1
  4030f0:	3110      	adds	r1, #16
  4030f2:	2b07      	cmp	r3, #7
  4030f4:	9125      	str	r1, [sp, #148]	; 0x94
  4030f6:	9324      	str	r3, [sp, #144]	; 0x90
  4030f8:	e882 0840 	stmia.w	r2, {r6, fp}
  4030fc:	ddf0      	ble.n	4030e0 <_vfprintf_r+0xa04>
  4030fe:	aa23      	add	r2, sp, #140	; 0x8c
  403100:	4629      	mov	r1, r5
  403102:	4620      	mov	r0, r4
  403104:	f003 fc04 	bl	406910 <__sprint_r>
  403108:	2800      	cmp	r0, #0
  40310a:	d1c2      	bne.n	403092 <_vfprintf_r+0x9b6>
  40310c:	f1aa 0a10 	sub.w	sl, sl, #16
  403110:	f1ba 0f10 	cmp.w	sl, #16
  403114:	9925      	ldr	r1, [sp, #148]	; 0x94
  403116:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403118:	aa30      	add	r2, sp, #192	; 0xc0
  40311a:	dce8      	bgt.n	4030ee <_vfprintf_r+0xa12>
  40311c:	4635      	mov	r5, r6
  40311e:	460c      	mov	r4, r1
  403120:	4646      	mov	r6, r8
  403122:	4690      	mov	r8, r2
  403124:	3301      	adds	r3, #1
  403126:	4454      	add	r4, sl
  403128:	2b07      	cmp	r3, #7
  40312a:	9425      	str	r4, [sp, #148]	; 0x94
  40312c:	9324      	str	r3, [sp, #144]	; 0x90
  40312e:	e888 0420 	stmia.w	r8, {r5, sl}
  403132:	f300 8264 	bgt.w	4035fe <_vfprintf_r+0xf22>
  403136:	f108 0808 	add.w	r8, r8, #8
  40313a:	e47e      	b.n	402a3a <_vfprintf_r+0x35e>
  40313c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40313e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403140:	2b01      	cmp	r3, #1
  403142:	f340 81fd 	ble.w	403540 <_vfprintf_r+0xe64>
  403146:	3601      	adds	r6, #1
  403148:	3401      	adds	r4, #1
  40314a:	2301      	movs	r3, #1
  40314c:	2e07      	cmp	r6, #7
  40314e:	9425      	str	r4, [sp, #148]	; 0x94
  403150:	9624      	str	r6, [sp, #144]	; 0x90
  403152:	f8c8 7000 	str.w	r7, [r8]
  403156:	f8c8 3004 	str.w	r3, [r8, #4]
  40315a:	f300 820e 	bgt.w	40357a <_vfprintf_r+0xe9e>
  40315e:	f108 0808 	add.w	r8, r8, #8
  403162:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403164:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403166:	f8c8 3000 	str.w	r3, [r8]
  40316a:	3601      	adds	r6, #1
  40316c:	4414      	add	r4, r2
  40316e:	2e07      	cmp	r6, #7
  403170:	9425      	str	r4, [sp, #148]	; 0x94
  403172:	9624      	str	r6, [sp, #144]	; 0x90
  403174:	f8c8 2004 	str.w	r2, [r8, #4]
  403178:	f300 822e 	bgt.w	4035d8 <_vfprintf_r+0xefc>
  40317c:	f108 0808 	add.w	r8, r8, #8
  403180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403182:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403184:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403186:	9912      	ldr	r1, [sp, #72]	; 0x48
  403188:	f004 fa92 	bl	4076b0 <__aeabi_dcmpeq>
  40318c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40318e:	2800      	cmp	r0, #0
  403190:	f040 8106 	bne.w	4033a0 <_vfprintf_r+0xcc4>
  403194:	3b01      	subs	r3, #1
  403196:	3601      	adds	r6, #1
  403198:	3701      	adds	r7, #1
  40319a:	441c      	add	r4, r3
  40319c:	2e07      	cmp	r6, #7
  40319e:	9624      	str	r6, [sp, #144]	; 0x90
  4031a0:	9425      	str	r4, [sp, #148]	; 0x94
  4031a2:	f8c8 7000 	str.w	r7, [r8]
  4031a6:	f8c8 3004 	str.w	r3, [r8, #4]
  4031aa:	f300 81d9 	bgt.w	403560 <_vfprintf_r+0xe84>
  4031ae:	f108 0808 	add.w	r8, r8, #8
  4031b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4031b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4031b8:	3601      	adds	r6, #1
  4031ba:	4414      	add	r4, r2
  4031bc:	ab1f      	add	r3, sp, #124	; 0x7c
  4031be:	2e07      	cmp	r6, #7
  4031c0:	9425      	str	r4, [sp, #148]	; 0x94
  4031c2:	9624      	str	r6, [sp, #144]	; 0x90
  4031c4:	f8c8 3000 	str.w	r3, [r8]
  4031c8:	f77f ac8b 	ble.w	402ae2 <_vfprintf_r+0x406>
  4031cc:	aa23      	add	r2, sp, #140	; 0x8c
  4031ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  4031d0:	9808      	ldr	r0, [sp, #32]
  4031d2:	f003 fb9d 	bl	406910 <__sprint_r>
  4031d6:	b958      	cbnz	r0, 4031f0 <_vfprintf_r+0xb14>
  4031d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4031da:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4031de:	e482      	b.n	402ae6 <_vfprintf_r+0x40a>
  4031e0:	aa23      	add	r2, sp, #140	; 0x8c
  4031e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4031e4:	9808      	ldr	r0, [sp, #32]
  4031e6:	f003 fb93 	bl	406910 <__sprint_r>
  4031ea:	2800      	cmp	r0, #0
  4031ec:	f43f acc5 	beq.w	402b7a <_vfprintf_r+0x49e>
  4031f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4031f4:	e6dc      	b.n	402fb0 <_vfprintf_r+0x8d4>
  4031f6:	f8dd b018 	ldr.w	fp, [sp, #24]
  4031fa:	2b01      	cmp	r3, #1
  4031fc:	f000 8121 	beq.w	403442 <_vfprintf_r+0xd66>
  403200:	2b02      	cmp	r3, #2
  403202:	d127      	bne.n	403254 <_vfprintf_r+0xb78>
  403204:	f8cd b018 	str.w	fp, [sp, #24]
  403208:	2400      	movs	r4, #0
  40320a:	2500      	movs	r5, #0
  40320c:	e591      	b.n	402d32 <_vfprintf_r+0x656>
  40320e:	aa23      	add	r2, sp, #140	; 0x8c
  403210:	990a      	ldr	r1, [sp, #40]	; 0x28
  403212:	9808      	ldr	r0, [sp, #32]
  403214:	f003 fb7c 	bl	406910 <__sprint_r>
  403218:	2800      	cmp	r0, #0
  40321a:	d1e9      	bne.n	4031f0 <_vfprintf_r+0xb14>
  40321c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40321e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403222:	e44d      	b.n	402ac0 <_vfprintf_r+0x3e4>
  403224:	aa23      	add	r2, sp, #140	; 0x8c
  403226:	990a      	ldr	r1, [sp, #40]	; 0x28
  403228:	9808      	ldr	r0, [sp, #32]
  40322a:	f003 fb71 	bl	406910 <__sprint_r>
  40322e:	2800      	cmp	r0, #0
  403230:	d1de      	bne.n	4031f0 <_vfprintf_r+0xb14>
  403232:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403234:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403238:	f7ff bbec 	b.w	402a14 <_vfprintf_r+0x338>
  40323c:	aa23      	add	r2, sp, #140	; 0x8c
  40323e:	990a      	ldr	r1, [sp, #40]	; 0x28
  403240:	9808      	ldr	r0, [sp, #32]
  403242:	f003 fb65 	bl	406910 <__sprint_r>
  403246:	2800      	cmp	r0, #0
  403248:	d1d2      	bne.n	4031f0 <_vfprintf_r+0xb14>
  40324a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40324c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403250:	f7ff bbf0 	b.w	402a34 <_vfprintf_r+0x358>
  403254:	f8cd b018 	str.w	fp, [sp, #24]
  403258:	2400      	movs	r4, #0
  40325a:	2500      	movs	r5, #0
  40325c:	a930      	add	r1, sp, #192	; 0xc0
  40325e:	e000      	b.n	403262 <_vfprintf_r+0xb86>
  403260:	4639      	mov	r1, r7
  403262:	08e2      	lsrs	r2, r4, #3
  403264:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403268:	08e8      	lsrs	r0, r5, #3
  40326a:	f004 0307 	and.w	r3, r4, #7
  40326e:	4605      	mov	r5, r0
  403270:	4614      	mov	r4, r2
  403272:	3330      	adds	r3, #48	; 0x30
  403274:	ea54 0205 	orrs.w	r2, r4, r5
  403278:	f801 3c01 	strb.w	r3, [r1, #-1]
  40327c:	f101 37ff 	add.w	r7, r1, #4294967295
  403280:	d1ee      	bne.n	403260 <_vfprintf_r+0xb84>
  403282:	9a06      	ldr	r2, [sp, #24]
  403284:	07d2      	lsls	r2, r2, #31
  403286:	f57f ad64 	bpl.w	402d52 <_vfprintf_r+0x676>
  40328a:	2b30      	cmp	r3, #48	; 0x30
  40328c:	f43f ad61 	beq.w	402d52 <_vfprintf_r+0x676>
  403290:	2330      	movs	r3, #48	; 0x30
  403292:	3902      	subs	r1, #2
  403294:	f807 3c01 	strb.w	r3, [r7, #-1]
  403298:	ab30      	add	r3, sp, #192	; 0xc0
  40329a:	1a5b      	subs	r3, r3, r1
  40329c:	930d      	str	r3, [sp, #52]	; 0x34
  40329e:	460f      	mov	r7, r1
  4032a0:	f7ff bb46 	b.w	402930 <_vfprintf_r+0x254>
  4032a4:	2302      	movs	r3, #2
  4032a6:	f7ff bb25 	b.w	4028f4 <_vfprintf_r+0x218>
  4032aa:	991d      	ldr	r1, [sp, #116]	; 0x74
  4032ac:	2900      	cmp	r1, #0
  4032ae:	f340 8274 	ble.w	40379a <_vfprintf_r+0x10be>
  4032b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4032b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032b6:	4293      	cmp	r3, r2
  4032b8:	bfa8      	it	ge
  4032ba:	4613      	movge	r3, r2
  4032bc:	2b00      	cmp	r3, #0
  4032be:	461e      	mov	r6, r3
  4032c0:	dd0d      	ble.n	4032de <_vfprintf_r+0xc02>
  4032c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032c4:	f8c8 7000 	str.w	r7, [r8]
  4032c8:	3301      	adds	r3, #1
  4032ca:	4434      	add	r4, r6
  4032cc:	2b07      	cmp	r3, #7
  4032ce:	9425      	str	r4, [sp, #148]	; 0x94
  4032d0:	f8c8 6004 	str.w	r6, [r8, #4]
  4032d4:	9324      	str	r3, [sp, #144]	; 0x90
  4032d6:	f300 8324 	bgt.w	403922 <_vfprintf_r+0x1246>
  4032da:	f108 0808 	add.w	r8, r8, #8
  4032de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4032e0:	2e00      	cmp	r6, #0
  4032e2:	bfa8      	it	ge
  4032e4:	1b9b      	subge	r3, r3, r6
  4032e6:	2b00      	cmp	r3, #0
  4032e8:	461e      	mov	r6, r3
  4032ea:	f340 80d0 	ble.w	40348e <_vfprintf_r+0xdb2>
  4032ee:	2e10      	cmp	r6, #16
  4032f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032f2:	4dc0      	ldr	r5, [pc, #768]	; (4035f4 <_vfprintf_r+0xf18>)
  4032f4:	f340 80b7 	ble.w	403466 <_vfprintf_r+0xd8a>
  4032f8:	4622      	mov	r2, r4
  4032fa:	f04f 0a10 	mov.w	sl, #16
  4032fe:	f8dd b020 	ldr.w	fp, [sp, #32]
  403302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403304:	e005      	b.n	403312 <_vfprintf_r+0xc36>
  403306:	f108 0808 	add.w	r8, r8, #8
  40330a:	3e10      	subs	r6, #16
  40330c:	2e10      	cmp	r6, #16
  40330e:	f340 80a9 	ble.w	403464 <_vfprintf_r+0xd88>
  403312:	3301      	adds	r3, #1
  403314:	3210      	adds	r2, #16
  403316:	2b07      	cmp	r3, #7
  403318:	9225      	str	r2, [sp, #148]	; 0x94
  40331a:	9324      	str	r3, [sp, #144]	; 0x90
  40331c:	e888 0420 	stmia.w	r8, {r5, sl}
  403320:	ddf1      	ble.n	403306 <_vfprintf_r+0xc2a>
  403322:	aa23      	add	r2, sp, #140	; 0x8c
  403324:	4621      	mov	r1, r4
  403326:	4658      	mov	r0, fp
  403328:	f003 faf2 	bl	406910 <__sprint_r>
  40332c:	2800      	cmp	r0, #0
  40332e:	f040 8324 	bne.w	40397a <_vfprintf_r+0x129e>
  403332:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403334:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403336:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40333a:	e7e6      	b.n	40330a <_vfprintf_r+0xc2e>
  40333c:	2d00      	cmp	r5, #0
  40333e:	bf08      	it	eq
  403340:	2c0a      	cmpeq	r4, #10
  403342:	d37c      	bcc.n	40343e <_vfprintf_r+0xd62>
  403344:	af30      	add	r7, sp, #192	; 0xc0
  403346:	4620      	mov	r0, r4
  403348:	4629      	mov	r1, r5
  40334a:	220a      	movs	r2, #10
  40334c:	2300      	movs	r3, #0
  40334e:	f004 fa1f 	bl	407790 <__aeabi_uldivmod>
  403352:	3230      	adds	r2, #48	; 0x30
  403354:	f807 2d01 	strb.w	r2, [r7, #-1]!
  403358:	4620      	mov	r0, r4
  40335a:	4629      	mov	r1, r5
  40335c:	2300      	movs	r3, #0
  40335e:	220a      	movs	r2, #10
  403360:	f004 fa16 	bl	407790 <__aeabi_uldivmod>
  403364:	4604      	mov	r4, r0
  403366:	460d      	mov	r5, r1
  403368:	ea54 0305 	orrs.w	r3, r4, r5
  40336c:	d1eb      	bne.n	403346 <_vfprintf_r+0xc6a>
  40336e:	ab30      	add	r3, sp, #192	; 0xc0
  403370:	1bdb      	subs	r3, r3, r7
  403372:	930d      	str	r3, [sp, #52]	; 0x34
  403374:	f7ff badc 	b.w	402930 <_vfprintf_r+0x254>
  403378:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40337a:	930d      	str	r3, [sp, #52]	; 0x34
  40337c:	af30      	add	r7, sp, #192	; 0xc0
  40337e:	f7ff bad7 	b.w	402930 <_vfprintf_r+0x254>
  403382:	aa23      	add	r2, sp, #140	; 0x8c
  403384:	990a      	ldr	r1, [sp, #40]	; 0x28
  403386:	9808      	ldr	r0, [sp, #32]
  403388:	f003 fac2 	bl	406910 <__sprint_r>
  40338c:	2800      	cmp	r0, #0
  40338e:	f47f af2f 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403392:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403396:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403398:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40339c:	f7ff bb28 	b.w	4029f0 <_vfprintf_r+0x314>
  4033a0:	1e5f      	subs	r7, r3, #1
  4033a2:	2f00      	cmp	r7, #0
  4033a4:	f77f af05 	ble.w	4031b2 <_vfprintf_r+0xad6>
  4033a8:	2f10      	cmp	r7, #16
  4033aa:	4d92      	ldr	r5, [pc, #584]	; (4035f4 <_vfprintf_r+0xf18>)
  4033ac:	f340 810a 	ble.w	4035c4 <_vfprintf_r+0xee8>
  4033b0:	f04f 0a10 	mov.w	sl, #16
  4033b4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4033b8:	e005      	b.n	4033c6 <_vfprintf_r+0xcea>
  4033ba:	f108 0808 	add.w	r8, r8, #8
  4033be:	3f10      	subs	r7, #16
  4033c0:	2f10      	cmp	r7, #16
  4033c2:	f340 80ff 	ble.w	4035c4 <_vfprintf_r+0xee8>
  4033c6:	3601      	adds	r6, #1
  4033c8:	3410      	adds	r4, #16
  4033ca:	2e07      	cmp	r6, #7
  4033cc:	9425      	str	r4, [sp, #148]	; 0x94
  4033ce:	9624      	str	r6, [sp, #144]	; 0x90
  4033d0:	e888 0420 	stmia.w	r8, {r5, sl}
  4033d4:	ddf1      	ble.n	4033ba <_vfprintf_r+0xcde>
  4033d6:	aa23      	add	r2, sp, #140	; 0x8c
  4033d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4033da:	4658      	mov	r0, fp
  4033dc:	f003 fa98 	bl	406910 <__sprint_r>
  4033e0:	2800      	cmp	r0, #0
  4033e2:	f47f af05 	bne.w	4031f0 <_vfprintf_r+0xb14>
  4033e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033e8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4033ea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4033ee:	e7e6      	b.n	4033be <_vfprintf_r+0xce2>
  4033f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4033f2:	460a      	mov	r2, r1
  4033f4:	3204      	adds	r2, #4
  4033f6:	680c      	ldr	r4, [r1, #0]
  4033f8:	920e      	str	r2, [sp, #56]	; 0x38
  4033fa:	2500      	movs	r5, #0
  4033fc:	f7ff ba7a 	b.w	4028f4 <_vfprintf_r+0x218>
  403400:	681c      	ldr	r4, [r3, #0]
  403402:	3304      	adds	r3, #4
  403404:	930e      	str	r3, [sp, #56]	; 0x38
  403406:	2500      	movs	r5, #0
  403408:	e426      	b.n	402c58 <_vfprintf_r+0x57c>
  40340a:	3301      	adds	r3, #1
  40340c:	4434      	add	r4, r6
  40340e:	2b07      	cmp	r3, #7
  403410:	9425      	str	r4, [sp, #148]	; 0x94
  403412:	9324      	str	r3, [sp, #144]	; 0x90
  403414:	e888 0060 	stmia.w	r8, {r5, r6}
  403418:	f77f ab63 	ble.w	402ae2 <_vfprintf_r+0x406>
  40341c:	e6d6      	b.n	4031cc <_vfprintf_r+0xaf0>
  40341e:	3204      	adds	r2, #4
  403420:	681c      	ldr	r4, [r3, #0]
  403422:	920e      	str	r2, [sp, #56]	; 0x38
  403424:	2301      	movs	r3, #1
  403426:	2500      	movs	r5, #0
  403428:	f7ff ba64 	b.w	4028f4 <_vfprintf_r+0x218>
  40342c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40342e:	6814      	ldr	r4, [r2, #0]
  403430:	4613      	mov	r3, r2
  403432:	3304      	adds	r3, #4
  403434:	17e5      	asrs	r5, r4, #31
  403436:	930e      	str	r3, [sp, #56]	; 0x38
  403438:	4622      	mov	r2, r4
  40343a:	462b      	mov	r3, r5
  40343c:	e460      	b.n	402d00 <_vfprintf_r+0x624>
  40343e:	f8dd b018 	ldr.w	fp, [sp, #24]
  403442:	f8cd b018 	str.w	fp, [sp, #24]
  403446:	af40      	add	r7, sp, #256	; 0x100
  403448:	3430      	adds	r4, #48	; 0x30
  40344a:	2301      	movs	r3, #1
  40344c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  403450:	930d      	str	r3, [sp, #52]	; 0x34
  403452:	f7ff ba6d 	b.w	402930 <_vfprintf_r+0x254>
  403456:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40345a:	f002 f895 	bl	405588 <__retarget_lock_release_recursive>
  40345e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  403462:	e5af      	b.n	402fc4 <_vfprintf_r+0x8e8>
  403464:	4614      	mov	r4, r2
  403466:	3301      	adds	r3, #1
  403468:	4434      	add	r4, r6
  40346a:	2b07      	cmp	r3, #7
  40346c:	9425      	str	r4, [sp, #148]	; 0x94
  40346e:	9324      	str	r3, [sp, #144]	; 0x90
  403470:	e888 0060 	stmia.w	r8, {r5, r6}
  403474:	f340 816d 	ble.w	403752 <_vfprintf_r+0x1076>
  403478:	aa23      	add	r2, sp, #140	; 0x8c
  40347a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40347c:	9808      	ldr	r0, [sp, #32]
  40347e:	f003 fa47 	bl	406910 <__sprint_r>
  403482:	2800      	cmp	r0, #0
  403484:	f47f aeb4 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403488:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40348a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40348e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403490:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403492:	4293      	cmp	r3, r2
  403494:	f280 8158 	bge.w	403748 <_vfprintf_r+0x106c>
  403498:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40349a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40349c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40349e:	f8c8 1000 	str.w	r1, [r8]
  4034a2:	3201      	adds	r2, #1
  4034a4:	4404      	add	r4, r0
  4034a6:	2a07      	cmp	r2, #7
  4034a8:	9425      	str	r4, [sp, #148]	; 0x94
  4034aa:	f8c8 0004 	str.w	r0, [r8, #4]
  4034ae:	9224      	str	r2, [sp, #144]	; 0x90
  4034b0:	f300 8152 	bgt.w	403758 <_vfprintf_r+0x107c>
  4034b4:	f108 0808 	add.w	r8, r8, #8
  4034b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4034ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  4034bc:	1ad3      	subs	r3, r2, r3
  4034be:	1a56      	subs	r6, r2, r1
  4034c0:	429e      	cmp	r6, r3
  4034c2:	bfa8      	it	ge
  4034c4:	461e      	movge	r6, r3
  4034c6:	2e00      	cmp	r6, #0
  4034c8:	dd0e      	ble.n	4034e8 <_vfprintf_r+0xe0c>
  4034ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4034cc:	f8c8 6004 	str.w	r6, [r8, #4]
  4034d0:	3201      	adds	r2, #1
  4034d2:	440f      	add	r7, r1
  4034d4:	4434      	add	r4, r6
  4034d6:	2a07      	cmp	r2, #7
  4034d8:	f8c8 7000 	str.w	r7, [r8]
  4034dc:	9425      	str	r4, [sp, #148]	; 0x94
  4034de:	9224      	str	r2, [sp, #144]	; 0x90
  4034e0:	f300 823c 	bgt.w	40395c <_vfprintf_r+0x1280>
  4034e4:	f108 0808 	add.w	r8, r8, #8
  4034e8:	2e00      	cmp	r6, #0
  4034ea:	bfac      	ite	ge
  4034ec:	1b9e      	subge	r6, r3, r6
  4034ee:	461e      	movlt	r6, r3
  4034f0:	2e00      	cmp	r6, #0
  4034f2:	f77f aaf8 	ble.w	402ae6 <_vfprintf_r+0x40a>
  4034f6:	2e10      	cmp	r6, #16
  4034f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4034fa:	4d3e      	ldr	r5, [pc, #248]	; (4035f4 <_vfprintf_r+0xf18>)
  4034fc:	dd85      	ble.n	40340a <_vfprintf_r+0xd2e>
  4034fe:	2710      	movs	r7, #16
  403500:	f8dd a020 	ldr.w	sl, [sp, #32]
  403504:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403508:	e005      	b.n	403516 <_vfprintf_r+0xe3a>
  40350a:	f108 0808 	add.w	r8, r8, #8
  40350e:	3e10      	subs	r6, #16
  403510:	2e10      	cmp	r6, #16
  403512:	f77f af7a 	ble.w	40340a <_vfprintf_r+0xd2e>
  403516:	3301      	adds	r3, #1
  403518:	3410      	adds	r4, #16
  40351a:	2b07      	cmp	r3, #7
  40351c:	9425      	str	r4, [sp, #148]	; 0x94
  40351e:	9324      	str	r3, [sp, #144]	; 0x90
  403520:	e888 00a0 	stmia.w	r8, {r5, r7}
  403524:	ddf1      	ble.n	40350a <_vfprintf_r+0xe2e>
  403526:	aa23      	add	r2, sp, #140	; 0x8c
  403528:	4659      	mov	r1, fp
  40352a:	4650      	mov	r0, sl
  40352c:	f003 f9f0 	bl	406910 <__sprint_r>
  403530:	2800      	cmp	r0, #0
  403532:	f040 8176 	bne.w	403822 <_vfprintf_r+0x1146>
  403536:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403538:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40353a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40353e:	e7e6      	b.n	40350e <_vfprintf_r+0xe32>
  403540:	9b06      	ldr	r3, [sp, #24]
  403542:	07d8      	lsls	r0, r3, #31
  403544:	f53f adff 	bmi.w	403146 <_vfprintf_r+0xa6a>
  403548:	3601      	adds	r6, #1
  40354a:	3401      	adds	r4, #1
  40354c:	2301      	movs	r3, #1
  40354e:	2e07      	cmp	r6, #7
  403550:	9425      	str	r4, [sp, #148]	; 0x94
  403552:	9624      	str	r6, [sp, #144]	; 0x90
  403554:	f8c8 7000 	str.w	r7, [r8]
  403558:	f8c8 3004 	str.w	r3, [r8, #4]
  40355c:	f77f ae27 	ble.w	4031ae <_vfprintf_r+0xad2>
  403560:	aa23      	add	r2, sp, #140	; 0x8c
  403562:	990a      	ldr	r1, [sp, #40]	; 0x28
  403564:	9808      	ldr	r0, [sp, #32]
  403566:	f003 f9d3 	bl	406910 <__sprint_r>
  40356a:	2800      	cmp	r0, #0
  40356c:	f47f ae40 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403570:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403572:	9e24      	ldr	r6, [sp, #144]	; 0x90
  403574:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403578:	e61b      	b.n	4031b2 <_vfprintf_r+0xad6>
  40357a:	aa23      	add	r2, sp, #140	; 0x8c
  40357c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40357e:	9808      	ldr	r0, [sp, #32]
  403580:	f003 f9c6 	bl	406910 <__sprint_r>
  403584:	2800      	cmp	r0, #0
  403586:	f47f ae33 	bne.w	4031f0 <_vfprintf_r+0xb14>
  40358a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40358c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40358e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403592:	e5e6      	b.n	403162 <_vfprintf_r+0xa86>
  403594:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403596:	3507      	adds	r5, #7
  403598:	f025 0507 	bic.w	r5, r5, #7
  40359c:	e9d5 2300 	ldrd	r2, r3, [r5]
  4035a0:	f105 0108 	add.w	r1, r5, #8
  4035a4:	910e      	str	r1, [sp, #56]	; 0x38
  4035a6:	4614      	mov	r4, r2
  4035a8:	461d      	mov	r5, r3
  4035aa:	f7ff bba9 	b.w	402d00 <_vfprintf_r+0x624>
  4035ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4035b0:	3507      	adds	r5, #7
  4035b2:	f025 0307 	bic.w	r3, r5, #7
  4035b6:	f103 0208 	add.w	r2, r3, #8
  4035ba:	920e      	str	r2, [sp, #56]	; 0x38
  4035bc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4035c0:	f7ff bb4a 	b.w	402c58 <_vfprintf_r+0x57c>
  4035c4:	3601      	adds	r6, #1
  4035c6:	443c      	add	r4, r7
  4035c8:	2e07      	cmp	r6, #7
  4035ca:	9425      	str	r4, [sp, #148]	; 0x94
  4035cc:	9624      	str	r6, [sp, #144]	; 0x90
  4035ce:	e888 00a0 	stmia.w	r8, {r5, r7}
  4035d2:	f77f adec 	ble.w	4031ae <_vfprintf_r+0xad2>
  4035d6:	e7c3      	b.n	403560 <_vfprintf_r+0xe84>
  4035d8:	aa23      	add	r2, sp, #140	; 0x8c
  4035da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4035dc:	9808      	ldr	r0, [sp, #32]
  4035de:	f003 f997 	bl	406910 <__sprint_r>
  4035e2:	2800      	cmp	r0, #0
  4035e4:	f47f ae04 	bne.w	4031f0 <_vfprintf_r+0xb14>
  4035e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4035ea:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4035ec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4035f0:	e5c6      	b.n	403180 <_vfprintf_r+0xaa4>
  4035f2:	bf00      	nop
  4035f4:	00407b6c 	.word	0x00407b6c
  4035f8:	af30      	add	r7, sp, #192	; 0xc0
  4035fa:	f7ff b999 	b.w	402930 <_vfprintf_r+0x254>
  4035fe:	aa23      	add	r2, sp, #140	; 0x8c
  403600:	990a      	ldr	r1, [sp, #40]	; 0x28
  403602:	9808      	ldr	r0, [sp, #32]
  403604:	f003 f984 	bl	406910 <__sprint_r>
  403608:	2800      	cmp	r0, #0
  40360a:	f47f adf1 	bne.w	4031f0 <_vfprintf_r+0xb14>
  40360e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403610:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403614:	f7ff ba11 	b.w	402a3a <_vfprintf_r+0x35e>
  403618:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40361c:	4264      	negs	r4, r4
  40361e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403622:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  403626:	2301      	movs	r3, #1
  403628:	f7ff b968 	b.w	4028fc <_vfprintf_r+0x220>
  40362c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40362e:	4622      	mov	r2, r4
  403630:	4620      	mov	r0, r4
  403632:	9c12      	ldr	r4, [sp, #72]	; 0x48
  403634:	4623      	mov	r3, r4
  403636:	4621      	mov	r1, r4
  403638:	f004 f86c 	bl	407714 <__aeabi_dcmpun>
  40363c:	2800      	cmp	r0, #0
  40363e:	f040 828c 	bne.w	403b5a <_vfprintf_r+0x147e>
  403642:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403644:	3301      	adds	r3, #1
  403646:	f026 0320 	bic.w	r3, r6, #32
  40364a:	930d      	str	r3, [sp, #52]	; 0x34
  40364c:	f000 8091 	beq.w	403772 <_vfprintf_r+0x1096>
  403650:	2b47      	cmp	r3, #71	; 0x47
  403652:	d104      	bne.n	40365e <_vfprintf_r+0xf82>
  403654:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403656:	2b00      	cmp	r3, #0
  403658:	bf08      	it	eq
  40365a:	2301      	moveq	r3, #1
  40365c:	9309      	str	r3, [sp, #36]	; 0x24
  40365e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  403662:	9306      	str	r3, [sp, #24]
  403664:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403666:	f1b3 0a00 	subs.w	sl, r3, #0
  40366a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40366c:	9307      	str	r3, [sp, #28]
  40366e:	bfbb      	ittet	lt
  403670:	4653      	movlt	r3, sl
  403672:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  403676:	2300      	movge	r3, #0
  403678:	232d      	movlt	r3, #45	; 0x2d
  40367a:	2e66      	cmp	r6, #102	; 0x66
  40367c:	930f      	str	r3, [sp, #60]	; 0x3c
  40367e:	f000 817f 	beq.w	403980 <_vfprintf_r+0x12a4>
  403682:	2e46      	cmp	r6, #70	; 0x46
  403684:	f000 81d4 	beq.w	403a30 <_vfprintf_r+0x1354>
  403688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40368a:	9a07      	ldr	r2, [sp, #28]
  40368c:	2b45      	cmp	r3, #69	; 0x45
  40368e:	bf0c      	ite	eq
  403690:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  403692:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  403694:	a821      	add	r0, sp, #132	; 0x84
  403696:	a91e      	add	r1, sp, #120	; 0x78
  403698:	bf08      	it	eq
  40369a:	1c5d      	addeq	r5, r3, #1
  40369c:	9004      	str	r0, [sp, #16]
  40369e:	9103      	str	r1, [sp, #12]
  4036a0:	a81d      	add	r0, sp, #116	; 0x74
  4036a2:	2102      	movs	r1, #2
  4036a4:	9002      	str	r0, [sp, #8]
  4036a6:	4653      	mov	r3, sl
  4036a8:	9501      	str	r5, [sp, #4]
  4036aa:	9100      	str	r1, [sp, #0]
  4036ac:	9808      	ldr	r0, [sp, #32]
  4036ae:	f000 fc0b 	bl	403ec8 <_dtoa_r>
  4036b2:	2e67      	cmp	r6, #103	; 0x67
  4036b4:	4607      	mov	r7, r0
  4036b6:	f040 81af 	bne.w	403a18 <_vfprintf_r+0x133c>
  4036ba:	f01b 0f01 	tst.w	fp, #1
  4036be:	f000 8213 	beq.w	403ae8 <_vfprintf_r+0x140c>
  4036c2:	197c      	adds	r4, r7, r5
  4036c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4036c6:	9807      	ldr	r0, [sp, #28]
  4036c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4036ca:	4651      	mov	r1, sl
  4036cc:	f003 fff0 	bl	4076b0 <__aeabi_dcmpeq>
  4036d0:	2800      	cmp	r0, #0
  4036d2:	f040 8132 	bne.w	40393a <_vfprintf_r+0x125e>
  4036d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4036d8:	42a3      	cmp	r3, r4
  4036da:	d206      	bcs.n	4036ea <_vfprintf_r+0x100e>
  4036dc:	2130      	movs	r1, #48	; 0x30
  4036de:	1c5a      	adds	r2, r3, #1
  4036e0:	9221      	str	r2, [sp, #132]	; 0x84
  4036e2:	7019      	strb	r1, [r3, #0]
  4036e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4036e6:	429c      	cmp	r4, r3
  4036e8:	d8f9      	bhi.n	4036de <_vfprintf_r+0x1002>
  4036ea:	1bdb      	subs	r3, r3, r7
  4036ec:	9311      	str	r3, [sp, #68]	; 0x44
  4036ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036f0:	2b47      	cmp	r3, #71	; 0x47
  4036f2:	f000 80b9 	beq.w	403868 <_vfprintf_r+0x118c>
  4036f6:	2e65      	cmp	r6, #101	; 0x65
  4036f8:	f340 8276 	ble.w	403be8 <_vfprintf_r+0x150c>
  4036fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4036fe:	9310      	str	r3, [sp, #64]	; 0x40
  403700:	2e66      	cmp	r6, #102	; 0x66
  403702:	f000 8162 	beq.w	4039ca <_vfprintf_r+0x12ee>
  403706:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403708:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40370a:	4619      	mov	r1, r3
  40370c:	4291      	cmp	r1, r2
  40370e:	f300 814f 	bgt.w	4039b0 <_vfprintf_r+0x12d4>
  403712:	f01b 0f01 	tst.w	fp, #1
  403716:	f040 8209 	bne.w	403b2c <_vfprintf_r+0x1450>
  40371a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40371e:	9307      	str	r3, [sp, #28]
  403720:	920d      	str	r2, [sp, #52]	; 0x34
  403722:	2667      	movs	r6, #103	; 0x67
  403724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403726:	2b00      	cmp	r3, #0
  403728:	f040 8096 	bne.w	403858 <_vfprintf_r+0x117c>
  40372c:	9309      	str	r3, [sp, #36]	; 0x24
  40372e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403732:	f7ff b905 	b.w	402940 <_vfprintf_r+0x264>
  403736:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40373a:	f001 ff25 	bl	405588 <__retarget_lock_release_recursive>
  40373e:	f04f 33ff 	mov.w	r3, #4294967295
  403742:	930b      	str	r3, [sp, #44]	; 0x2c
  403744:	f7ff ba30 	b.w	402ba8 <_vfprintf_r+0x4cc>
  403748:	9a06      	ldr	r2, [sp, #24]
  40374a:	07d5      	lsls	r5, r2, #31
  40374c:	f57f aeb4 	bpl.w	4034b8 <_vfprintf_r+0xddc>
  403750:	e6a2      	b.n	403498 <_vfprintf_r+0xdbc>
  403752:	f108 0808 	add.w	r8, r8, #8
  403756:	e69a      	b.n	40348e <_vfprintf_r+0xdb2>
  403758:	aa23      	add	r2, sp, #140	; 0x8c
  40375a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40375c:	9808      	ldr	r0, [sp, #32]
  40375e:	f003 f8d7 	bl	406910 <__sprint_r>
  403762:	2800      	cmp	r0, #0
  403764:	f47f ad44 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40376a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40376c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403770:	e6a2      	b.n	4034b8 <_vfprintf_r+0xddc>
  403772:	2306      	movs	r3, #6
  403774:	9309      	str	r3, [sp, #36]	; 0x24
  403776:	e772      	b.n	40365e <_vfprintf_r+0xf82>
  403778:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40377c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  403780:	f7ff bbc7 	b.w	402f12 <_vfprintf_r+0x836>
  403784:	aa23      	add	r2, sp, #140	; 0x8c
  403786:	990a      	ldr	r1, [sp, #40]	; 0x28
  403788:	9808      	ldr	r0, [sp, #32]
  40378a:	f003 f8c1 	bl	406910 <__sprint_r>
  40378e:	2800      	cmp	r0, #0
  403790:	f47f ad2e 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403794:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403798:	e437      	b.n	40300a <_vfprintf_r+0x92e>
  40379a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40379c:	4ab4      	ldr	r2, [pc, #720]	; (403a70 <_vfprintf_r+0x1394>)
  40379e:	f8c8 2000 	str.w	r2, [r8]
  4037a2:	3301      	adds	r3, #1
  4037a4:	3401      	adds	r4, #1
  4037a6:	2201      	movs	r2, #1
  4037a8:	2b07      	cmp	r3, #7
  4037aa:	9425      	str	r4, [sp, #148]	; 0x94
  4037ac:	9324      	str	r3, [sp, #144]	; 0x90
  4037ae:	f8c8 2004 	str.w	r2, [r8, #4]
  4037b2:	f300 8124 	bgt.w	4039fe <_vfprintf_r+0x1322>
  4037b6:	f108 0808 	add.w	r8, r8, #8
  4037ba:	b929      	cbnz	r1, 4037c8 <_vfprintf_r+0x10ec>
  4037bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4037be:	b91b      	cbnz	r3, 4037c8 <_vfprintf_r+0x10ec>
  4037c0:	9b06      	ldr	r3, [sp, #24]
  4037c2:	07de      	lsls	r6, r3, #31
  4037c4:	f57f a98f 	bpl.w	402ae6 <_vfprintf_r+0x40a>
  4037c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4037ca:	9814      	ldr	r0, [sp, #80]	; 0x50
  4037cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4037ce:	f8c8 2000 	str.w	r2, [r8]
  4037d2:	3301      	adds	r3, #1
  4037d4:	4602      	mov	r2, r0
  4037d6:	4422      	add	r2, r4
  4037d8:	2b07      	cmp	r3, #7
  4037da:	9225      	str	r2, [sp, #148]	; 0x94
  4037dc:	f8c8 0004 	str.w	r0, [r8, #4]
  4037e0:	9324      	str	r3, [sp, #144]	; 0x90
  4037e2:	f300 8169 	bgt.w	403ab8 <_vfprintf_r+0x13dc>
  4037e6:	f108 0808 	add.w	r8, r8, #8
  4037ea:	2900      	cmp	r1, #0
  4037ec:	f2c0 8136 	blt.w	403a5c <_vfprintf_r+0x1380>
  4037f0:	9911      	ldr	r1, [sp, #68]	; 0x44
  4037f2:	f8c8 7000 	str.w	r7, [r8]
  4037f6:	3301      	adds	r3, #1
  4037f8:	188c      	adds	r4, r1, r2
  4037fa:	2b07      	cmp	r3, #7
  4037fc:	9425      	str	r4, [sp, #148]	; 0x94
  4037fe:	9324      	str	r3, [sp, #144]	; 0x90
  403800:	f8c8 1004 	str.w	r1, [r8, #4]
  403804:	f77f a96d 	ble.w	402ae2 <_vfprintf_r+0x406>
  403808:	e4e0      	b.n	4031cc <_vfprintf_r+0xaf0>
  40380a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40380c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40380e:	6813      	ldr	r3, [r2, #0]
  403810:	17cd      	asrs	r5, r1, #31
  403812:	4608      	mov	r0, r1
  403814:	3204      	adds	r2, #4
  403816:	4629      	mov	r1, r5
  403818:	920e      	str	r2, [sp, #56]	; 0x38
  40381a:	e9c3 0100 	strd	r0, r1, [r3]
  40381e:	f7fe bfa9 	b.w	402774 <_vfprintf_r+0x98>
  403822:	46da      	mov	sl, fp
  403824:	f7ff bbc4 	b.w	402fb0 <_vfprintf_r+0x8d4>
  403828:	aa23      	add	r2, sp, #140	; 0x8c
  40382a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40382c:	9808      	ldr	r0, [sp, #32]
  40382e:	f003 f86f 	bl	406910 <__sprint_r>
  403832:	2800      	cmp	r0, #0
  403834:	f47f acdc 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403838:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40383a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40383e:	f7ff bbfd 	b.w	40303c <_vfprintf_r+0x960>
  403842:	4638      	mov	r0, r7
  403844:	9409      	str	r4, [sp, #36]	; 0x24
  403846:	f7fe fedb 	bl	402600 <strlen>
  40384a:	950e      	str	r5, [sp, #56]	; 0x38
  40384c:	900d      	str	r0, [sp, #52]	; 0x34
  40384e:	f8cd b018 	str.w	fp, [sp, #24]
  403852:	4603      	mov	r3, r0
  403854:	f7ff ba36 	b.w	402cc4 <_vfprintf_r+0x5e8>
  403858:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40385c:	2300      	movs	r3, #0
  40385e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  403862:	9309      	str	r3, [sp, #36]	; 0x24
  403864:	f7ff b86f 	b.w	402946 <_vfprintf_r+0x26a>
  403868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40386a:	9310      	str	r3, [sp, #64]	; 0x40
  40386c:	461a      	mov	r2, r3
  40386e:	3303      	adds	r3, #3
  403870:	db04      	blt.n	40387c <_vfprintf_r+0x11a0>
  403872:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403874:	4619      	mov	r1, r3
  403876:	4291      	cmp	r1, r2
  403878:	f6bf af45 	bge.w	403706 <_vfprintf_r+0x102a>
  40387c:	3e02      	subs	r6, #2
  40387e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403880:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  403884:	3b01      	subs	r3, #1
  403886:	2b00      	cmp	r3, #0
  403888:	931d      	str	r3, [sp, #116]	; 0x74
  40388a:	bfbd      	ittte	lt
  40388c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40388e:	f1c3 0301 	rsblt	r3, r3, #1
  403892:	222d      	movlt	r2, #45	; 0x2d
  403894:	222b      	movge	r2, #43	; 0x2b
  403896:	2b09      	cmp	r3, #9
  403898:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40389c:	f340 813e 	ble.w	403b1c <_vfprintf_r+0x1440>
  4038a0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  4038a4:	4620      	mov	r0, r4
  4038a6:	4d73      	ldr	r5, [pc, #460]	; (403a74 <_vfprintf_r+0x1398>)
  4038a8:	e000      	b.n	4038ac <_vfprintf_r+0x11d0>
  4038aa:	4610      	mov	r0, r2
  4038ac:	fb85 1203 	smull	r1, r2, r5, r3
  4038b0:	17d9      	asrs	r1, r3, #31
  4038b2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4038b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4038ba:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4038be:	3230      	adds	r2, #48	; 0x30
  4038c0:	2909      	cmp	r1, #9
  4038c2:	f800 2c01 	strb.w	r2, [r0, #-1]
  4038c6:	460b      	mov	r3, r1
  4038c8:	f100 32ff 	add.w	r2, r0, #4294967295
  4038cc:	dced      	bgt.n	4038aa <_vfprintf_r+0x11ce>
  4038ce:	3330      	adds	r3, #48	; 0x30
  4038d0:	3802      	subs	r0, #2
  4038d2:	b2d9      	uxtb	r1, r3
  4038d4:	4284      	cmp	r4, r0
  4038d6:	f802 1c01 	strb.w	r1, [r2, #-1]
  4038da:	f240 8190 	bls.w	403bfe <_vfprintf_r+0x1522>
  4038de:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  4038e2:	4613      	mov	r3, r2
  4038e4:	e001      	b.n	4038ea <_vfprintf_r+0x120e>
  4038e6:	f813 1b01 	ldrb.w	r1, [r3], #1
  4038ea:	f800 1b01 	strb.w	r1, [r0], #1
  4038ee:	42a3      	cmp	r3, r4
  4038f0:	d1f9      	bne.n	4038e6 <_vfprintf_r+0x120a>
  4038f2:	3301      	adds	r3, #1
  4038f4:	1a9b      	subs	r3, r3, r2
  4038f6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4038fa:	4413      	add	r3, r2
  4038fc:	aa1f      	add	r2, sp, #124	; 0x7c
  4038fe:	1a9b      	subs	r3, r3, r2
  403900:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403902:	9319      	str	r3, [sp, #100]	; 0x64
  403904:	2a01      	cmp	r2, #1
  403906:	4413      	add	r3, r2
  403908:	930d      	str	r3, [sp, #52]	; 0x34
  40390a:	f340 8145 	ble.w	403b98 <_vfprintf_r+0x14bc>
  40390e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403910:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403912:	4413      	add	r3, r2
  403914:	930d      	str	r3, [sp, #52]	; 0x34
  403916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40391a:	9307      	str	r3, [sp, #28]
  40391c:	2300      	movs	r3, #0
  40391e:	9310      	str	r3, [sp, #64]	; 0x40
  403920:	e700      	b.n	403724 <_vfprintf_r+0x1048>
  403922:	aa23      	add	r2, sp, #140	; 0x8c
  403924:	990a      	ldr	r1, [sp, #40]	; 0x28
  403926:	9808      	ldr	r0, [sp, #32]
  403928:	f002 fff2 	bl	406910 <__sprint_r>
  40392c:	2800      	cmp	r0, #0
  40392e:	f47f ac5f 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403932:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403934:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403938:	e4d1      	b.n	4032de <_vfprintf_r+0xc02>
  40393a:	4623      	mov	r3, r4
  40393c:	e6d5      	b.n	4036ea <_vfprintf_r+0x100e>
  40393e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403940:	9710      	str	r7, [sp, #64]	; 0x40
  403942:	2b06      	cmp	r3, #6
  403944:	bf28      	it	cs
  403946:	2306      	movcs	r3, #6
  403948:	9709      	str	r7, [sp, #36]	; 0x24
  40394a:	46ba      	mov	sl, r7
  40394c:	9307      	str	r3, [sp, #28]
  40394e:	950e      	str	r5, [sp, #56]	; 0x38
  403950:	f8cd b018 	str.w	fp, [sp, #24]
  403954:	930d      	str	r3, [sp, #52]	; 0x34
  403956:	4f48      	ldr	r7, [pc, #288]	; (403a78 <_vfprintf_r+0x139c>)
  403958:	f7fe bff2 	b.w	402940 <_vfprintf_r+0x264>
  40395c:	aa23      	add	r2, sp, #140	; 0x8c
  40395e:	990a      	ldr	r1, [sp, #40]	; 0x28
  403960:	9808      	ldr	r0, [sp, #32]
  403962:	f002 ffd5 	bl	406910 <__sprint_r>
  403966:	2800      	cmp	r0, #0
  403968:	f47f ac42 	bne.w	4031f0 <_vfprintf_r+0xb14>
  40396c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40396e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403970:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403972:	1ad3      	subs	r3, r2, r3
  403974:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403978:	e5b6      	b.n	4034e8 <_vfprintf_r+0xe0c>
  40397a:	46a2      	mov	sl, r4
  40397c:	f7ff bb18 	b.w	402fb0 <_vfprintf_r+0x8d4>
  403980:	a821      	add	r0, sp, #132	; 0x84
  403982:	a91e      	add	r1, sp, #120	; 0x78
  403984:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403986:	9004      	str	r0, [sp, #16]
  403988:	9103      	str	r1, [sp, #12]
  40398a:	a81d      	add	r0, sp, #116	; 0x74
  40398c:	2103      	movs	r1, #3
  40398e:	9002      	str	r0, [sp, #8]
  403990:	9a07      	ldr	r2, [sp, #28]
  403992:	9501      	str	r5, [sp, #4]
  403994:	4653      	mov	r3, sl
  403996:	9100      	str	r1, [sp, #0]
  403998:	9808      	ldr	r0, [sp, #32]
  40399a:	f000 fa95 	bl	403ec8 <_dtoa_r>
  40399e:	4607      	mov	r7, r0
  4039a0:	1944      	adds	r4, r0, r5
  4039a2:	783b      	ldrb	r3, [r7, #0]
  4039a4:	2b30      	cmp	r3, #48	; 0x30
  4039a6:	f000 80ca 	beq.w	403b3e <_vfprintf_r+0x1462>
  4039aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4039ac:	442c      	add	r4, r5
  4039ae:	e689      	b.n	4036c4 <_vfprintf_r+0xfe8>
  4039b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4039b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4039b4:	4413      	add	r3, r2
  4039b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4039b8:	930d      	str	r3, [sp, #52]	; 0x34
  4039ba:	2a00      	cmp	r2, #0
  4039bc:	f340 80e4 	ble.w	403b88 <_vfprintf_r+0x14ac>
  4039c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4039c4:	9307      	str	r3, [sp, #28]
  4039c6:	2667      	movs	r6, #103	; 0x67
  4039c8:	e6ac      	b.n	403724 <_vfprintf_r+0x1048>
  4039ca:	2b00      	cmp	r3, #0
  4039cc:	f340 80fb 	ble.w	403bc6 <_vfprintf_r+0x14ea>
  4039d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4039d2:	2a00      	cmp	r2, #0
  4039d4:	f040 80ce 	bne.w	403b74 <_vfprintf_r+0x1498>
  4039d8:	f01b 0f01 	tst.w	fp, #1
  4039dc:	f040 80ca 	bne.w	403b74 <_vfprintf_r+0x1498>
  4039e0:	9307      	str	r3, [sp, #28]
  4039e2:	930d      	str	r3, [sp, #52]	; 0x34
  4039e4:	e69e      	b.n	403724 <_vfprintf_r+0x1048>
  4039e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039e8:	9307      	str	r3, [sp, #28]
  4039ea:	930d      	str	r3, [sp, #52]	; 0x34
  4039ec:	9009      	str	r0, [sp, #36]	; 0x24
  4039ee:	950e      	str	r5, [sp, #56]	; 0x38
  4039f0:	f8cd b018 	str.w	fp, [sp, #24]
  4039f4:	9010      	str	r0, [sp, #64]	; 0x40
  4039f6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4039fa:	f7fe bfa1 	b.w	402940 <_vfprintf_r+0x264>
  4039fe:	aa23      	add	r2, sp, #140	; 0x8c
  403a00:	990a      	ldr	r1, [sp, #40]	; 0x28
  403a02:	9808      	ldr	r0, [sp, #32]
  403a04:	f002 ff84 	bl	406910 <__sprint_r>
  403a08:	2800      	cmp	r0, #0
  403a0a:	f47f abf1 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403a0e:	991d      	ldr	r1, [sp, #116]	; 0x74
  403a10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403a12:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403a16:	e6d0      	b.n	4037ba <_vfprintf_r+0x10de>
  403a18:	2e47      	cmp	r6, #71	; 0x47
  403a1a:	f47f ae52 	bne.w	4036c2 <_vfprintf_r+0xfe6>
  403a1e:	f01b 0f01 	tst.w	fp, #1
  403a22:	f000 80da 	beq.w	403bda <_vfprintf_r+0x14fe>
  403a26:	2e46      	cmp	r6, #70	; 0x46
  403a28:	eb07 0405 	add.w	r4, r7, r5
  403a2c:	d0b9      	beq.n	4039a2 <_vfprintf_r+0x12c6>
  403a2e:	e649      	b.n	4036c4 <_vfprintf_r+0xfe8>
  403a30:	a821      	add	r0, sp, #132	; 0x84
  403a32:	a91e      	add	r1, sp, #120	; 0x78
  403a34:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403a36:	9004      	str	r0, [sp, #16]
  403a38:	9103      	str	r1, [sp, #12]
  403a3a:	a81d      	add	r0, sp, #116	; 0x74
  403a3c:	2103      	movs	r1, #3
  403a3e:	9002      	str	r0, [sp, #8]
  403a40:	9a07      	ldr	r2, [sp, #28]
  403a42:	9401      	str	r4, [sp, #4]
  403a44:	4653      	mov	r3, sl
  403a46:	9100      	str	r1, [sp, #0]
  403a48:	9808      	ldr	r0, [sp, #32]
  403a4a:	f000 fa3d 	bl	403ec8 <_dtoa_r>
  403a4e:	4625      	mov	r5, r4
  403a50:	4607      	mov	r7, r0
  403a52:	e7e8      	b.n	403a26 <_vfprintf_r+0x134a>
  403a54:	2300      	movs	r3, #0
  403a56:	9309      	str	r3, [sp, #36]	; 0x24
  403a58:	f7fe bec1 	b.w	4027de <_vfprintf_r+0x102>
  403a5c:	424e      	negs	r6, r1
  403a5e:	3110      	adds	r1, #16
  403a60:	4d06      	ldr	r5, [pc, #24]	; (403a7c <_vfprintf_r+0x13a0>)
  403a62:	da43      	bge.n	403aec <_vfprintf_r+0x1410>
  403a64:	2410      	movs	r4, #16
  403a66:	f8dd a020 	ldr.w	sl, [sp, #32]
  403a6a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403a6e:	e00c      	b.n	403a8a <_vfprintf_r+0x13ae>
  403a70:	00407b58 	.word	0x00407b58
  403a74:	66666667 	.word	0x66666667
  403a78:	00407b50 	.word	0x00407b50
  403a7c:	00407b6c 	.word	0x00407b6c
  403a80:	f108 0808 	add.w	r8, r8, #8
  403a84:	3e10      	subs	r6, #16
  403a86:	2e10      	cmp	r6, #16
  403a88:	dd30      	ble.n	403aec <_vfprintf_r+0x1410>
  403a8a:	3301      	adds	r3, #1
  403a8c:	3210      	adds	r2, #16
  403a8e:	2b07      	cmp	r3, #7
  403a90:	9225      	str	r2, [sp, #148]	; 0x94
  403a92:	9324      	str	r3, [sp, #144]	; 0x90
  403a94:	f8c8 5000 	str.w	r5, [r8]
  403a98:	f8c8 4004 	str.w	r4, [r8, #4]
  403a9c:	ddf0      	ble.n	403a80 <_vfprintf_r+0x13a4>
  403a9e:	aa23      	add	r2, sp, #140	; 0x8c
  403aa0:	4659      	mov	r1, fp
  403aa2:	4650      	mov	r0, sl
  403aa4:	f002 ff34 	bl	406910 <__sprint_r>
  403aa8:	2800      	cmp	r0, #0
  403aaa:	f47f aeba 	bne.w	403822 <_vfprintf_r+0x1146>
  403aae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ab2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403ab6:	e7e5      	b.n	403a84 <_vfprintf_r+0x13a8>
  403ab8:	aa23      	add	r2, sp, #140	; 0x8c
  403aba:	990a      	ldr	r1, [sp, #40]	; 0x28
  403abc:	9808      	ldr	r0, [sp, #32]
  403abe:	f002 ff27 	bl	406910 <__sprint_r>
  403ac2:	2800      	cmp	r0, #0
  403ac4:	f47f ab94 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403ac8:	991d      	ldr	r1, [sp, #116]	; 0x74
  403aca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ace:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403ad2:	e68a      	b.n	4037ea <_vfprintf_r+0x110e>
  403ad4:	9808      	ldr	r0, [sp, #32]
  403ad6:	aa23      	add	r2, sp, #140	; 0x8c
  403ad8:	4651      	mov	r1, sl
  403ada:	f002 ff19 	bl	406910 <__sprint_r>
  403ade:	2800      	cmp	r0, #0
  403ae0:	f43f aa64 	beq.w	402fac <_vfprintf_r+0x8d0>
  403ae4:	f7ff ba64 	b.w	402fb0 <_vfprintf_r+0x8d4>
  403ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403aea:	e5fe      	b.n	4036ea <_vfprintf_r+0x100e>
  403aec:	3301      	adds	r3, #1
  403aee:	4432      	add	r2, r6
  403af0:	2b07      	cmp	r3, #7
  403af2:	e888 0060 	stmia.w	r8, {r5, r6}
  403af6:	9225      	str	r2, [sp, #148]	; 0x94
  403af8:	9324      	str	r3, [sp, #144]	; 0x90
  403afa:	f108 0808 	add.w	r8, r8, #8
  403afe:	f77f ae77 	ble.w	4037f0 <_vfprintf_r+0x1114>
  403b02:	aa23      	add	r2, sp, #140	; 0x8c
  403b04:	990a      	ldr	r1, [sp, #40]	; 0x28
  403b06:	9808      	ldr	r0, [sp, #32]
  403b08:	f002 ff02 	bl	406910 <__sprint_r>
  403b0c:	2800      	cmp	r0, #0
  403b0e:	f47f ab6f 	bne.w	4031f0 <_vfprintf_r+0xb14>
  403b12:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403b14:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b16:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403b1a:	e669      	b.n	4037f0 <_vfprintf_r+0x1114>
  403b1c:	3330      	adds	r3, #48	; 0x30
  403b1e:	2230      	movs	r2, #48	; 0x30
  403b20:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  403b24:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  403b28:	ab20      	add	r3, sp, #128	; 0x80
  403b2a:	e6e7      	b.n	4038fc <_vfprintf_r+0x1220>
  403b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403b2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403b30:	4413      	add	r3, r2
  403b32:	930d      	str	r3, [sp, #52]	; 0x34
  403b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403b38:	9307      	str	r3, [sp, #28]
  403b3a:	2667      	movs	r6, #103	; 0x67
  403b3c:	e5f2      	b.n	403724 <_vfprintf_r+0x1048>
  403b3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403b40:	9807      	ldr	r0, [sp, #28]
  403b42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403b44:	4651      	mov	r1, sl
  403b46:	f003 fdb3 	bl	4076b0 <__aeabi_dcmpeq>
  403b4a:	2800      	cmp	r0, #0
  403b4c:	f47f af2d 	bne.w	4039aa <_vfprintf_r+0x12ce>
  403b50:	f1c5 0501 	rsb	r5, r5, #1
  403b54:	951d      	str	r5, [sp, #116]	; 0x74
  403b56:	442c      	add	r4, r5
  403b58:	e5b4      	b.n	4036c4 <_vfprintf_r+0xfe8>
  403b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403b5c:	4f33      	ldr	r7, [pc, #204]	; (403c2c <_vfprintf_r+0x1550>)
  403b5e:	2b00      	cmp	r3, #0
  403b60:	bfb6      	itet	lt
  403b62:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  403b66:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  403b6a:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  403b6e:	4b30      	ldr	r3, [pc, #192]	; (403c30 <_vfprintf_r+0x1554>)
  403b70:	f7ff b9d1 	b.w	402f16 <_vfprintf_r+0x83a>
  403b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403b76:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403b78:	4413      	add	r3, r2
  403b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b7c:	441a      	add	r2, r3
  403b7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403b82:	920d      	str	r2, [sp, #52]	; 0x34
  403b84:	9307      	str	r3, [sp, #28]
  403b86:	e5cd      	b.n	403724 <_vfprintf_r+0x1048>
  403b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403b8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403b8c:	f1c3 0301 	rsb	r3, r3, #1
  403b90:	441a      	add	r2, r3
  403b92:	4613      	mov	r3, r2
  403b94:	920d      	str	r2, [sp, #52]	; 0x34
  403b96:	e713      	b.n	4039c0 <_vfprintf_r+0x12e4>
  403b98:	f01b 0301 	ands.w	r3, fp, #1
  403b9c:	9310      	str	r3, [sp, #64]	; 0x40
  403b9e:	f47f aeb6 	bne.w	40390e <_vfprintf_r+0x1232>
  403ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ba8:	9307      	str	r3, [sp, #28]
  403baa:	e5bb      	b.n	403724 <_vfprintf_r+0x1048>
  403bac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403bae:	f899 6001 	ldrb.w	r6, [r9, #1]
  403bb2:	6823      	ldr	r3, [r4, #0]
  403bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  403bb8:	9309      	str	r3, [sp, #36]	; 0x24
  403bba:	4623      	mov	r3, r4
  403bbc:	3304      	adds	r3, #4
  403bbe:	4681      	mov	r9, r0
  403bc0:	930e      	str	r3, [sp, #56]	; 0x38
  403bc2:	f7fe be0a 	b.w	4027da <_vfprintf_r+0xfe>
  403bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403bc8:	b913      	cbnz	r3, 403bd0 <_vfprintf_r+0x14f4>
  403bca:	f01b 0f01 	tst.w	fp, #1
  403bce:	d002      	beq.n	403bd6 <_vfprintf_r+0x14fa>
  403bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403bd2:	3301      	adds	r3, #1
  403bd4:	e7d1      	b.n	403b7a <_vfprintf_r+0x149e>
  403bd6:	2301      	movs	r3, #1
  403bd8:	e702      	b.n	4039e0 <_vfprintf_r+0x1304>
  403bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403bdc:	1bdb      	subs	r3, r3, r7
  403bde:	9311      	str	r3, [sp, #68]	; 0x44
  403be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403be2:	2b47      	cmp	r3, #71	; 0x47
  403be4:	f43f ae40 	beq.w	403868 <_vfprintf_r+0x118c>
  403be8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403bea:	9310      	str	r3, [sp, #64]	; 0x40
  403bec:	e647      	b.n	40387e <_vfprintf_r+0x11a2>
  403bee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403bf2:	f7ff b81d 	b.w	402c30 <_vfprintf_r+0x554>
  403bf6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403bfa:	f7ff b918 	b.w	402e2e <_vfprintf_r+0x752>
  403bfe:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  403c02:	e67b      	b.n	4038fc <_vfprintf_r+0x1220>
  403c04:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c08:	f7ff b866 	b.w	402cd8 <_vfprintf_r+0x5fc>
  403c0c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c10:	f7ff b9ac 	b.w	402f6c <_vfprintf_r+0x890>
  403c14:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c18:	f7ff b934 	b.w	402e84 <_vfprintf_r+0x7a8>
  403c1c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c20:	f7ff b8b0 	b.w	402d84 <_vfprintf_r+0x6a8>
  403c24:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c28:	f7ff b945 	b.w	402eb6 <_vfprintf_r+0x7da>
  403c2c:	00407b24 	.word	0x00407b24
  403c30:	00407b20 	.word	0x00407b20

00403c34 <__sbprintf>:
  403c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c38:	460c      	mov	r4, r1
  403c3a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403c3e:	8989      	ldrh	r1, [r1, #12]
  403c40:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403c42:	89e5      	ldrh	r5, [r4, #14]
  403c44:	9619      	str	r6, [sp, #100]	; 0x64
  403c46:	f021 0102 	bic.w	r1, r1, #2
  403c4a:	4606      	mov	r6, r0
  403c4c:	69e0      	ldr	r0, [r4, #28]
  403c4e:	f8ad 100c 	strh.w	r1, [sp, #12]
  403c52:	4617      	mov	r7, r2
  403c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403c58:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403c5a:	f8ad 500e 	strh.w	r5, [sp, #14]
  403c5e:	4698      	mov	r8, r3
  403c60:	ad1a      	add	r5, sp, #104	; 0x68
  403c62:	2300      	movs	r3, #0
  403c64:	9007      	str	r0, [sp, #28]
  403c66:	a816      	add	r0, sp, #88	; 0x58
  403c68:	9209      	str	r2, [sp, #36]	; 0x24
  403c6a:	9306      	str	r3, [sp, #24]
  403c6c:	9500      	str	r5, [sp, #0]
  403c6e:	9504      	str	r5, [sp, #16]
  403c70:	9102      	str	r1, [sp, #8]
  403c72:	9105      	str	r1, [sp, #20]
  403c74:	f001 fc82 	bl	40557c <__retarget_lock_init_recursive>
  403c78:	4643      	mov	r3, r8
  403c7a:	463a      	mov	r2, r7
  403c7c:	4669      	mov	r1, sp
  403c7e:	4630      	mov	r0, r6
  403c80:	f7fe fd2c 	bl	4026dc <_vfprintf_r>
  403c84:	1e05      	subs	r5, r0, #0
  403c86:	db07      	blt.n	403c98 <__sbprintf+0x64>
  403c88:	4630      	mov	r0, r6
  403c8a:	4669      	mov	r1, sp
  403c8c:	f001 f8e6 	bl	404e5c <_fflush_r>
  403c90:	2800      	cmp	r0, #0
  403c92:	bf18      	it	ne
  403c94:	f04f 35ff 	movne.w	r5, #4294967295
  403c98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403c9c:	065b      	lsls	r3, r3, #25
  403c9e:	d503      	bpl.n	403ca8 <__sbprintf+0x74>
  403ca0:	89a3      	ldrh	r3, [r4, #12]
  403ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ca6:	81a3      	strh	r3, [r4, #12]
  403ca8:	9816      	ldr	r0, [sp, #88]	; 0x58
  403caa:	f001 fc69 	bl	405580 <__retarget_lock_close_recursive>
  403cae:	4628      	mov	r0, r5
  403cb0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403cb8 <__swsetup_r>:
  403cb8:	b538      	push	{r3, r4, r5, lr}
  403cba:	4b30      	ldr	r3, [pc, #192]	; (403d7c <__swsetup_r+0xc4>)
  403cbc:	681b      	ldr	r3, [r3, #0]
  403cbe:	4605      	mov	r5, r0
  403cc0:	460c      	mov	r4, r1
  403cc2:	b113      	cbz	r3, 403cca <__swsetup_r+0x12>
  403cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403cc6:	2a00      	cmp	r2, #0
  403cc8:	d038      	beq.n	403d3c <__swsetup_r+0x84>
  403cca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403cce:	b293      	uxth	r3, r2
  403cd0:	0718      	lsls	r0, r3, #28
  403cd2:	d50c      	bpl.n	403cee <__swsetup_r+0x36>
  403cd4:	6920      	ldr	r0, [r4, #16]
  403cd6:	b1a8      	cbz	r0, 403d04 <__swsetup_r+0x4c>
  403cd8:	f013 0201 	ands.w	r2, r3, #1
  403cdc:	d01e      	beq.n	403d1c <__swsetup_r+0x64>
  403cde:	6963      	ldr	r3, [r4, #20]
  403ce0:	2200      	movs	r2, #0
  403ce2:	425b      	negs	r3, r3
  403ce4:	61a3      	str	r3, [r4, #24]
  403ce6:	60a2      	str	r2, [r4, #8]
  403ce8:	b1f0      	cbz	r0, 403d28 <__swsetup_r+0x70>
  403cea:	2000      	movs	r0, #0
  403cec:	bd38      	pop	{r3, r4, r5, pc}
  403cee:	06d9      	lsls	r1, r3, #27
  403cf0:	d53c      	bpl.n	403d6c <__swsetup_r+0xb4>
  403cf2:	0758      	lsls	r0, r3, #29
  403cf4:	d426      	bmi.n	403d44 <__swsetup_r+0x8c>
  403cf6:	6920      	ldr	r0, [r4, #16]
  403cf8:	f042 0308 	orr.w	r3, r2, #8
  403cfc:	81a3      	strh	r3, [r4, #12]
  403cfe:	b29b      	uxth	r3, r3
  403d00:	2800      	cmp	r0, #0
  403d02:	d1e9      	bne.n	403cd8 <__swsetup_r+0x20>
  403d04:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403d08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403d0c:	d0e4      	beq.n	403cd8 <__swsetup_r+0x20>
  403d0e:	4628      	mov	r0, r5
  403d10:	4621      	mov	r1, r4
  403d12:	f001 fc69 	bl	4055e8 <__smakebuf_r>
  403d16:	89a3      	ldrh	r3, [r4, #12]
  403d18:	6920      	ldr	r0, [r4, #16]
  403d1a:	e7dd      	b.n	403cd8 <__swsetup_r+0x20>
  403d1c:	0799      	lsls	r1, r3, #30
  403d1e:	bf58      	it	pl
  403d20:	6962      	ldrpl	r2, [r4, #20]
  403d22:	60a2      	str	r2, [r4, #8]
  403d24:	2800      	cmp	r0, #0
  403d26:	d1e0      	bne.n	403cea <__swsetup_r+0x32>
  403d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d2c:	061a      	lsls	r2, r3, #24
  403d2e:	d5dd      	bpl.n	403cec <__swsetup_r+0x34>
  403d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403d34:	81a3      	strh	r3, [r4, #12]
  403d36:	f04f 30ff 	mov.w	r0, #4294967295
  403d3a:	bd38      	pop	{r3, r4, r5, pc}
  403d3c:	4618      	mov	r0, r3
  403d3e:	f001 f8e5 	bl	404f0c <__sinit>
  403d42:	e7c2      	b.n	403cca <__swsetup_r+0x12>
  403d44:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d46:	b151      	cbz	r1, 403d5e <__swsetup_r+0xa6>
  403d48:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403d4c:	4299      	cmp	r1, r3
  403d4e:	d004      	beq.n	403d5a <__swsetup_r+0xa2>
  403d50:	4628      	mov	r0, r5
  403d52:	f001 f97d 	bl	405050 <_free_r>
  403d56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403d5a:	2300      	movs	r3, #0
  403d5c:	6323      	str	r3, [r4, #48]	; 0x30
  403d5e:	2300      	movs	r3, #0
  403d60:	6920      	ldr	r0, [r4, #16]
  403d62:	6063      	str	r3, [r4, #4]
  403d64:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403d68:	6020      	str	r0, [r4, #0]
  403d6a:	e7c5      	b.n	403cf8 <__swsetup_r+0x40>
  403d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403d70:	2309      	movs	r3, #9
  403d72:	602b      	str	r3, [r5, #0]
  403d74:	f04f 30ff 	mov.w	r0, #4294967295
  403d78:	81a2      	strh	r2, [r4, #12]
  403d7a:	bd38      	pop	{r3, r4, r5, pc}
  403d7c:	20400008 	.word	0x20400008

00403d80 <register_fini>:
  403d80:	4b02      	ldr	r3, [pc, #8]	; (403d8c <register_fini+0xc>)
  403d82:	b113      	cbz	r3, 403d8a <register_fini+0xa>
  403d84:	4802      	ldr	r0, [pc, #8]	; (403d90 <register_fini+0x10>)
  403d86:	f000 b805 	b.w	403d94 <atexit>
  403d8a:	4770      	bx	lr
  403d8c:	00000000 	.word	0x00000000
  403d90:	00404f7d 	.word	0x00404f7d

00403d94 <atexit>:
  403d94:	2300      	movs	r3, #0
  403d96:	4601      	mov	r1, r0
  403d98:	461a      	mov	r2, r3
  403d9a:	4618      	mov	r0, r3
  403d9c:	f002 bdd8 	b.w	406950 <__register_exitproc>

00403da0 <quorem>:
  403da0:	6902      	ldr	r2, [r0, #16]
  403da2:	690b      	ldr	r3, [r1, #16]
  403da4:	4293      	cmp	r3, r2
  403da6:	f300 808d 	bgt.w	403ec4 <quorem+0x124>
  403daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403dae:	f103 38ff 	add.w	r8, r3, #4294967295
  403db2:	f101 0714 	add.w	r7, r1, #20
  403db6:	f100 0b14 	add.w	fp, r0, #20
  403dba:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403dbe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403dc2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403dc6:	b083      	sub	sp, #12
  403dc8:	3201      	adds	r2, #1
  403dca:	fbb3 f9f2 	udiv	r9, r3, r2
  403dce:	eb0b 0304 	add.w	r3, fp, r4
  403dd2:	9400      	str	r4, [sp, #0]
  403dd4:	eb07 0a04 	add.w	sl, r7, r4
  403dd8:	9301      	str	r3, [sp, #4]
  403dda:	f1b9 0f00 	cmp.w	r9, #0
  403dde:	d039      	beq.n	403e54 <quorem+0xb4>
  403de0:	2500      	movs	r5, #0
  403de2:	462e      	mov	r6, r5
  403de4:	46bc      	mov	ip, r7
  403de6:	46de      	mov	lr, fp
  403de8:	f85c 4b04 	ldr.w	r4, [ip], #4
  403dec:	f8de 3000 	ldr.w	r3, [lr]
  403df0:	b2a2      	uxth	r2, r4
  403df2:	fb09 5502 	mla	r5, r9, r2, r5
  403df6:	0c22      	lsrs	r2, r4, #16
  403df8:	0c2c      	lsrs	r4, r5, #16
  403dfa:	fb09 4202 	mla	r2, r9, r2, r4
  403dfe:	b2ad      	uxth	r5, r5
  403e00:	1b75      	subs	r5, r6, r5
  403e02:	b296      	uxth	r6, r2
  403e04:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  403e08:	fa15 f383 	uxtah	r3, r5, r3
  403e0c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403e10:	b29b      	uxth	r3, r3
  403e12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403e16:	45e2      	cmp	sl, ip
  403e18:	ea4f 4512 	mov.w	r5, r2, lsr #16
  403e1c:	f84e 3b04 	str.w	r3, [lr], #4
  403e20:	ea4f 4626 	mov.w	r6, r6, asr #16
  403e24:	d2e0      	bcs.n	403de8 <quorem+0x48>
  403e26:	9b00      	ldr	r3, [sp, #0]
  403e28:	f85b 3003 	ldr.w	r3, [fp, r3]
  403e2c:	b993      	cbnz	r3, 403e54 <quorem+0xb4>
  403e2e:	9c01      	ldr	r4, [sp, #4]
  403e30:	1f23      	subs	r3, r4, #4
  403e32:	459b      	cmp	fp, r3
  403e34:	d20c      	bcs.n	403e50 <quorem+0xb0>
  403e36:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403e3a:	b94b      	cbnz	r3, 403e50 <quorem+0xb0>
  403e3c:	f1a4 0308 	sub.w	r3, r4, #8
  403e40:	e002      	b.n	403e48 <quorem+0xa8>
  403e42:	681a      	ldr	r2, [r3, #0]
  403e44:	3b04      	subs	r3, #4
  403e46:	b91a      	cbnz	r2, 403e50 <quorem+0xb0>
  403e48:	459b      	cmp	fp, r3
  403e4a:	f108 38ff 	add.w	r8, r8, #4294967295
  403e4e:	d3f8      	bcc.n	403e42 <quorem+0xa2>
  403e50:	f8c0 8010 	str.w	r8, [r0, #16]
  403e54:	4604      	mov	r4, r0
  403e56:	f002 fa23 	bl	4062a0 <__mcmp>
  403e5a:	2800      	cmp	r0, #0
  403e5c:	db2e      	blt.n	403ebc <quorem+0x11c>
  403e5e:	f109 0901 	add.w	r9, r9, #1
  403e62:	465d      	mov	r5, fp
  403e64:	2300      	movs	r3, #0
  403e66:	f857 1b04 	ldr.w	r1, [r7], #4
  403e6a:	6828      	ldr	r0, [r5, #0]
  403e6c:	b28a      	uxth	r2, r1
  403e6e:	1a9a      	subs	r2, r3, r2
  403e70:	0c0b      	lsrs	r3, r1, #16
  403e72:	fa12 f280 	uxtah	r2, r2, r0
  403e76:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  403e7a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  403e7e:	b292      	uxth	r2, r2
  403e80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403e84:	45ba      	cmp	sl, r7
  403e86:	f845 2b04 	str.w	r2, [r5], #4
  403e8a:	ea4f 4323 	mov.w	r3, r3, asr #16
  403e8e:	d2ea      	bcs.n	403e66 <quorem+0xc6>
  403e90:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403e94:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403e98:	b982      	cbnz	r2, 403ebc <quorem+0x11c>
  403e9a:	1f1a      	subs	r2, r3, #4
  403e9c:	4593      	cmp	fp, r2
  403e9e:	d20b      	bcs.n	403eb8 <quorem+0x118>
  403ea0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403ea4:	b942      	cbnz	r2, 403eb8 <quorem+0x118>
  403ea6:	3b08      	subs	r3, #8
  403ea8:	e002      	b.n	403eb0 <quorem+0x110>
  403eaa:	681a      	ldr	r2, [r3, #0]
  403eac:	3b04      	subs	r3, #4
  403eae:	b91a      	cbnz	r2, 403eb8 <quorem+0x118>
  403eb0:	459b      	cmp	fp, r3
  403eb2:	f108 38ff 	add.w	r8, r8, #4294967295
  403eb6:	d3f8      	bcc.n	403eaa <quorem+0x10a>
  403eb8:	f8c4 8010 	str.w	r8, [r4, #16]
  403ebc:	4648      	mov	r0, r9
  403ebe:	b003      	add	sp, #12
  403ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ec4:	2000      	movs	r0, #0
  403ec6:	4770      	bx	lr

00403ec8 <_dtoa_r>:
  403ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ecc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403ece:	b09b      	sub	sp, #108	; 0x6c
  403ed0:	4604      	mov	r4, r0
  403ed2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403ed4:	4692      	mov	sl, r2
  403ed6:	469b      	mov	fp, r3
  403ed8:	b141      	cbz	r1, 403eec <_dtoa_r+0x24>
  403eda:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403edc:	604a      	str	r2, [r1, #4]
  403ede:	2301      	movs	r3, #1
  403ee0:	4093      	lsls	r3, r2
  403ee2:	608b      	str	r3, [r1, #8]
  403ee4:	f002 f804 	bl	405ef0 <_Bfree>
  403ee8:	2300      	movs	r3, #0
  403eea:	6423      	str	r3, [r4, #64]	; 0x40
  403eec:	f1bb 0f00 	cmp.w	fp, #0
  403ef0:	465d      	mov	r5, fp
  403ef2:	db35      	blt.n	403f60 <_dtoa_r+0x98>
  403ef4:	2300      	movs	r3, #0
  403ef6:	6033      	str	r3, [r6, #0]
  403ef8:	4b9d      	ldr	r3, [pc, #628]	; (404170 <_dtoa_r+0x2a8>)
  403efa:	43ab      	bics	r3, r5
  403efc:	d015      	beq.n	403f2a <_dtoa_r+0x62>
  403efe:	4650      	mov	r0, sl
  403f00:	4659      	mov	r1, fp
  403f02:	2200      	movs	r2, #0
  403f04:	2300      	movs	r3, #0
  403f06:	f003 fbd3 	bl	4076b0 <__aeabi_dcmpeq>
  403f0a:	4680      	mov	r8, r0
  403f0c:	2800      	cmp	r0, #0
  403f0e:	d02d      	beq.n	403f6c <_dtoa_r+0xa4>
  403f10:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f12:	2301      	movs	r3, #1
  403f14:	6013      	str	r3, [r2, #0]
  403f16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403f18:	2b00      	cmp	r3, #0
  403f1a:	f000 80bd 	beq.w	404098 <_dtoa_r+0x1d0>
  403f1e:	4895      	ldr	r0, [pc, #596]	; (404174 <_dtoa_r+0x2ac>)
  403f20:	6018      	str	r0, [r3, #0]
  403f22:	3801      	subs	r0, #1
  403f24:	b01b      	add	sp, #108	; 0x6c
  403f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f2c:	f242 730f 	movw	r3, #9999	; 0x270f
  403f30:	6013      	str	r3, [r2, #0]
  403f32:	f1ba 0f00 	cmp.w	sl, #0
  403f36:	d10d      	bne.n	403f54 <_dtoa_r+0x8c>
  403f38:	f3c5 0513 	ubfx	r5, r5, #0, #20
  403f3c:	b955      	cbnz	r5, 403f54 <_dtoa_r+0x8c>
  403f3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403f40:	488d      	ldr	r0, [pc, #564]	; (404178 <_dtoa_r+0x2b0>)
  403f42:	2b00      	cmp	r3, #0
  403f44:	d0ee      	beq.n	403f24 <_dtoa_r+0x5c>
  403f46:	f100 0308 	add.w	r3, r0, #8
  403f4a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  403f4c:	6013      	str	r3, [r2, #0]
  403f4e:	b01b      	add	sp, #108	; 0x6c
  403f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403f56:	4889      	ldr	r0, [pc, #548]	; (40417c <_dtoa_r+0x2b4>)
  403f58:	2b00      	cmp	r3, #0
  403f5a:	d0e3      	beq.n	403f24 <_dtoa_r+0x5c>
  403f5c:	1cc3      	adds	r3, r0, #3
  403f5e:	e7f4      	b.n	403f4a <_dtoa_r+0x82>
  403f60:	2301      	movs	r3, #1
  403f62:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403f66:	6033      	str	r3, [r6, #0]
  403f68:	46ab      	mov	fp, r5
  403f6a:	e7c5      	b.n	403ef8 <_dtoa_r+0x30>
  403f6c:	aa18      	add	r2, sp, #96	; 0x60
  403f6e:	ab19      	add	r3, sp, #100	; 0x64
  403f70:	9201      	str	r2, [sp, #4]
  403f72:	9300      	str	r3, [sp, #0]
  403f74:	4652      	mov	r2, sl
  403f76:	465b      	mov	r3, fp
  403f78:	4620      	mov	r0, r4
  403f7a:	f002 fa31 	bl	4063e0 <__d2b>
  403f7e:	0d2b      	lsrs	r3, r5, #20
  403f80:	4681      	mov	r9, r0
  403f82:	d071      	beq.n	404068 <_dtoa_r+0x1a0>
  403f84:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403f88:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  403f8c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403f8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403f92:	4650      	mov	r0, sl
  403f94:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403f98:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403f9c:	2200      	movs	r2, #0
  403f9e:	4b78      	ldr	r3, [pc, #480]	; (404180 <_dtoa_r+0x2b8>)
  403fa0:	f002 ff6a 	bl	406e78 <__aeabi_dsub>
  403fa4:	a36c      	add	r3, pc, #432	; (adr r3, 404158 <_dtoa_r+0x290>)
  403fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403faa:	f003 f919 	bl	4071e0 <__aeabi_dmul>
  403fae:	a36c      	add	r3, pc, #432	; (adr r3, 404160 <_dtoa_r+0x298>)
  403fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fb4:	f002 ff62 	bl	406e7c <__adddf3>
  403fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403fbc:	4630      	mov	r0, r6
  403fbe:	f003 f8a9 	bl	407114 <__aeabi_i2d>
  403fc2:	a369      	add	r3, pc, #420	; (adr r3, 404168 <_dtoa_r+0x2a0>)
  403fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fc8:	f003 f90a 	bl	4071e0 <__aeabi_dmul>
  403fcc:	4602      	mov	r2, r0
  403fce:	460b      	mov	r3, r1
  403fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403fd4:	f002 ff52 	bl	406e7c <__adddf3>
  403fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403fdc:	f003 fbb0 	bl	407740 <__aeabi_d2iz>
  403fe0:	2200      	movs	r2, #0
  403fe2:	9002      	str	r0, [sp, #8]
  403fe4:	2300      	movs	r3, #0
  403fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403fea:	f003 fb6b 	bl	4076c4 <__aeabi_dcmplt>
  403fee:	2800      	cmp	r0, #0
  403ff0:	f040 8173 	bne.w	4042da <_dtoa_r+0x412>
  403ff4:	9d02      	ldr	r5, [sp, #8]
  403ff6:	2d16      	cmp	r5, #22
  403ff8:	f200 815d 	bhi.w	4042b6 <_dtoa_r+0x3ee>
  403ffc:	4b61      	ldr	r3, [pc, #388]	; (404184 <_dtoa_r+0x2bc>)
  403ffe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404002:	e9d3 0100 	ldrd	r0, r1, [r3]
  404006:	4652      	mov	r2, sl
  404008:	465b      	mov	r3, fp
  40400a:	f003 fb79 	bl	407700 <__aeabi_dcmpgt>
  40400e:	2800      	cmp	r0, #0
  404010:	f000 81c5 	beq.w	40439e <_dtoa_r+0x4d6>
  404014:	1e6b      	subs	r3, r5, #1
  404016:	9302      	str	r3, [sp, #8]
  404018:	2300      	movs	r3, #0
  40401a:	930e      	str	r3, [sp, #56]	; 0x38
  40401c:	1bbf      	subs	r7, r7, r6
  40401e:	1e7b      	subs	r3, r7, #1
  404020:	9306      	str	r3, [sp, #24]
  404022:	f100 8154 	bmi.w	4042ce <_dtoa_r+0x406>
  404026:	2300      	movs	r3, #0
  404028:	9308      	str	r3, [sp, #32]
  40402a:	9b02      	ldr	r3, [sp, #8]
  40402c:	2b00      	cmp	r3, #0
  40402e:	f2c0 8145 	blt.w	4042bc <_dtoa_r+0x3f4>
  404032:	9a06      	ldr	r2, [sp, #24]
  404034:	930d      	str	r3, [sp, #52]	; 0x34
  404036:	4611      	mov	r1, r2
  404038:	4419      	add	r1, r3
  40403a:	2300      	movs	r3, #0
  40403c:	9106      	str	r1, [sp, #24]
  40403e:	930c      	str	r3, [sp, #48]	; 0x30
  404040:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404042:	2b09      	cmp	r3, #9
  404044:	d82a      	bhi.n	40409c <_dtoa_r+0x1d4>
  404046:	2b05      	cmp	r3, #5
  404048:	f340 865b 	ble.w	404d02 <_dtoa_r+0xe3a>
  40404c:	3b04      	subs	r3, #4
  40404e:	9324      	str	r3, [sp, #144]	; 0x90
  404050:	2500      	movs	r5, #0
  404052:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404054:	3b02      	subs	r3, #2
  404056:	2b03      	cmp	r3, #3
  404058:	f200 8642 	bhi.w	404ce0 <_dtoa_r+0xe18>
  40405c:	e8df f013 	tbh	[pc, r3, lsl #1]
  404060:	02c903d4 	.word	0x02c903d4
  404064:	046103df 	.word	0x046103df
  404068:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40406a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40406c:	443e      	add	r6, r7
  40406e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404072:	2b20      	cmp	r3, #32
  404074:	f340 818e 	ble.w	404394 <_dtoa_r+0x4cc>
  404078:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40407c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404080:	409d      	lsls	r5, r3
  404082:	fa2a f000 	lsr.w	r0, sl, r0
  404086:	4328      	orrs	r0, r5
  404088:	f003 f834 	bl	4070f4 <__aeabi_ui2d>
  40408c:	2301      	movs	r3, #1
  40408e:	3e01      	subs	r6, #1
  404090:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404094:	9314      	str	r3, [sp, #80]	; 0x50
  404096:	e781      	b.n	403f9c <_dtoa_r+0xd4>
  404098:	483b      	ldr	r0, [pc, #236]	; (404188 <_dtoa_r+0x2c0>)
  40409a:	e743      	b.n	403f24 <_dtoa_r+0x5c>
  40409c:	2100      	movs	r1, #0
  40409e:	6461      	str	r1, [r4, #68]	; 0x44
  4040a0:	4620      	mov	r0, r4
  4040a2:	9125      	str	r1, [sp, #148]	; 0x94
  4040a4:	f001 fefe 	bl	405ea4 <_Balloc>
  4040a8:	f04f 33ff 	mov.w	r3, #4294967295
  4040ac:	930a      	str	r3, [sp, #40]	; 0x28
  4040ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4040b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4040b2:	2301      	movs	r3, #1
  4040b4:	9004      	str	r0, [sp, #16]
  4040b6:	6420      	str	r0, [r4, #64]	; 0x40
  4040b8:	9224      	str	r2, [sp, #144]	; 0x90
  4040ba:	930b      	str	r3, [sp, #44]	; 0x2c
  4040bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4040be:	2b00      	cmp	r3, #0
  4040c0:	f2c0 80d9 	blt.w	404276 <_dtoa_r+0x3ae>
  4040c4:	9a02      	ldr	r2, [sp, #8]
  4040c6:	2a0e      	cmp	r2, #14
  4040c8:	f300 80d5 	bgt.w	404276 <_dtoa_r+0x3ae>
  4040cc:	4b2d      	ldr	r3, [pc, #180]	; (404184 <_dtoa_r+0x2bc>)
  4040ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4040da:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4040dc:	2b00      	cmp	r3, #0
  4040de:	f2c0 83ba 	blt.w	404856 <_dtoa_r+0x98e>
  4040e2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4040e6:	4650      	mov	r0, sl
  4040e8:	462a      	mov	r2, r5
  4040ea:	4633      	mov	r3, r6
  4040ec:	4659      	mov	r1, fp
  4040ee:	f003 f9a1 	bl	407434 <__aeabi_ddiv>
  4040f2:	f003 fb25 	bl	407740 <__aeabi_d2iz>
  4040f6:	4680      	mov	r8, r0
  4040f8:	f003 f80c 	bl	407114 <__aeabi_i2d>
  4040fc:	462a      	mov	r2, r5
  4040fe:	4633      	mov	r3, r6
  404100:	f003 f86e 	bl	4071e0 <__aeabi_dmul>
  404104:	460b      	mov	r3, r1
  404106:	4602      	mov	r2, r0
  404108:	4659      	mov	r1, fp
  40410a:	4650      	mov	r0, sl
  40410c:	f002 feb4 	bl	406e78 <__aeabi_dsub>
  404110:	9d04      	ldr	r5, [sp, #16]
  404112:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404116:	702b      	strb	r3, [r5, #0]
  404118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40411a:	2b01      	cmp	r3, #1
  40411c:	4606      	mov	r6, r0
  40411e:	460f      	mov	r7, r1
  404120:	f105 0501 	add.w	r5, r5, #1
  404124:	d068      	beq.n	4041f8 <_dtoa_r+0x330>
  404126:	2200      	movs	r2, #0
  404128:	4b18      	ldr	r3, [pc, #96]	; (40418c <_dtoa_r+0x2c4>)
  40412a:	f003 f859 	bl	4071e0 <__aeabi_dmul>
  40412e:	2200      	movs	r2, #0
  404130:	2300      	movs	r3, #0
  404132:	4606      	mov	r6, r0
  404134:	460f      	mov	r7, r1
  404136:	f003 fabb 	bl	4076b0 <__aeabi_dcmpeq>
  40413a:	2800      	cmp	r0, #0
  40413c:	f040 8088 	bne.w	404250 <_dtoa_r+0x388>
  404140:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404144:	f04f 0a00 	mov.w	sl, #0
  404148:	f8df b040 	ldr.w	fp, [pc, #64]	; 40418c <_dtoa_r+0x2c4>
  40414c:	940c      	str	r4, [sp, #48]	; 0x30
  40414e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404152:	e028      	b.n	4041a6 <_dtoa_r+0x2de>
  404154:	f3af 8000 	nop.w
  404158:	636f4361 	.word	0x636f4361
  40415c:	3fd287a7 	.word	0x3fd287a7
  404160:	8b60c8b3 	.word	0x8b60c8b3
  404164:	3fc68a28 	.word	0x3fc68a28
  404168:	509f79fb 	.word	0x509f79fb
  40416c:	3fd34413 	.word	0x3fd34413
  404170:	7ff00000 	.word	0x7ff00000
  404174:	00407b59 	.word	0x00407b59
  404178:	00407b7c 	.word	0x00407b7c
  40417c:	00407b88 	.word	0x00407b88
  404180:	3ff80000 	.word	0x3ff80000
  404184:	00407bb8 	.word	0x00407bb8
  404188:	00407b58 	.word	0x00407b58
  40418c:	40240000 	.word	0x40240000
  404190:	f003 f826 	bl	4071e0 <__aeabi_dmul>
  404194:	2200      	movs	r2, #0
  404196:	2300      	movs	r3, #0
  404198:	4606      	mov	r6, r0
  40419a:	460f      	mov	r7, r1
  40419c:	f003 fa88 	bl	4076b0 <__aeabi_dcmpeq>
  4041a0:	2800      	cmp	r0, #0
  4041a2:	f040 83c1 	bne.w	404928 <_dtoa_r+0xa60>
  4041a6:	4642      	mov	r2, r8
  4041a8:	464b      	mov	r3, r9
  4041aa:	4630      	mov	r0, r6
  4041ac:	4639      	mov	r1, r7
  4041ae:	f003 f941 	bl	407434 <__aeabi_ddiv>
  4041b2:	f003 fac5 	bl	407740 <__aeabi_d2iz>
  4041b6:	4604      	mov	r4, r0
  4041b8:	f002 ffac 	bl	407114 <__aeabi_i2d>
  4041bc:	4642      	mov	r2, r8
  4041be:	464b      	mov	r3, r9
  4041c0:	f003 f80e 	bl	4071e0 <__aeabi_dmul>
  4041c4:	4602      	mov	r2, r0
  4041c6:	460b      	mov	r3, r1
  4041c8:	4630      	mov	r0, r6
  4041ca:	4639      	mov	r1, r7
  4041cc:	f002 fe54 	bl	406e78 <__aeabi_dsub>
  4041d0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4041d4:	9e04      	ldr	r6, [sp, #16]
  4041d6:	f805 eb01 	strb.w	lr, [r5], #1
  4041da:	eba5 0e06 	sub.w	lr, r5, r6
  4041de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4041e0:	45b6      	cmp	lr, r6
  4041e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4041e6:	4652      	mov	r2, sl
  4041e8:	465b      	mov	r3, fp
  4041ea:	d1d1      	bne.n	404190 <_dtoa_r+0x2c8>
  4041ec:	46a0      	mov	r8, r4
  4041ee:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4041f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041f4:	4606      	mov	r6, r0
  4041f6:	460f      	mov	r7, r1
  4041f8:	4632      	mov	r2, r6
  4041fa:	463b      	mov	r3, r7
  4041fc:	4630      	mov	r0, r6
  4041fe:	4639      	mov	r1, r7
  404200:	f002 fe3c 	bl	406e7c <__adddf3>
  404204:	4606      	mov	r6, r0
  404206:	460f      	mov	r7, r1
  404208:	4602      	mov	r2, r0
  40420a:	460b      	mov	r3, r1
  40420c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404210:	f003 fa58 	bl	4076c4 <__aeabi_dcmplt>
  404214:	b948      	cbnz	r0, 40422a <_dtoa_r+0x362>
  404216:	4632      	mov	r2, r6
  404218:	463b      	mov	r3, r7
  40421a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40421e:	f003 fa47 	bl	4076b0 <__aeabi_dcmpeq>
  404222:	b1a8      	cbz	r0, 404250 <_dtoa_r+0x388>
  404224:	f018 0f01 	tst.w	r8, #1
  404228:	d012      	beq.n	404250 <_dtoa_r+0x388>
  40422a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40422e:	9a04      	ldr	r2, [sp, #16]
  404230:	1e6b      	subs	r3, r5, #1
  404232:	e004      	b.n	40423e <_dtoa_r+0x376>
  404234:	429a      	cmp	r2, r3
  404236:	f000 8401 	beq.w	404a3c <_dtoa_r+0xb74>
  40423a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40423e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404242:	f103 0501 	add.w	r5, r3, #1
  404246:	d0f5      	beq.n	404234 <_dtoa_r+0x36c>
  404248:	f108 0801 	add.w	r8, r8, #1
  40424c:	f883 8000 	strb.w	r8, [r3]
  404250:	4649      	mov	r1, r9
  404252:	4620      	mov	r0, r4
  404254:	f001 fe4c 	bl	405ef0 <_Bfree>
  404258:	2200      	movs	r2, #0
  40425a:	9b02      	ldr	r3, [sp, #8]
  40425c:	702a      	strb	r2, [r5, #0]
  40425e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404260:	3301      	adds	r3, #1
  404262:	6013      	str	r3, [r2, #0]
  404264:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404266:	2b00      	cmp	r3, #0
  404268:	f000 839e 	beq.w	4049a8 <_dtoa_r+0xae0>
  40426c:	9804      	ldr	r0, [sp, #16]
  40426e:	601d      	str	r5, [r3, #0]
  404270:	b01b      	add	sp, #108	; 0x6c
  404272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404278:	2a00      	cmp	r2, #0
  40427a:	d03e      	beq.n	4042fa <_dtoa_r+0x432>
  40427c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40427e:	2a01      	cmp	r2, #1
  404280:	f340 8311 	ble.w	4048a6 <_dtoa_r+0x9de>
  404284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404288:	1e5f      	subs	r7, r3, #1
  40428a:	42ba      	cmp	r2, r7
  40428c:	f2c0 838f 	blt.w	4049ae <_dtoa_r+0xae6>
  404290:	1bd7      	subs	r7, r2, r7
  404292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404294:	2b00      	cmp	r3, #0
  404296:	f2c0 848b 	blt.w	404bb0 <_dtoa_r+0xce8>
  40429a:	9d08      	ldr	r5, [sp, #32]
  40429c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40429e:	9a08      	ldr	r2, [sp, #32]
  4042a0:	441a      	add	r2, r3
  4042a2:	9208      	str	r2, [sp, #32]
  4042a4:	9a06      	ldr	r2, [sp, #24]
  4042a6:	2101      	movs	r1, #1
  4042a8:	441a      	add	r2, r3
  4042aa:	4620      	mov	r0, r4
  4042ac:	9206      	str	r2, [sp, #24]
  4042ae:	f001 feb9 	bl	406024 <__i2b>
  4042b2:	4606      	mov	r6, r0
  4042b4:	e024      	b.n	404300 <_dtoa_r+0x438>
  4042b6:	2301      	movs	r3, #1
  4042b8:	930e      	str	r3, [sp, #56]	; 0x38
  4042ba:	e6af      	b.n	40401c <_dtoa_r+0x154>
  4042bc:	9a08      	ldr	r2, [sp, #32]
  4042be:	9b02      	ldr	r3, [sp, #8]
  4042c0:	1ad2      	subs	r2, r2, r3
  4042c2:	425b      	negs	r3, r3
  4042c4:	930c      	str	r3, [sp, #48]	; 0x30
  4042c6:	2300      	movs	r3, #0
  4042c8:	9208      	str	r2, [sp, #32]
  4042ca:	930d      	str	r3, [sp, #52]	; 0x34
  4042cc:	e6b8      	b.n	404040 <_dtoa_r+0x178>
  4042ce:	f1c7 0301 	rsb	r3, r7, #1
  4042d2:	9308      	str	r3, [sp, #32]
  4042d4:	2300      	movs	r3, #0
  4042d6:	9306      	str	r3, [sp, #24]
  4042d8:	e6a7      	b.n	40402a <_dtoa_r+0x162>
  4042da:	9d02      	ldr	r5, [sp, #8]
  4042dc:	4628      	mov	r0, r5
  4042de:	f002 ff19 	bl	407114 <__aeabi_i2d>
  4042e2:	4602      	mov	r2, r0
  4042e4:	460b      	mov	r3, r1
  4042e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4042ea:	f003 f9e1 	bl	4076b0 <__aeabi_dcmpeq>
  4042ee:	2800      	cmp	r0, #0
  4042f0:	f47f ae80 	bne.w	403ff4 <_dtoa_r+0x12c>
  4042f4:	1e6b      	subs	r3, r5, #1
  4042f6:	9302      	str	r3, [sp, #8]
  4042f8:	e67c      	b.n	403ff4 <_dtoa_r+0x12c>
  4042fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4042fc:	9d08      	ldr	r5, [sp, #32]
  4042fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404300:	2d00      	cmp	r5, #0
  404302:	dd0c      	ble.n	40431e <_dtoa_r+0x456>
  404304:	9906      	ldr	r1, [sp, #24]
  404306:	2900      	cmp	r1, #0
  404308:	460b      	mov	r3, r1
  40430a:	dd08      	ble.n	40431e <_dtoa_r+0x456>
  40430c:	42a9      	cmp	r1, r5
  40430e:	9a08      	ldr	r2, [sp, #32]
  404310:	bfa8      	it	ge
  404312:	462b      	movge	r3, r5
  404314:	1ad2      	subs	r2, r2, r3
  404316:	1aed      	subs	r5, r5, r3
  404318:	1acb      	subs	r3, r1, r3
  40431a:	9208      	str	r2, [sp, #32]
  40431c:	9306      	str	r3, [sp, #24]
  40431e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404320:	b1d3      	cbz	r3, 404358 <_dtoa_r+0x490>
  404322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404324:	2b00      	cmp	r3, #0
  404326:	f000 82b7 	beq.w	404898 <_dtoa_r+0x9d0>
  40432a:	2f00      	cmp	r7, #0
  40432c:	dd10      	ble.n	404350 <_dtoa_r+0x488>
  40432e:	4631      	mov	r1, r6
  404330:	463a      	mov	r2, r7
  404332:	4620      	mov	r0, r4
  404334:	f001 ff12 	bl	40615c <__pow5mult>
  404338:	464a      	mov	r2, r9
  40433a:	4601      	mov	r1, r0
  40433c:	4606      	mov	r6, r0
  40433e:	4620      	mov	r0, r4
  404340:	f001 fe7a 	bl	406038 <__multiply>
  404344:	4649      	mov	r1, r9
  404346:	4680      	mov	r8, r0
  404348:	4620      	mov	r0, r4
  40434a:	f001 fdd1 	bl	405ef0 <_Bfree>
  40434e:	46c1      	mov	r9, r8
  404350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404352:	1bda      	subs	r2, r3, r7
  404354:	f040 82a1 	bne.w	40489a <_dtoa_r+0x9d2>
  404358:	2101      	movs	r1, #1
  40435a:	4620      	mov	r0, r4
  40435c:	f001 fe62 	bl	406024 <__i2b>
  404360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404362:	2b00      	cmp	r3, #0
  404364:	4680      	mov	r8, r0
  404366:	dd1c      	ble.n	4043a2 <_dtoa_r+0x4da>
  404368:	4601      	mov	r1, r0
  40436a:	461a      	mov	r2, r3
  40436c:	4620      	mov	r0, r4
  40436e:	f001 fef5 	bl	40615c <__pow5mult>
  404372:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404374:	2b01      	cmp	r3, #1
  404376:	4680      	mov	r8, r0
  404378:	f340 8254 	ble.w	404824 <_dtoa_r+0x95c>
  40437c:	2300      	movs	r3, #0
  40437e:	930c      	str	r3, [sp, #48]	; 0x30
  404380:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404384:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404388:	6918      	ldr	r0, [r3, #16]
  40438a:	f001 fdfb 	bl	405f84 <__hi0bits>
  40438e:	f1c0 0020 	rsb	r0, r0, #32
  404392:	e010      	b.n	4043b6 <_dtoa_r+0x4ee>
  404394:	f1c3 0520 	rsb	r5, r3, #32
  404398:	fa0a f005 	lsl.w	r0, sl, r5
  40439c:	e674      	b.n	404088 <_dtoa_r+0x1c0>
  40439e:	900e      	str	r0, [sp, #56]	; 0x38
  4043a0:	e63c      	b.n	40401c <_dtoa_r+0x154>
  4043a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4043a4:	2b01      	cmp	r3, #1
  4043a6:	f340 8287 	ble.w	4048b8 <_dtoa_r+0x9f0>
  4043aa:	2300      	movs	r3, #0
  4043ac:	930c      	str	r3, [sp, #48]	; 0x30
  4043ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4043b0:	2001      	movs	r0, #1
  4043b2:	2b00      	cmp	r3, #0
  4043b4:	d1e4      	bne.n	404380 <_dtoa_r+0x4b8>
  4043b6:	9a06      	ldr	r2, [sp, #24]
  4043b8:	4410      	add	r0, r2
  4043ba:	f010 001f 	ands.w	r0, r0, #31
  4043be:	f000 80a1 	beq.w	404504 <_dtoa_r+0x63c>
  4043c2:	f1c0 0320 	rsb	r3, r0, #32
  4043c6:	2b04      	cmp	r3, #4
  4043c8:	f340 849e 	ble.w	404d08 <_dtoa_r+0xe40>
  4043cc:	9b08      	ldr	r3, [sp, #32]
  4043ce:	f1c0 001c 	rsb	r0, r0, #28
  4043d2:	4403      	add	r3, r0
  4043d4:	9308      	str	r3, [sp, #32]
  4043d6:	4613      	mov	r3, r2
  4043d8:	4403      	add	r3, r0
  4043da:	4405      	add	r5, r0
  4043dc:	9306      	str	r3, [sp, #24]
  4043de:	9b08      	ldr	r3, [sp, #32]
  4043e0:	2b00      	cmp	r3, #0
  4043e2:	dd05      	ble.n	4043f0 <_dtoa_r+0x528>
  4043e4:	4649      	mov	r1, r9
  4043e6:	461a      	mov	r2, r3
  4043e8:	4620      	mov	r0, r4
  4043ea:	f001 ff07 	bl	4061fc <__lshift>
  4043ee:	4681      	mov	r9, r0
  4043f0:	9b06      	ldr	r3, [sp, #24]
  4043f2:	2b00      	cmp	r3, #0
  4043f4:	dd05      	ble.n	404402 <_dtoa_r+0x53a>
  4043f6:	4641      	mov	r1, r8
  4043f8:	461a      	mov	r2, r3
  4043fa:	4620      	mov	r0, r4
  4043fc:	f001 fefe 	bl	4061fc <__lshift>
  404400:	4680      	mov	r8, r0
  404402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404404:	2b00      	cmp	r3, #0
  404406:	f040 8086 	bne.w	404516 <_dtoa_r+0x64e>
  40440a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40440c:	2b00      	cmp	r3, #0
  40440e:	f340 8266 	ble.w	4048de <_dtoa_r+0xa16>
  404412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404414:	2b00      	cmp	r3, #0
  404416:	f000 8098 	beq.w	40454a <_dtoa_r+0x682>
  40441a:	2d00      	cmp	r5, #0
  40441c:	dd05      	ble.n	40442a <_dtoa_r+0x562>
  40441e:	4631      	mov	r1, r6
  404420:	462a      	mov	r2, r5
  404422:	4620      	mov	r0, r4
  404424:	f001 feea 	bl	4061fc <__lshift>
  404428:	4606      	mov	r6, r0
  40442a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40442c:	2b00      	cmp	r3, #0
  40442e:	f040 8337 	bne.w	404aa0 <_dtoa_r+0xbd8>
  404432:	9606      	str	r6, [sp, #24]
  404434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404436:	9a04      	ldr	r2, [sp, #16]
  404438:	f8dd b018 	ldr.w	fp, [sp, #24]
  40443c:	3b01      	subs	r3, #1
  40443e:	18d3      	adds	r3, r2, r3
  404440:	930b      	str	r3, [sp, #44]	; 0x2c
  404442:	f00a 0301 	and.w	r3, sl, #1
  404446:	930c      	str	r3, [sp, #48]	; 0x30
  404448:	4617      	mov	r7, r2
  40444a:	46c2      	mov	sl, r8
  40444c:	4651      	mov	r1, sl
  40444e:	4648      	mov	r0, r9
  404450:	f7ff fca6 	bl	403da0 <quorem>
  404454:	4631      	mov	r1, r6
  404456:	4605      	mov	r5, r0
  404458:	4648      	mov	r0, r9
  40445a:	f001 ff21 	bl	4062a0 <__mcmp>
  40445e:	465a      	mov	r2, fp
  404460:	900a      	str	r0, [sp, #40]	; 0x28
  404462:	4651      	mov	r1, sl
  404464:	4620      	mov	r0, r4
  404466:	f001 ff37 	bl	4062d8 <__mdiff>
  40446a:	68c2      	ldr	r2, [r0, #12]
  40446c:	4680      	mov	r8, r0
  40446e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  404472:	2a00      	cmp	r2, #0
  404474:	f040 822b 	bne.w	4048ce <_dtoa_r+0xa06>
  404478:	4601      	mov	r1, r0
  40447a:	4648      	mov	r0, r9
  40447c:	9308      	str	r3, [sp, #32]
  40447e:	f001 ff0f 	bl	4062a0 <__mcmp>
  404482:	4641      	mov	r1, r8
  404484:	9006      	str	r0, [sp, #24]
  404486:	4620      	mov	r0, r4
  404488:	f001 fd32 	bl	405ef0 <_Bfree>
  40448c:	9a06      	ldr	r2, [sp, #24]
  40448e:	9b08      	ldr	r3, [sp, #32]
  404490:	b932      	cbnz	r2, 4044a0 <_dtoa_r+0x5d8>
  404492:	9924      	ldr	r1, [sp, #144]	; 0x90
  404494:	b921      	cbnz	r1, 4044a0 <_dtoa_r+0x5d8>
  404496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404498:	2a00      	cmp	r2, #0
  40449a:	f000 83ef 	beq.w	404c7c <_dtoa_r+0xdb4>
  40449e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4044a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4044a2:	2900      	cmp	r1, #0
  4044a4:	f2c0 829f 	blt.w	4049e6 <_dtoa_r+0xb1e>
  4044a8:	d105      	bne.n	4044b6 <_dtoa_r+0x5ee>
  4044aa:	9924      	ldr	r1, [sp, #144]	; 0x90
  4044ac:	b919      	cbnz	r1, 4044b6 <_dtoa_r+0x5ee>
  4044ae:	990c      	ldr	r1, [sp, #48]	; 0x30
  4044b0:	2900      	cmp	r1, #0
  4044b2:	f000 8298 	beq.w	4049e6 <_dtoa_r+0xb1e>
  4044b6:	2a00      	cmp	r2, #0
  4044b8:	f300 8306 	bgt.w	404ac8 <_dtoa_r+0xc00>
  4044bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4044be:	703b      	strb	r3, [r7, #0]
  4044c0:	f107 0801 	add.w	r8, r7, #1
  4044c4:	4297      	cmp	r7, r2
  4044c6:	4645      	mov	r5, r8
  4044c8:	f000 830c 	beq.w	404ae4 <_dtoa_r+0xc1c>
  4044cc:	4649      	mov	r1, r9
  4044ce:	2300      	movs	r3, #0
  4044d0:	220a      	movs	r2, #10
  4044d2:	4620      	mov	r0, r4
  4044d4:	f001 fd16 	bl	405f04 <__multadd>
  4044d8:	455e      	cmp	r6, fp
  4044da:	4681      	mov	r9, r0
  4044dc:	4631      	mov	r1, r6
  4044de:	f04f 0300 	mov.w	r3, #0
  4044e2:	f04f 020a 	mov.w	r2, #10
  4044e6:	4620      	mov	r0, r4
  4044e8:	f000 81eb 	beq.w	4048c2 <_dtoa_r+0x9fa>
  4044ec:	f001 fd0a 	bl	405f04 <__multadd>
  4044f0:	4659      	mov	r1, fp
  4044f2:	4606      	mov	r6, r0
  4044f4:	2300      	movs	r3, #0
  4044f6:	220a      	movs	r2, #10
  4044f8:	4620      	mov	r0, r4
  4044fa:	f001 fd03 	bl	405f04 <__multadd>
  4044fe:	4647      	mov	r7, r8
  404500:	4683      	mov	fp, r0
  404502:	e7a3      	b.n	40444c <_dtoa_r+0x584>
  404504:	201c      	movs	r0, #28
  404506:	9b08      	ldr	r3, [sp, #32]
  404508:	4403      	add	r3, r0
  40450a:	9308      	str	r3, [sp, #32]
  40450c:	9b06      	ldr	r3, [sp, #24]
  40450e:	4403      	add	r3, r0
  404510:	4405      	add	r5, r0
  404512:	9306      	str	r3, [sp, #24]
  404514:	e763      	b.n	4043de <_dtoa_r+0x516>
  404516:	4641      	mov	r1, r8
  404518:	4648      	mov	r0, r9
  40451a:	f001 fec1 	bl	4062a0 <__mcmp>
  40451e:	2800      	cmp	r0, #0
  404520:	f6bf af73 	bge.w	40440a <_dtoa_r+0x542>
  404524:	9f02      	ldr	r7, [sp, #8]
  404526:	4649      	mov	r1, r9
  404528:	2300      	movs	r3, #0
  40452a:	220a      	movs	r2, #10
  40452c:	4620      	mov	r0, r4
  40452e:	3f01      	subs	r7, #1
  404530:	9702      	str	r7, [sp, #8]
  404532:	f001 fce7 	bl	405f04 <__multadd>
  404536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404538:	4681      	mov	r9, r0
  40453a:	2b00      	cmp	r3, #0
  40453c:	f040 83b6 	bne.w	404cac <_dtoa_r+0xde4>
  404540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404542:	2b00      	cmp	r3, #0
  404544:	f340 83bf 	ble.w	404cc6 <_dtoa_r+0xdfe>
  404548:	930a      	str	r3, [sp, #40]	; 0x28
  40454a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40454e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404550:	465d      	mov	r5, fp
  404552:	e002      	b.n	40455a <_dtoa_r+0x692>
  404554:	f001 fcd6 	bl	405f04 <__multadd>
  404558:	4681      	mov	r9, r0
  40455a:	4641      	mov	r1, r8
  40455c:	4648      	mov	r0, r9
  40455e:	f7ff fc1f 	bl	403da0 <quorem>
  404562:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  404566:	f805 ab01 	strb.w	sl, [r5], #1
  40456a:	eba5 030b 	sub.w	r3, r5, fp
  40456e:	42bb      	cmp	r3, r7
  404570:	f04f 020a 	mov.w	r2, #10
  404574:	f04f 0300 	mov.w	r3, #0
  404578:	4649      	mov	r1, r9
  40457a:	4620      	mov	r0, r4
  40457c:	dbea      	blt.n	404554 <_dtoa_r+0x68c>
  40457e:	9b04      	ldr	r3, [sp, #16]
  404580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404582:	2a01      	cmp	r2, #1
  404584:	bfac      	ite	ge
  404586:	189b      	addge	r3, r3, r2
  404588:	3301      	addlt	r3, #1
  40458a:	461d      	mov	r5, r3
  40458c:	f04f 0b00 	mov.w	fp, #0
  404590:	4649      	mov	r1, r9
  404592:	2201      	movs	r2, #1
  404594:	4620      	mov	r0, r4
  404596:	f001 fe31 	bl	4061fc <__lshift>
  40459a:	4641      	mov	r1, r8
  40459c:	4681      	mov	r9, r0
  40459e:	f001 fe7f 	bl	4062a0 <__mcmp>
  4045a2:	2800      	cmp	r0, #0
  4045a4:	f340 823d 	ble.w	404a22 <_dtoa_r+0xb5a>
  4045a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4045ac:	9904      	ldr	r1, [sp, #16]
  4045ae:	1e6b      	subs	r3, r5, #1
  4045b0:	e004      	b.n	4045bc <_dtoa_r+0x6f4>
  4045b2:	428b      	cmp	r3, r1
  4045b4:	f000 81ae 	beq.w	404914 <_dtoa_r+0xa4c>
  4045b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4045bc:	2a39      	cmp	r2, #57	; 0x39
  4045be:	f103 0501 	add.w	r5, r3, #1
  4045c2:	d0f6      	beq.n	4045b2 <_dtoa_r+0x6ea>
  4045c4:	3201      	adds	r2, #1
  4045c6:	701a      	strb	r2, [r3, #0]
  4045c8:	4641      	mov	r1, r8
  4045ca:	4620      	mov	r0, r4
  4045cc:	f001 fc90 	bl	405ef0 <_Bfree>
  4045d0:	2e00      	cmp	r6, #0
  4045d2:	f43f ae3d 	beq.w	404250 <_dtoa_r+0x388>
  4045d6:	f1bb 0f00 	cmp.w	fp, #0
  4045da:	d005      	beq.n	4045e8 <_dtoa_r+0x720>
  4045dc:	45b3      	cmp	fp, r6
  4045de:	d003      	beq.n	4045e8 <_dtoa_r+0x720>
  4045e0:	4659      	mov	r1, fp
  4045e2:	4620      	mov	r0, r4
  4045e4:	f001 fc84 	bl	405ef0 <_Bfree>
  4045e8:	4631      	mov	r1, r6
  4045ea:	4620      	mov	r0, r4
  4045ec:	f001 fc80 	bl	405ef0 <_Bfree>
  4045f0:	e62e      	b.n	404250 <_dtoa_r+0x388>
  4045f2:	2300      	movs	r3, #0
  4045f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4045f6:	9b02      	ldr	r3, [sp, #8]
  4045f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4045fa:	4413      	add	r3, r2
  4045fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4045fe:	3301      	adds	r3, #1
  404600:	2b01      	cmp	r3, #1
  404602:	461f      	mov	r7, r3
  404604:	461e      	mov	r6, r3
  404606:	930a      	str	r3, [sp, #40]	; 0x28
  404608:	bfb8      	it	lt
  40460a:	2701      	movlt	r7, #1
  40460c:	2100      	movs	r1, #0
  40460e:	2f17      	cmp	r7, #23
  404610:	6461      	str	r1, [r4, #68]	; 0x44
  404612:	d90a      	bls.n	40462a <_dtoa_r+0x762>
  404614:	2201      	movs	r2, #1
  404616:	2304      	movs	r3, #4
  404618:	005b      	lsls	r3, r3, #1
  40461a:	f103 0014 	add.w	r0, r3, #20
  40461e:	4287      	cmp	r7, r0
  404620:	4611      	mov	r1, r2
  404622:	f102 0201 	add.w	r2, r2, #1
  404626:	d2f7      	bcs.n	404618 <_dtoa_r+0x750>
  404628:	6461      	str	r1, [r4, #68]	; 0x44
  40462a:	4620      	mov	r0, r4
  40462c:	f001 fc3a 	bl	405ea4 <_Balloc>
  404630:	2e0e      	cmp	r6, #14
  404632:	9004      	str	r0, [sp, #16]
  404634:	6420      	str	r0, [r4, #64]	; 0x40
  404636:	f63f ad41 	bhi.w	4040bc <_dtoa_r+0x1f4>
  40463a:	2d00      	cmp	r5, #0
  40463c:	f43f ad3e 	beq.w	4040bc <_dtoa_r+0x1f4>
  404640:	9902      	ldr	r1, [sp, #8]
  404642:	2900      	cmp	r1, #0
  404644:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  404648:	f340 8202 	ble.w	404a50 <_dtoa_r+0xb88>
  40464c:	4bb8      	ldr	r3, [pc, #736]	; (404930 <_dtoa_r+0xa68>)
  40464e:	f001 020f 	and.w	r2, r1, #15
  404652:	110d      	asrs	r5, r1, #4
  404654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404658:	06e9      	lsls	r1, r5, #27
  40465a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40465e:	f140 81ae 	bpl.w	4049be <_dtoa_r+0xaf6>
  404662:	4bb4      	ldr	r3, [pc, #720]	; (404934 <_dtoa_r+0xa6c>)
  404664:	4650      	mov	r0, sl
  404666:	4659      	mov	r1, fp
  404668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40466c:	f002 fee2 	bl	407434 <__aeabi_ddiv>
  404670:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  404674:	f005 050f 	and.w	r5, r5, #15
  404678:	f04f 0a03 	mov.w	sl, #3
  40467c:	b18d      	cbz	r5, 4046a2 <_dtoa_r+0x7da>
  40467e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 404934 <_dtoa_r+0xa6c>
  404682:	07ea      	lsls	r2, r5, #31
  404684:	d509      	bpl.n	40469a <_dtoa_r+0x7d2>
  404686:	4630      	mov	r0, r6
  404688:	4639      	mov	r1, r7
  40468a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40468e:	f002 fda7 	bl	4071e0 <__aeabi_dmul>
  404692:	f10a 0a01 	add.w	sl, sl, #1
  404696:	4606      	mov	r6, r0
  404698:	460f      	mov	r7, r1
  40469a:	106d      	asrs	r5, r5, #1
  40469c:	f108 0808 	add.w	r8, r8, #8
  4046a0:	d1ef      	bne.n	404682 <_dtoa_r+0x7ba>
  4046a2:	463b      	mov	r3, r7
  4046a4:	4632      	mov	r2, r6
  4046a6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4046aa:	f002 fec3 	bl	407434 <__aeabi_ddiv>
  4046ae:	4607      	mov	r7, r0
  4046b0:	4688      	mov	r8, r1
  4046b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4046b4:	b143      	cbz	r3, 4046c8 <_dtoa_r+0x800>
  4046b6:	2200      	movs	r2, #0
  4046b8:	4b9f      	ldr	r3, [pc, #636]	; (404938 <_dtoa_r+0xa70>)
  4046ba:	4638      	mov	r0, r7
  4046bc:	4641      	mov	r1, r8
  4046be:	f003 f801 	bl	4076c4 <__aeabi_dcmplt>
  4046c2:	2800      	cmp	r0, #0
  4046c4:	f040 8286 	bne.w	404bd4 <_dtoa_r+0xd0c>
  4046c8:	4650      	mov	r0, sl
  4046ca:	f002 fd23 	bl	407114 <__aeabi_i2d>
  4046ce:	463a      	mov	r2, r7
  4046d0:	4643      	mov	r3, r8
  4046d2:	f002 fd85 	bl	4071e0 <__aeabi_dmul>
  4046d6:	4b99      	ldr	r3, [pc, #612]	; (40493c <_dtoa_r+0xa74>)
  4046d8:	2200      	movs	r2, #0
  4046da:	f002 fbcf 	bl	406e7c <__adddf3>
  4046de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046e0:	4605      	mov	r5, r0
  4046e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4046e6:	2b00      	cmp	r3, #0
  4046e8:	f000 813e 	beq.w	404968 <_dtoa_r+0xaa0>
  4046ec:	9b02      	ldr	r3, [sp, #8]
  4046ee:	9315      	str	r3, [sp, #84]	; 0x54
  4046f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046f2:	9312      	str	r3, [sp, #72]	; 0x48
  4046f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4046f6:	2b00      	cmp	r3, #0
  4046f8:	f000 81fa 	beq.w	404af0 <_dtoa_r+0xc28>
  4046fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4046fe:	4b8c      	ldr	r3, [pc, #560]	; (404930 <_dtoa_r+0xa68>)
  404700:	498f      	ldr	r1, [pc, #572]	; (404940 <_dtoa_r+0xa78>)
  404702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404706:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40470a:	2000      	movs	r0, #0
  40470c:	f002 fe92 	bl	407434 <__aeabi_ddiv>
  404710:	462a      	mov	r2, r5
  404712:	4633      	mov	r3, r6
  404714:	f002 fbb0 	bl	406e78 <__aeabi_dsub>
  404718:	4682      	mov	sl, r0
  40471a:	468b      	mov	fp, r1
  40471c:	4638      	mov	r0, r7
  40471e:	4641      	mov	r1, r8
  404720:	f003 f80e 	bl	407740 <__aeabi_d2iz>
  404724:	4605      	mov	r5, r0
  404726:	f002 fcf5 	bl	407114 <__aeabi_i2d>
  40472a:	4602      	mov	r2, r0
  40472c:	460b      	mov	r3, r1
  40472e:	4638      	mov	r0, r7
  404730:	4641      	mov	r1, r8
  404732:	f002 fba1 	bl	406e78 <__aeabi_dsub>
  404736:	3530      	adds	r5, #48	; 0x30
  404738:	fa5f f885 	uxtb.w	r8, r5
  40473c:	9d04      	ldr	r5, [sp, #16]
  40473e:	4606      	mov	r6, r0
  404740:	460f      	mov	r7, r1
  404742:	f885 8000 	strb.w	r8, [r5]
  404746:	4602      	mov	r2, r0
  404748:	460b      	mov	r3, r1
  40474a:	4650      	mov	r0, sl
  40474c:	4659      	mov	r1, fp
  40474e:	3501      	adds	r5, #1
  404750:	f002 ffd6 	bl	407700 <__aeabi_dcmpgt>
  404754:	2800      	cmp	r0, #0
  404756:	d154      	bne.n	404802 <_dtoa_r+0x93a>
  404758:	4632      	mov	r2, r6
  40475a:	463b      	mov	r3, r7
  40475c:	2000      	movs	r0, #0
  40475e:	4976      	ldr	r1, [pc, #472]	; (404938 <_dtoa_r+0xa70>)
  404760:	f002 fb8a 	bl	406e78 <__aeabi_dsub>
  404764:	4602      	mov	r2, r0
  404766:	460b      	mov	r3, r1
  404768:	4650      	mov	r0, sl
  40476a:	4659      	mov	r1, fp
  40476c:	f002 ffc8 	bl	407700 <__aeabi_dcmpgt>
  404770:	2800      	cmp	r0, #0
  404772:	f040 8270 	bne.w	404c56 <_dtoa_r+0xd8e>
  404776:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404778:	2a01      	cmp	r2, #1
  40477a:	f000 8111 	beq.w	4049a0 <_dtoa_r+0xad8>
  40477e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404780:	9a04      	ldr	r2, [sp, #16]
  404782:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404786:	4413      	add	r3, r2
  404788:	4699      	mov	r9, r3
  40478a:	e00d      	b.n	4047a8 <_dtoa_r+0x8e0>
  40478c:	2000      	movs	r0, #0
  40478e:	496a      	ldr	r1, [pc, #424]	; (404938 <_dtoa_r+0xa70>)
  404790:	f002 fb72 	bl	406e78 <__aeabi_dsub>
  404794:	4652      	mov	r2, sl
  404796:	465b      	mov	r3, fp
  404798:	f002 ff94 	bl	4076c4 <__aeabi_dcmplt>
  40479c:	2800      	cmp	r0, #0
  40479e:	f040 8258 	bne.w	404c52 <_dtoa_r+0xd8a>
  4047a2:	454d      	cmp	r5, r9
  4047a4:	f000 80fa 	beq.w	40499c <_dtoa_r+0xad4>
  4047a8:	4650      	mov	r0, sl
  4047aa:	4659      	mov	r1, fp
  4047ac:	2200      	movs	r2, #0
  4047ae:	4b65      	ldr	r3, [pc, #404]	; (404944 <_dtoa_r+0xa7c>)
  4047b0:	f002 fd16 	bl	4071e0 <__aeabi_dmul>
  4047b4:	2200      	movs	r2, #0
  4047b6:	4b63      	ldr	r3, [pc, #396]	; (404944 <_dtoa_r+0xa7c>)
  4047b8:	4682      	mov	sl, r0
  4047ba:	468b      	mov	fp, r1
  4047bc:	4630      	mov	r0, r6
  4047be:	4639      	mov	r1, r7
  4047c0:	f002 fd0e 	bl	4071e0 <__aeabi_dmul>
  4047c4:	460f      	mov	r7, r1
  4047c6:	4606      	mov	r6, r0
  4047c8:	f002 ffba 	bl	407740 <__aeabi_d2iz>
  4047cc:	4680      	mov	r8, r0
  4047ce:	f002 fca1 	bl	407114 <__aeabi_i2d>
  4047d2:	4602      	mov	r2, r0
  4047d4:	460b      	mov	r3, r1
  4047d6:	4630      	mov	r0, r6
  4047d8:	4639      	mov	r1, r7
  4047da:	f002 fb4d 	bl	406e78 <__aeabi_dsub>
  4047de:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4047e2:	fa5f f888 	uxtb.w	r8, r8
  4047e6:	4652      	mov	r2, sl
  4047e8:	465b      	mov	r3, fp
  4047ea:	f805 8b01 	strb.w	r8, [r5], #1
  4047ee:	4606      	mov	r6, r0
  4047f0:	460f      	mov	r7, r1
  4047f2:	f002 ff67 	bl	4076c4 <__aeabi_dcmplt>
  4047f6:	4632      	mov	r2, r6
  4047f8:	463b      	mov	r3, r7
  4047fa:	2800      	cmp	r0, #0
  4047fc:	d0c6      	beq.n	40478c <_dtoa_r+0x8c4>
  4047fe:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404802:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404804:	9302      	str	r3, [sp, #8]
  404806:	e523      	b.n	404250 <_dtoa_r+0x388>
  404808:	2300      	movs	r3, #0
  40480a:	930b      	str	r3, [sp, #44]	; 0x2c
  40480c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40480e:	2b00      	cmp	r3, #0
  404810:	f340 80dc 	ble.w	4049cc <_dtoa_r+0xb04>
  404814:	461f      	mov	r7, r3
  404816:	461e      	mov	r6, r3
  404818:	930f      	str	r3, [sp, #60]	; 0x3c
  40481a:	930a      	str	r3, [sp, #40]	; 0x28
  40481c:	e6f6      	b.n	40460c <_dtoa_r+0x744>
  40481e:	2301      	movs	r3, #1
  404820:	930b      	str	r3, [sp, #44]	; 0x2c
  404822:	e7f3      	b.n	40480c <_dtoa_r+0x944>
  404824:	f1ba 0f00 	cmp.w	sl, #0
  404828:	f47f ada8 	bne.w	40437c <_dtoa_r+0x4b4>
  40482c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404830:	2b00      	cmp	r3, #0
  404832:	f47f adba 	bne.w	4043aa <_dtoa_r+0x4e2>
  404836:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40483a:	0d3f      	lsrs	r7, r7, #20
  40483c:	053f      	lsls	r7, r7, #20
  40483e:	2f00      	cmp	r7, #0
  404840:	f000 820d 	beq.w	404c5e <_dtoa_r+0xd96>
  404844:	9b08      	ldr	r3, [sp, #32]
  404846:	3301      	adds	r3, #1
  404848:	9308      	str	r3, [sp, #32]
  40484a:	9b06      	ldr	r3, [sp, #24]
  40484c:	3301      	adds	r3, #1
  40484e:	9306      	str	r3, [sp, #24]
  404850:	2301      	movs	r3, #1
  404852:	930c      	str	r3, [sp, #48]	; 0x30
  404854:	e5ab      	b.n	4043ae <_dtoa_r+0x4e6>
  404856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404858:	2b00      	cmp	r3, #0
  40485a:	f73f ac42 	bgt.w	4040e2 <_dtoa_r+0x21a>
  40485e:	f040 8221 	bne.w	404ca4 <_dtoa_r+0xddc>
  404862:	2200      	movs	r2, #0
  404864:	4b38      	ldr	r3, [pc, #224]	; (404948 <_dtoa_r+0xa80>)
  404866:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40486a:	f002 fcb9 	bl	4071e0 <__aeabi_dmul>
  40486e:	4652      	mov	r2, sl
  404870:	465b      	mov	r3, fp
  404872:	f002 ff3b 	bl	4076ec <__aeabi_dcmpge>
  404876:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40487a:	4646      	mov	r6, r8
  40487c:	2800      	cmp	r0, #0
  40487e:	d041      	beq.n	404904 <_dtoa_r+0xa3c>
  404880:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404882:	9d04      	ldr	r5, [sp, #16]
  404884:	43db      	mvns	r3, r3
  404886:	9302      	str	r3, [sp, #8]
  404888:	4641      	mov	r1, r8
  40488a:	4620      	mov	r0, r4
  40488c:	f001 fb30 	bl	405ef0 <_Bfree>
  404890:	2e00      	cmp	r6, #0
  404892:	f43f acdd 	beq.w	404250 <_dtoa_r+0x388>
  404896:	e6a7      	b.n	4045e8 <_dtoa_r+0x720>
  404898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40489a:	4649      	mov	r1, r9
  40489c:	4620      	mov	r0, r4
  40489e:	f001 fc5d 	bl	40615c <__pow5mult>
  4048a2:	4681      	mov	r9, r0
  4048a4:	e558      	b.n	404358 <_dtoa_r+0x490>
  4048a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4048a8:	2a00      	cmp	r2, #0
  4048aa:	f000 8187 	beq.w	404bbc <_dtoa_r+0xcf4>
  4048ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4048b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4048b4:	9d08      	ldr	r5, [sp, #32]
  4048b6:	e4f2      	b.n	40429e <_dtoa_r+0x3d6>
  4048b8:	f1ba 0f00 	cmp.w	sl, #0
  4048bc:	f47f ad75 	bne.w	4043aa <_dtoa_r+0x4e2>
  4048c0:	e7b4      	b.n	40482c <_dtoa_r+0x964>
  4048c2:	f001 fb1f 	bl	405f04 <__multadd>
  4048c6:	4647      	mov	r7, r8
  4048c8:	4606      	mov	r6, r0
  4048ca:	4683      	mov	fp, r0
  4048cc:	e5be      	b.n	40444c <_dtoa_r+0x584>
  4048ce:	4601      	mov	r1, r0
  4048d0:	4620      	mov	r0, r4
  4048d2:	9306      	str	r3, [sp, #24]
  4048d4:	f001 fb0c 	bl	405ef0 <_Bfree>
  4048d8:	2201      	movs	r2, #1
  4048da:	9b06      	ldr	r3, [sp, #24]
  4048dc:	e5e0      	b.n	4044a0 <_dtoa_r+0x5d8>
  4048de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048e0:	2b02      	cmp	r3, #2
  4048e2:	f77f ad96 	ble.w	404412 <_dtoa_r+0x54a>
  4048e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048e8:	2b00      	cmp	r3, #0
  4048ea:	d1c9      	bne.n	404880 <_dtoa_r+0x9b8>
  4048ec:	4641      	mov	r1, r8
  4048ee:	2205      	movs	r2, #5
  4048f0:	4620      	mov	r0, r4
  4048f2:	f001 fb07 	bl	405f04 <__multadd>
  4048f6:	4601      	mov	r1, r0
  4048f8:	4680      	mov	r8, r0
  4048fa:	4648      	mov	r0, r9
  4048fc:	f001 fcd0 	bl	4062a0 <__mcmp>
  404900:	2800      	cmp	r0, #0
  404902:	ddbd      	ble.n	404880 <_dtoa_r+0x9b8>
  404904:	9a02      	ldr	r2, [sp, #8]
  404906:	9904      	ldr	r1, [sp, #16]
  404908:	2331      	movs	r3, #49	; 0x31
  40490a:	3201      	adds	r2, #1
  40490c:	9202      	str	r2, [sp, #8]
  40490e:	700b      	strb	r3, [r1, #0]
  404910:	1c4d      	adds	r5, r1, #1
  404912:	e7b9      	b.n	404888 <_dtoa_r+0x9c0>
  404914:	9a02      	ldr	r2, [sp, #8]
  404916:	3201      	adds	r2, #1
  404918:	9202      	str	r2, [sp, #8]
  40491a:	9a04      	ldr	r2, [sp, #16]
  40491c:	2331      	movs	r3, #49	; 0x31
  40491e:	7013      	strb	r3, [r2, #0]
  404920:	e652      	b.n	4045c8 <_dtoa_r+0x700>
  404922:	2301      	movs	r3, #1
  404924:	930b      	str	r3, [sp, #44]	; 0x2c
  404926:	e666      	b.n	4045f6 <_dtoa_r+0x72e>
  404928:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40492c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40492e:	e48f      	b.n	404250 <_dtoa_r+0x388>
  404930:	00407bb8 	.word	0x00407bb8
  404934:	00407b90 	.word	0x00407b90
  404938:	3ff00000 	.word	0x3ff00000
  40493c:	401c0000 	.word	0x401c0000
  404940:	3fe00000 	.word	0x3fe00000
  404944:	40240000 	.word	0x40240000
  404948:	40140000 	.word	0x40140000
  40494c:	4650      	mov	r0, sl
  40494e:	f002 fbe1 	bl	407114 <__aeabi_i2d>
  404952:	463a      	mov	r2, r7
  404954:	4643      	mov	r3, r8
  404956:	f002 fc43 	bl	4071e0 <__aeabi_dmul>
  40495a:	2200      	movs	r2, #0
  40495c:	4bc1      	ldr	r3, [pc, #772]	; (404c64 <_dtoa_r+0xd9c>)
  40495e:	f002 fa8d 	bl	406e7c <__adddf3>
  404962:	4605      	mov	r5, r0
  404964:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404968:	4641      	mov	r1, r8
  40496a:	2200      	movs	r2, #0
  40496c:	4bbe      	ldr	r3, [pc, #760]	; (404c68 <_dtoa_r+0xda0>)
  40496e:	4638      	mov	r0, r7
  404970:	f002 fa82 	bl	406e78 <__aeabi_dsub>
  404974:	462a      	mov	r2, r5
  404976:	4633      	mov	r3, r6
  404978:	4682      	mov	sl, r0
  40497a:	468b      	mov	fp, r1
  40497c:	f002 fec0 	bl	407700 <__aeabi_dcmpgt>
  404980:	4680      	mov	r8, r0
  404982:	2800      	cmp	r0, #0
  404984:	f040 8110 	bne.w	404ba8 <_dtoa_r+0xce0>
  404988:	462a      	mov	r2, r5
  40498a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40498e:	4650      	mov	r0, sl
  404990:	4659      	mov	r1, fp
  404992:	f002 fe97 	bl	4076c4 <__aeabi_dcmplt>
  404996:	b118      	cbz	r0, 4049a0 <_dtoa_r+0xad8>
  404998:	4646      	mov	r6, r8
  40499a:	e771      	b.n	404880 <_dtoa_r+0x9b8>
  40499c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4049a0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4049a4:	f7ff bb8a 	b.w	4040bc <_dtoa_r+0x1f4>
  4049a8:	9804      	ldr	r0, [sp, #16]
  4049aa:	f7ff babb 	b.w	403f24 <_dtoa_r+0x5c>
  4049ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4049b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4049b2:	970c      	str	r7, [sp, #48]	; 0x30
  4049b4:	1afb      	subs	r3, r7, r3
  4049b6:	441a      	add	r2, r3
  4049b8:	920d      	str	r2, [sp, #52]	; 0x34
  4049ba:	2700      	movs	r7, #0
  4049bc:	e469      	b.n	404292 <_dtoa_r+0x3ca>
  4049be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4049c2:	f04f 0a02 	mov.w	sl, #2
  4049c6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4049ca:	e657      	b.n	40467c <_dtoa_r+0x7b4>
  4049cc:	2100      	movs	r1, #0
  4049ce:	2301      	movs	r3, #1
  4049d0:	6461      	str	r1, [r4, #68]	; 0x44
  4049d2:	4620      	mov	r0, r4
  4049d4:	9325      	str	r3, [sp, #148]	; 0x94
  4049d6:	f001 fa65 	bl	405ea4 <_Balloc>
  4049da:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4049dc:	9004      	str	r0, [sp, #16]
  4049de:	6420      	str	r0, [r4, #64]	; 0x40
  4049e0:	930a      	str	r3, [sp, #40]	; 0x28
  4049e2:	930f      	str	r3, [sp, #60]	; 0x3c
  4049e4:	e629      	b.n	40463a <_dtoa_r+0x772>
  4049e6:	2a00      	cmp	r2, #0
  4049e8:	46d0      	mov	r8, sl
  4049ea:	f8cd b018 	str.w	fp, [sp, #24]
  4049ee:	469a      	mov	sl, r3
  4049f0:	dd11      	ble.n	404a16 <_dtoa_r+0xb4e>
  4049f2:	4649      	mov	r1, r9
  4049f4:	2201      	movs	r2, #1
  4049f6:	4620      	mov	r0, r4
  4049f8:	f001 fc00 	bl	4061fc <__lshift>
  4049fc:	4641      	mov	r1, r8
  4049fe:	4681      	mov	r9, r0
  404a00:	f001 fc4e 	bl	4062a0 <__mcmp>
  404a04:	2800      	cmp	r0, #0
  404a06:	f340 8146 	ble.w	404c96 <_dtoa_r+0xdce>
  404a0a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404a0e:	f000 8106 	beq.w	404c1e <_dtoa_r+0xd56>
  404a12:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404a16:	46b3      	mov	fp, r6
  404a18:	f887 a000 	strb.w	sl, [r7]
  404a1c:	1c7d      	adds	r5, r7, #1
  404a1e:	9e06      	ldr	r6, [sp, #24]
  404a20:	e5d2      	b.n	4045c8 <_dtoa_r+0x700>
  404a22:	d104      	bne.n	404a2e <_dtoa_r+0xb66>
  404a24:	f01a 0f01 	tst.w	sl, #1
  404a28:	d001      	beq.n	404a2e <_dtoa_r+0xb66>
  404a2a:	e5bd      	b.n	4045a8 <_dtoa_r+0x6e0>
  404a2c:	4615      	mov	r5, r2
  404a2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404a32:	2b30      	cmp	r3, #48	; 0x30
  404a34:	f105 32ff 	add.w	r2, r5, #4294967295
  404a38:	d0f8      	beq.n	404a2c <_dtoa_r+0xb64>
  404a3a:	e5c5      	b.n	4045c8 <_dtoa_r+0x700>
  404a3c:	9904      	ldr	r1, [sp, #16]
  404a3e:	2230      	movs	r2, #48	; 0x30
  404a40:	700a      	strb	r2, [r1, #0]
  404a42:	9a02      	ldr	r2, [sp, #8]
  404a44:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404a48:	3201      	adds	r2, #1
  404a4a:	9202      	str	r2, [sp, #8]
  404a4c:	f7ff bbfc 	b.w	404248 <_dtoa_r+0x380>
  404a50:	f000 80bb 	beq.w	404bca <_dtoa_r+0xd02>
  404a54:	9b02      	ldr	r3, [sp, #8]
  404a56:	425d      	negs	r5, r3
  404a58:	4b84      	ldr	r3, [pc, #528]	; (404c6c <_dtoa_r+0xda4>)
  404a5a:	f005 020f 	and.w	r2, r5, #15
  404a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404a6a:	f002 fbb9 	bl	4071e0 <__aeabi_dmul>
  404a6e:	112d      	asrs	r5, r5, #4
  404a70:	4607      	mov	r7, r0
  404a72:	4688      	mov	r8, r1
  404a74:	f000 812c 	beq.w	404cd0 <_dtoa_r+0xe08>
  404a78:	4e7d      	ldr	r6, [pc, #500]	; (404c70 <_dtoa_r+0xda8>)
  404a7a:	f04f 0a02 	mov.w	sl, #2
  404a7e:	07eb      	lsls	r3, r5, #31
  404a80:	d509      	bpl.n	404a96 <_dtoa_r+0xbce>
  404a82:	4638      	mov	r0, r7
  404a84:	4641      	mov	r1, r8
  404a86:	e9d6 2300 	ldrd	r2, r3, [r6]
  404a8a:	f002 fba9 	bl	4071e0 <__aeabi_dmul>
  404a8e:	f10a 0a01 	add.w	sl, sl, #1
  404a92:	4607      	mov	r7, r0
  404a94:	4688      	mov	r8, r1
  404a96:	106d      	asrs	r5, r5, #1
  404a98:	f106 0608 	add.w	r6, r6, #8
  404a9c:	d1ef      	bne.n	404a7e <_dtoa_r+0xbb6>
  404a9e:	e608      	b.n	4046b2 <_dtoa_r+0x7ea>
  404aa0:	6871      	ldr	r1, [r6, #4]
  404aa2:	4620      	mov	r0, r4
  404aa4:	f001 f9fe 	bl	405ea4 <_Balloc>
  404aa8:	6933      	ldr	r3, [r6, #16]
  404aaa:	3302      	adds	r3, #2
  404aac:	009a      	lsls	r2, r3, #2
  404aae:	4605      	mov	r5, r0
  404ab0:	f106 010c 	add.w	r1, r6, #12
  404ab4:	300c      	adds	r0, #12
  404ab6:	f001 f8eb 	bl	405c90 <memcpy>
  404aba:	4629      	mov	r1, r5
  404abc:	2201      	movs	r2, #1
  404abe:	4620      	mov	r0, r4
  404ac0:	f001 fb9c 	bl	4061fc <__lshift>
  404ac4:	9006      	str	r0, [sp, #24]
  404ac6:	e4b5      	b.n	404434 <_dtoa_r+0x56c>
  404ac8:	2b39      	cmp	r3, #57	; 0x39
  404aca:	f8cd b018 	str.w	fp, [sp, #24]
  404ace:	46d0      	mov	r8, sl
  404ad0:	f000 80a5 	beq.w	404c1e <_dtoa_r+0xd56>
  404ad4:	f103 0a01 	add.w	sl, r3, #1
  404ad8:	46b3      	mov	fp, r6
  404ada:	f887 a000 	strb.w	sl, [r7]
  404ade:	1c7d      	adds	r5, r7, #1
  404ae0:	9e06      	ldr	r6, [sp, #24]
  404ae2:	e571      	b.n	4045c8 <_dtoa_r+0x700>
  404ae4:	465a      	mov	r2, fp
  404ae6:	46d0      	mov	r8, sl
  404ae8:	46b3      	mov	fp, r6
  404aea:	469a      	mov	sl, r3
  404aec:	4616      	mov	r6, r2
  404aee:	e54f      	b.n	404590 <_dtoa_r+0x6c8>
  404af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404af2:	495e      	ldr	r1, [pc, #376]	; (404c6c <_dtoa_r+0xda4>)
  404af4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404af8:	462a      	mov	r2, r5
  404afa:	4633      	mov	r3, r6
  404afc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404b00:	f002 fb6e 	bl	4071e0 <__aeabi_dmul>
  404b04:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404b08:	4638      	mov	r0, r7
  404b0a:	4641      	mov	r1, r8
  404b0c:	f002 fe18 	bl	407740 <__aeabi_d2iz>
  404b10:	4605      	mov	r5, r0
  404b12:	f002 faff 	bl	407114 <__aeabi_i2d>
  404b16:	460b      	mov	r3, r1
  404b18:	4602      	mov	r2, r0
  404b1a:	4641      	mov	r1, r8
  404b1c:	4638      	mov	r0, r7
  404b1e:	f002 f9ab 	bl	406e78 <__aeabi_dsub>
  404b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b24:	460f      	mov	r7, r1
  404b26:	9904      	ldr	r1, [sp, #16]
  404b28:	3530      	adds	r5, #48	; 0x30
  404b2a:	2b01      	cmp	r3, #1
  404b2c:	700d      	strb	r5, [r1, #0]
  404b2e:	4606      	mov	r6, r0
  404b30:	f101 0501 	add.w	r5, r1, #1
  404b34:	d026      	beq.n	404b84 <_dtoa_r+0xcbc>
  404b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b38:	9a04      	ldr	r2, [sp, #16]
  404b3a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404c78 <_dtoa_r+0xdb0>
  404b3e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404b42:	4413      	add	r3, r2
  404b44:	f04f 0a00 	mov.w	sl, #0
  404b48:	4699      	mov	r9, r3
  404b4a:	4652      	mov	r2, sl
  404b4c:	465b      	mov	r3, fp
  404b4e:	4630      	mov	r0, r6
  404b50:	4639      	mov	r1, r7
  404b52:	f002 fb45 	bl	4071e0 <__aeabi_dmul>
  404b56:	460f      	mov	r7, r1
  404b58:	4606      	mov	r6, r0
  404b5a:	f002 fdf1 	bl	407740 <__aeabi_d2iz>
  404b5e:	4680      	mov	r8, r0
  404b60:	f002 fad8 	bl	407114 <__aeabi_i2d>
  404b64:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404b68:	4602      	mov	r2, r0
  404b6a:	460b      	mov	r3, r1
  404b6c:	4630      	mov	r0, r6
  404b6e:	4639      	mov	r1, r7
  404b70:	f002 f982 	bl	406e78 <__aeabi_dsub>
  404b74:	f805 8b01 	strb.w	r8, [r5], #1
  404b78:	454d      	cmp	r5, r9
  404b7a:	4606      	mov	r6, r0
  404b7c:	460f      	mov	r7, r1
  404b7e:	d1e4      	bne.n	404b4a <_dtoa_r+0xc82>
  404b80:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404b84:	4b3b      	ldr	r3, [pc, #236]	; (404c74 <_dtoa_r+0xdac>)
  404b86:	2200      	movs	r2, #0
  404b88:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404b8c:	f002 f976 	bl	406e7c <__adddf3>
  404b90:	4632      	mov	r2, r6
  404b92:	463b      	mov	r3, r7
  404b94:	f002 fd96 	bl	4076c4 <__aeabi_dcmplt>
  404b98:	2800      	cmp	r0, #0
  404b9a:	d046      	beq.n	404c2a <_dtoa_r+0xd62>
  404b9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404b9e:	9302      	str	r3, [sp, #8]
  404ba0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404ba4:	f7ff bb43 	b.w	40422e <_dtoa_r+0x366>
  404ba8:	f04f 0800 	mov.w	r8, #0
  404bac:	4646      	mov	r6, r8
  404bae:	e6a9      	b.n	404904 <_dtoa_r+0xa3c>
  404bb0:	9b08      	ldr	r3, [sp, #32]
  404bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404bb4:	1a9d      	subs	r5, r3, r2
  404bb6:	2300      	movs	r3, #0
  404bb8:	f7ff bb71 	b.w	40429e <_dtoa_r+0x3d6>
  404bbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404bbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404bc0:	9d08      	ldr	r5, [sp, #32]
  404bc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404bc6:	f7ff bb6a 	b.w	40429e <_dtoa_r+0x3d6>
  404bca:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404bce:	f04f 0a02 	mov.w	sl, #2
  404bd2:	e56e      	b.n	4046b2 <_dtoa_r+0x7ea>
  404bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404bd6:	2b00      	cmp	r3, #0
  404bd8:	f43f aeb8 	beq.w	40494c <_dtoa_r+0xa84>
  404bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404bde:	2b00      	cmp	r3, #0
  404be0:	f77f aede 	ble.w	4049a0 <_dtoa_r+0xad8>
  404be4:	2200      	movs	r2, #0
  404be6:	4b24      	ldr	r3, [pc, #144]	; (404c78 <_dtoa_r+0xdb0>)
  404be8:	4638      	mov	r0, r7
  404bea:	4641      	mov	r1, r8
  404bec:	f002 faf8 	bl	4071e0 <__aeabi_dmul>
  404bf0:	4607      	mov	r7, r0
  404bf2:	4688      	mov	r8, r1
  404bf4:	f10a 0001 	add.w	r0, sl, #1
  404bf8:	f002 fa8c 	bl	407114 <__aeabi_i2d>
  404bfc:	463a      	mov	r2, r7
  404bfe:	4643      	mov	r3, r8
  404c00:	f002 faee 	bl	4071e0 <__aeabi_dmul>
  404c04:	2200      	movs	r2, #0
  404c06:	4b17      	ldr	r3, [pc, #92]	; (404c64 <_dtoa_r+0xd9c>)
  404c08:	f002 f938 	bl	406e7c <__adddf3>
  404c0c:	9a02      	ldr	r2, [sp, #8]
  404c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404c10:	9312      	str	r3, [sp, #72]	; 0x48
  404c12:	3a01      	subs	r2, #1
  404c14:	4605      	mov	r5, r0
  404c16:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404c1a:	9215      	str	r2, [sp, #84]	; 0x54
  404c1c:	e56a      	b.n	4046f4 <_dtoa_r+0x82c>
  404c1e:	2239      	movs	r2, #57	; 0x39
  404c20:	46b3      	mov	fp, r6
  404c22:	703a      	strb	r2, [r7, #0]
  404c24:	9e06      	ldr	r6, [sp, #24]
  404c26:	1c7d      	adds	r5, r7, #1
  404c28:	e4c0      	b.n	4045ac <_dtoa_r+0x6e4>
  404c2a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404c2e:	2000      	movs	r0, #0
  404c30:	4910      	ldr	r1, [pc, #64]	; (404c74 <_dtoa_r+0xdac>)
  404c32:	f002 f921 	bl	406e78 <__aeabi_dsub>
  404c36:	4632      	mov	r2, r6
  404c38:	463b      	mov	r3, r7
  404c3a:	f002 fd61 	bl	407700 <__aeabi_dcmpgt>
  404c3e:	b908      	cbnz	r0, 404c44 <_dtoa_r+0xd7c>
  404c40:	e6ae      	b.n	4049a0 <_dtoa_r+0xad8>
  404c42:	4615      	mov	r5, r2
  404c44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404c48:	2b30      	cmp	r3, #48	; 0x30
  404c4a:	f105 32ff 	add.w	r2, r5, #4294967295
  404c4e:	d0f8      	beq.n	404c42 <_dtoa_r+0xd7a>
  404c50:	e5d7      	b.n	404802 <_dtoa_r+0x93a>
  404c52:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404c58:	9302      	str	r3, [sp, #8]
  404c5a:	f7ff bae8 	b.w	40422e <_dtoa_r+0x366>
  404c5e:	970c      	str	r7, [sp, #48]	; 0x30
  404c60:	f7ff bba5 	b.w	4043ae <_dtoa_r+0x4e6>
  404c64:	401c0000 	.word	0x401c0000
  404c68:	40140000 	.word	0x40140000
  404c6c:	00407bb8 	.word	0x00407bb8
  404c70:	00407b90 	.word	0x00407b90
  404c74:	3fe00000 	.word	0x3fe00000
  404c78:	40240000 	.word	0x40240000
  404c7c:	2b39      	cmp	r3, #57	; 0x39
  404c7e:	f8cd b018 	str.w	fp, [sp, #24]
  404c82:	46d0      	mov	r8, sl
  404c84:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404c88:	469a      	mov	sl, r3
  404c8a:	d0c8      	beq.n	404c1e <_dtoa_r+0xd56>
  404c8c:	f1bb 0f00 	cmp.w	fp, #0
  404c90:	f73f aebf 	bgt.w	404a12 <_dtoa_r+0xb4a>
  404c94:	e6bf      	b.n	404a16 <_dtoa_r+0xb4e>
  404c96:	f47f aebe 	bne.w	404a16 <_dtoa_r+0xb4e>
  404c9a:	f01a 0f01 	tst.w	sl, #1
  404c9e:	f43f aeba 	beq.w	404a16 <_dtoa_r+0xb4e>
  404ca2:	e6b2      	b.n	404a0a <_dtoa_r+0xb42>
  404ca4:	f04f 0800 	mov.w	r8, #0
  404ca8:	4646      	mov	r6, r8
  404caa:	e5e9      	b.n	404880 <_dtoa_r+0x9b8>
  404cac:	4631      	mov	r1, r6
  404cae:	2300      	movs	r3, #0
  404cb0:	220a      	movs	r2, #10
  404cb2:	4620      	mov	r0, r4
  404cb4:	f001 f926 	bl	405f04 <__multadd>
  404cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404cba:	2b00      	cmp	r3, #0
  404cbc:	4606      	mov	r6, r0
  404cbe:	dd0a      	ble.n	404cd6 <_dtoa_r+0xe0e>
  404cc0:	930a      	str	r3, [sp, #40]	; 0x28
  404cc2:	f7ff bbaa 	b.w	40441a <_dtoa_r+0x552>
  404cc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cc8:	2b02      	cmp	r3, #2
  404cca:	dc23      	bgt.n	404d14 <_dtoa_r+0xe4c>
  404ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404cce:	e43b      	b.n	404548 <_dtoa_r+0x680>
  404cd0:	f04f 0a02 	mov.w	sl, #2
  404cd4:	e4ed      	b.n	4046b2 <_dtoa_r+0x7ea>
  404cd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cd8:	2b02      	cmp	r3, #2
  404cda:	dc1b      	bgt.n	404d14 <_dtoa_r+0xe4c>
  404cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404cde:	e7ef      	b.n	404cc0 <_dtoa_r+0xdf8>
  404ce0:	2500      	movs	r5, #0
  404ce2:	6465      	str	r5, [r4, #68]	; 0x44
  404ce4:	4629      	mov	r1, r5
  404ce6:	4620      	mov	r0, r4
  404ce8:	f001 f8dc 	bl	405ea4 <_Balloc>
  404cec:	f04f 33ff 	mov.w	r3, #4294967295
  404cf0:	930a      	str	r3, [sp, #40]	; 0x28
  404cf2:	930f      	str	r3, [sp, #60]	; 0x3c
  404cf4:	2301      	movs	r3, #1
  404cf6:	9004      	str	r0, [sp, #16]
  404cf8:	9525      	str	r5, [sp, #148]	; 0x94
  404cfa:	6420      	str	r0, [r4, #64]	; 0x40
  404cfc:	930b      	str	r3, [sp, #44]	; 0x2c
  404cfe:	f7ff b9dd 	b.w	4040bc <_dtoa_r+0x1f4>
  404d02:	2501      	movs	r5, #1
  404d04:	f7ff b9a5 	b.w	404052 <_dtoa_r+0x18a>
  404d08:	f43f ab69 	beq.w	4043de <_dtoa_r+0x516>
  404d0c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404d10:	f7ff bbf9 	b.w	404506 <_dtoa_r+0x63e>
  404d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404d16:	930a      	str	r3, [sp, #40]	; 0x28
  404d18:	e5e5      	b.n	4048e6 <_dtoa_r+0xa1e>
  404d1a:	bf00      	nop

00404d1c <__sflush_r>:
  404d1c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404d20:	b29a      	uxth	r2, r3
  404d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d26:	460d      	mov	r5, r1
  404d28:	0711      	lsls	r1, r2, #28
  404d2a:	4680      	mov	r8, r0
  404d2c:	d43a      	bmi.n	404da4 <__sflush_r+0x88>
  404d2e:	686a      	ldr	r2, [r5, #4]
  404d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404d34:	2a00      	cmp	r2, #0
  404d36:	81ab      	strh	r3, [r5, #12]
  404d38:	dd6f      	ble.n	404e1a <__sflush_r+0xfe>
  404d3a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404d3c:	2c00      	cmp	r4, #0
  404d3e:	d049      	beq.n	404dd4 <__sflush_r+0xb8>
  404d40:	2200      	movs	r2, #0
  404d42:	b29b      	uxth	r3, r3
  404d44:	f8d8 6000 	ldr.w	r6, [r8]
  404d48:	f8c8 2000 	str.w	r2, [r8]
  404d4c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404d50:	d067      	beq.n	404e22 <__sflush_r+0x106>
  404d52:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404d54:	075f      	lsls	r7, r3, #29
  404d56:	d505      	bpl.n	404d64 <__sflush_r+0x48>
  404d58:	6869      	ldr	r1, [r5, #4]
  404d5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404d5c:	1a52      	subs	r2, r2, r1
  404d5e:	b10b      	cbz	r3, 404d64 <__sflush_r+0x48>
  404d60:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404d62:	1ad2      	subs	r2, r2, r3
  404d64:	2300      	movs	r3, #0
  404d66:	69e9      	ldr	r1, [r5, #28]
  404d68:	4640      	mov	r0, r8
  404d6a:	47a0      	blx	r4
  404d6c:	1c44      	adds	r4, r0, #1
  404d6e:	d03c      	beq.n	404dea <__sflush_r+0xce>
  404d70:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404d74:	692a      	ldr	r2, [r5, #16]
  404d76:	602a      	str	r2, [r5, #0]
  404d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404d7c:	2200      	movs	r2, #0
  404d7e:	81ab      	strh	r3, [r5, #12]
  404d80:	04db      	lsls	r3, r3, #19
  404d82:	606a      	str	r2, [r5, #4]
  404d84:	d447      	bmi.n	404e16 <__sflush_r+0xfa>
  404d86:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404d88:	f8c8 6000 	str.w	r6, [r8]
  404d8c:	b311      	cbz	r1, 404dd4 <__sflush_r+0xb8>
  404d8e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404d92:	4299      	cmp	r1, r3
  404d94:	d002      	beq.n	404d9c <__sflush_r+0x80>
  404d96:	4640      	mov	r0, r8
  404d98:	f000 f95a 	bl	405050 <_free_r>
  404d9c:	2000      	movs	r0, #0
  404d9e:	6328      	str	r0, [r5, #48]	; 0x30
  404da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404da4:	692e      	ldr	r6, [r5, #16]
  404da6:	b1ae      	cbz	r6, 404dd4 <__sflush_r+0xb8>
  404da8:	682c      	ldr	r4, [r5, #0]
  404daa:	602e      	str	r6, [r5, #0]
  404dac:	0791      	lsls	r1, r2, #30
  404dae:	bf0c      	ite	eq
  404db0:	696b      	ldreq	r3, [r5, #20]
  404db2:	2300      	movne	r3, #0
  404db4:	1ba4      	subs	r4, r4, r6
  404db6:	60ab      	str	r3, [r5, #8]
  404db8:	e00a      	b.n	404dd0 <__sflush_r+0xb4>
  404dba:	4623      	mov	r3, r4
  404dbc:	4632      	mov	r2, r6
  404dbe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404dc0:	69e9      	ldr	r1, [r5, #28]
  404dc2:	4640      	mov	r0, r8
  404dc4:	47b8      	blx	r7
  404dc6:	2800      	cmp	r0, #0
  404dc8:	eba4 0400 	sub.w	r4, r4, r0
  404dcc:	4406      	add	r6, r0
  404dce:	dd04      	ble.n	404dda <__sflush_r+0xbe>
  404dd0:	2c00      	cmp	r4, #0
  404dd2:	dcf2      	bgt.n	404dba <__sflush_r+0x9e>
  404dd4:	2000      	movs	r0, #0
  404dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dda:	89ab      	ldrh	r3, [r5, #12]
  404ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404de0:	81ab      	strh	r3, [r5, #12]
  404de2:	f04f 30ff 	mov.w	r0, #4294967295
  404de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dea:	f8d8 4000 	ldr.w	r4, [r8]
  404dee:	2c1d      	cmp	r4, #29
  404df0:	d8f3      	bhi.n	404dda <__sflush_r+0xbe>
  404df2:	4b19      	ldr	r3, [pc, #100]	; (404e58 <__sflush_r+0x13c>)
  404df4:	40e3      	lsrs	r3, r4
  404df6:	43db      	mvns	r3, r3
  404df8:	f013 0301 	ands.w	r3, r3, #1
  404dfc:	d1ed      	bne.n	404dda <__sflush_r+0xbe>
  404dfe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404e02:	606b      	str	r3, [r5, #4]
  404e04:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404e08:	6929      	ldr	r1, [r5, #16]
  404e0a:	81ab      	strh	r3, [r5, #12]
  404e0c:	04da      	lsls	r2, r3, #19
  404e0e:	6029      	str	r1, [r5, #0]
  404e10:	d5b9      	bpl.n	404d86 <__sflush_r+0x6a>
  404e12:	2c00      	cmp	r4, #0
  404e14:	d1b7      	bne.n	404d86 <__sflush_r+0x6a>
  404e16:	6528      	str	r0, [r5, #80]	; 0x50
  404e18:	e7b5      	b.n	404d86 <__sflush_r+0x6a>
  404e1a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404e1c:	2a00      	cmp	r2, #0
  404e1e:	dc8c      	bgt.n	404d3a <__sflush_r+0x1e>
  404e20:	e7d8      	b.n	404dd4 <__sflush_r+0xb8>
  404e22:	2301      	movs	r3, #1
  404e24:	69e9      	ldr	r1, [r5, #28]
  404e26:	4640      	mov	r0, r8
  404e28:	47a0      	blx	r4
  404e2a:	1c43      	adds	r3, r0, #1
  404e2c:	4602      	mov	r2, r0
  404e2e:	d002      	beq.n	404e36 <__sflush_r+0x11a>
  404e30:	89ab      	ldrh	r3, [r5, #12]
  404e32:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404e34:	e78e      	b.n	404d54 <__sflush_r+0x38>
  404e36:	f8d8 3000 	ldr.w	r3, [r8]
  404e3a:	2b00      	cmp	r3, #0
  404e3c:	d0f8      	beq.n	404e30 <__sflush_r+0x114>
  404e3e:	2b1d      	cmp	r3, #29
  404e40:	d001      	beq.n	404e46 <__sflush_r+0x12a>
  404e42:	2b16      	cmp	r3, #22
  404e44:	d102      	bne.n	404e4c <__sflush_r+0x130>
  404e46:	f8c8 6000 	str.w	r6, [r8]
  404e4a:	e7c3      	b.n	404dd4 <__sflush_r+0xb8>
  404e4c:	89ab      	ldrh	r3, [r5, #12]
  404e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e52:	81ab      	strh	r3, [r5, #12]
  404e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e58:	20400001 	.word	0x20400001

00404e5c <_fflush_r>:
  404e5c:	b538      	push	{r3, r4, r5, lr}
  404e5e:	460d      	mov	r5, r1
  404e60:	4604      	mov	r4, r0
  404e62:	b108      	cbz	r0, 404e68 <_fflush_r+0xc>
  404e64:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404e66:	b1bb      	cbz	r3, 404e98 <_fflush_r+0x3c>
  404e68:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404e6c:	b188      	cbz	r0, 404e92 <_fflush_r+0x36>
  404e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404e70:	07db      	lsls	r3, r3, #31
  404e72:	d401      	bmi.n	404e78 <_fflush_r+0x1c>
  404e74:	0581      	lsls	r1, r0, #22
  404e76:	d517      	bpl.n	404ea8 <_fflush_r+0x4c>
  404e78:	4620      	mov	r0, r4
  404e7a:	4629      	mov	r1, r5
  404e7c:	f7ff ff4e 	bl	404d1c <__sflush_r>
  404e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404e82:	07da      	lsls	r2, r3, #31
  404e84:	4604      	mov	r4, r0
  404e86:	d402      	bmi.n	404e8e <_fflush_r+0x32>
  404e88:	89ab      	ldrh	r3, [r5, #12]
  404e8a:	059b      	lsls	r3, r3, #22
  404e8c:	d507      	bpl.n	404e9e <_fflush_r+0x42>
  404e8e:	4620      	mov	r0, r4
  404e90:	bd38      	pop	{r3, r4, r5, pc}
  404e92:	4604      	mov	r4, r0
  404e94:	4620      	mov	r0, r4
  404e96:	bd38      	pop	{r3, r4, r5, pc}
  404e98:	f000 f838 	bl	404f0c <__sinit>
  404e9c:	e7e4      	b.n	404e68 <_fflush_r+0xc>
  404e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404ea0:	f000 fb72 	bl	405588 <__retarget_lock_release_recursive>
  404ea4:	4620      	mov	r0, r4
  404ea6:	bd38      	pop	{r3, r4, r5, pc}
  404ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404eaa:	f000 fb6b 	bl	405584 <__retarget_lock_acquire_recursive>
  404eae:	e7e3      	b.n	404e78 <_fflush_r+0x1c>

00404eb0 <_cleanup_r>:
  404eb0:	4901      	ldr	r1, [pc, #4]	; (404eb8 <_cleanup_r+0x8>)
  404eb2:	f000 bb2b 	b.w	40550c <_fwalk_reent>
  404eb6:	bf00      	nop
  404eb8:	00406a99 	.word	0x00406a99

00404ebc <std.isra.0>:
  404ebc:	b510      	push	{r4, lr}
  404ebe:	2300      	movs	r3, #0
  404ec0:	4604      	mov	r4, r0
  404ec2:	8181      	strh	r1, [r0, #12]
  404ec4:	81c2      	strh	r2, [r0, #14]
  404ec6:	6003      	str	r3, [r0, #0]
  404ec8:	6043      	str	r3, [r0, #4]
  404eca:	6083      	str	r3, [r0, #8]
  404ecc:	6643      	str	r3, [r0, #100]	; 0x64
  404ece:	6103      	str	r3, [r0, #16]
  404ed0:	6143      	str	r3, [r0, #20]
  404ed2:	6183      	str	r3, [r0, #24]
  404ed4:	4619      	mov	r1, r3
  404ed6:	2208      	movs	r2, #8
  404ed8:	305c      	adds	r0, #92	; 0x5c
  404eda:	f7fd f9ef 	bl	4022bc <memset>
  404ede:	4807      	ldr	r0, [pc, #28]	; (404efc <std.isra.0+0x40>)
  404ee0:	4907      	ldr	r1, [pc, #28]	; (404f00 <std.isra.0+0x44>)
  404ee2:	4a08      	ldr	r2, [pc, #32]	; (404f04 <std.isra.0+0x48>)
  404ee4:	4b08      	ldr	r3, [pc, #32]	; (404f08 <std.isra.0+0x4c>)
  404ee6:	6220      	str	r0, [r4, #32]
  404ee8:	61e4      	str	r4, [r4, #28]
  404eea:	6261      	str	r1, [r4, #36]	; 0x24
  404eec:	62a2      	str	r2, [r4, #40]	; 0x28
  404eee:	62e3      	str	r3, [r4, #44]	; 0x2c
  404ef0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404ef8:	f000 bb40 	b.w	40557c <__retarget_lock_init_recursive>
  404efc:	00406809 	.word	0x00406809
  404f00:	0040682d 	.word	0x0040682d
  404f04:	00406869 	.word	0x00406869
  404f08:	00406889 	.word	0x00406889

00404f0c <__sinit>:
  404f0c:	b510      	push	{r4, lr}
  404f0e:	4604      	mov	r4, r0
  404f10:	4812      	ldr	r0, [pc, #72]	; (404f5c <__sinit+0x50>)
  404f12:	f000 fb37 	bl	405584 <__retarget_lock_acquire_recursive>
  404f16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404f18:	b9d2      	cbnz	r2, 404f50 <__sinit+0x44>
  404f1a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404f1e:	4810      	ldr	r0, [pc, #64]	; (404f60 <__sinit+0x54>)
  404f20:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404f24:	2103      	movs	r1, #3
  404f26:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404f2a:	63e0      	str	r0, [r4, #60]	; 0x3c
  404f2c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404f30:	6860      	ldr	r0, [r4, #4]
  404f32:	2104      	movs	r1, #4
  404f34:	f7ff ffc2 	bl	404ebc <std.isra.0>
  404f38:	2201      	movs	r2, #1
  404f3a:	2109      	movs	r1, #9
  404f3c:	68a0      	ldr	r0, [r4, #8]
  404f3e:	f7ff ffbd 	bl	404ebc <std.isra.0>
  404f42:	2202      	movs	r2, #2
  404f44:	2112      	movs	r1, #18
  404f46:	68e0      	ldr	r0, [r4, #12]
  404f48:	f7ff ffb8 	bl	404ebc <std.isra.0>
  404f4c:	2301      	movs	r3, #1
  404f4e:	63a3      	str	r3, [r4, #56]	; 0x38
  404f50:	4802      	ldr	r0, [pc, #8]	; (404f5c <__sinit+0x50>)
  404f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404f56:	f000 bb17 	b.w	405588 <__retarget_lock_release_recursive>
  404f5a:	bf00      	nop
  404f5c:	20400a98 	.word	0x20400a98
  404f60:	00404eb1 	.word	0x00404eb1

00404f64 <__sfp_lock_acquire>:
  404f64:	4801      	ldr	r0, [pc, #4]	; (404f6c <__sfp_lock_acquire+0x8>)
  404f66:	f000 bb0d 	b.w	405584 <__retarget_lock_acquire_recursive>
  404f6a:	bf00      	nop
  404f6c:	20400aac 	.word	0x20400aac

00404f70 <__sfp_lock_release>:
  404f70:	4801      	ldr	r0, [pc, #4]	; (404f78 <__sfp_lock_release+0x8>)
  404f72:	f000 bb09 	b.w	405588 <__retarget_lock_release_recursive>
  404f76:	bf00      	nop
  404f78:	20400aac 	.word	0x20400aac

00404f7c <__libc_fini_array>:
  404f7c:	b538      	push	{r3, r4, r5, lr}
  404f7e:	4c0a      	ldr	r4, [pc, #40]	; (404fa8 <__libc_fini_array+0x2c>)
  404f80:	4d0a      	ldr	r5, [pc, #40]	; (404fac <__libc_fini_array+0x30>)
  404f82:	1b64      	subs	r4, r4, r5
  404f84:	10a4      	asrs	r4, r4, #2
  404f86:	d00a      	beq.n	404f9e <__libc_fini_array+0x22>
  404f88:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404f8c:	3b01      	subs	r3, #1
  404f8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404f92:	3c01      	subs	r4, #1
  404f94:	f855 3904 	ldr.w	r3, [r5], #-4
  404f98:	4798      	blx	r3
  404f9a:	2c00      	cmp	r4, #0
  404f9c:	d1f9      	bne.n	404f92 <__libc_fini_array+0x16>
  404f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404fa2:	f002 bf07 	b.w	407db4 <_fini>
  404fa6:	bf00      	nop
  404fa8:	00407dc4 	.word	0x00407dc4
  404fac:	00407dc0 	.word	0x00407dc0

00404fb0 <_malloc_trim_r>:
  404fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fb2:	4f24      	ldr	r7, [pc, #144]	; (405044 <_malloc_trim_r+0x94>)
  404fb4:	460c      	mov	r4, r1
  404fb6:	4606      	mov	r6, r0
  404fb8:	f000 ff68 	bl	405e8c <__malloc_lock>
  404fbc:	68bb      	ldr	r3, [r7, #8]
  404fbe:	685d      	ldr	r5, [r3, #4]
  404fc0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404fc4:	310f      	adds	r1, #15
  404fc6:	f025 0503 	bic.w	r5, r5, #3
  404fca:	4429      	add	r1, r5
  404fcc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404fd0:	f021 010f 	bic.w	r1, r1, #15
  404fd4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404fd8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404fdc:	db07      	blt.n	404fee <_malloc_trim_r+0x3e>
  404fde:	2100      	movs	r1, #0
  404fe0:	4630      	mov	r0, r6
  404fe2:	f001 fbff 	bl	4067e4 <_sbrk_r>
  404fe6:	68bb      	ldr	r3, [r7, #8]
  404fe8:	442b      	add	r3, r5
  404fea:	4298      	cmp	r0, r3
  404fec:	d004      	beq.n	404ff8 <_malloc_trim_r+0x48>
  404fee:	4630      	mov	r0, r6
  404ff0:	f000 ff52 	bl	405e98 <__malloc_unlock>
  404ff4:	2000      	movs	r0, #0
  404ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ff8:	4261      	negs	r1, r4
  404ffa:	4630      	mov	r0, r6
  404ffc:	f001 fbf2 	bl	4067e4 <_sbrk_r>
  405000:	3001      	adds	r0, #1
  405002:	d00d      	beq.n	405020 <_malloc_trim_r+0x70>
  405004:	4b10      	ldr	r3, [pc, #64]	; (405048 <_malloc_trim_r+0x98>)
  405006:	68ba      	ldr	r2, [r7, #8]
  405008:	6819      	ldr	r1, [r3, #0]
  40500a:	1b2d      	subs	r5, r5, r4
  40500c:	f045 0501 	orr.w	r5, r5, #1
  405010:	4630      	mov	r0, r6
  405012:	1b09      	subs	r1, r1, r4
  405014:	6055      	str	r5, [r2, #4]
  405016:	6019      	str	r1, [r3, #0]
  405018:	f000 ff3e 	bl	405e98 <__malloc_unlock>
  40501c:	2001      	movs	r0, #1
  40501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405020:	2100      	movs	r1, #0
  405022:	4630      	mov	r0, r6
  405024:	f001 fbde 	bl	4067e4 <_sbrk_r>
  405028:	68ba      	ldr	r2, [r7, #8]
  40502a:	1a83      	subs	r3, r0, r2
  40502c:	2b0f      	cmp	r3, #15
  40502e:	ddde      	ble.n	404fee <_malloc_trim_r+0x3e>
  405030:	4c06      	ldr	r4, [pc, #24]	; (40504c <_malloc_trim_r+0x9c>)
  405032:	4905      	ldr	r1, [pc, #20]	; (405048 <_malloc_trim_r+0x98>)
  405034:	6824      	ldr	r4, [r4, #0]
  405036:	f043 0301 	orr.w	r3, r3, #1
  40503a:	1b00      	subs	r0, r0, r4
  40503c:	6053      	str	r3, [r2, #4]
  40503e:	6008      	str	r0, [r1, #0]
  405040:	e7d5      	b.n	404fee <_malloc_trim_r+0x3e>
  405042:	bf00      	nop
  405044:	2040043c 	.word	0x2040043c
  405048:	20400a4c 	.word	0x20400a4c
  40504c:	20400844 	.word	0x20400844

00405050 <_free_r>:
  405050:	2900      	cmp	r1, #0
  405052:	d044      	beq.n	4050de <_free_r+0x8e>
  405054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405058:	460d      	mov	r5, r1
  40505a:	4680      	mov	r8, r0
  40505c:	f000 ff16 	bl	405e8c <__malloc_lock>
  405060:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405064:	4969      	ldr	r1, [pc, #420]	; (40520c <_free_r+0x1bc>)
  405066:	f027 0301 	bic.w	r3, r7, #1
  40506a:	f1a5 0408 	sub.w	r4, r5, #8
  40506e:	18e2      	adds	r2, r4, r3
  405070:	688e      	ldr	r6, [r1, #8]
  405072:	6850      	ldr	r0, [r2, #4]
  405074:	42b2      	cmp	r2, r6
  405076:	f020 0003 	bic.w	r0, r0, #3
  40507a:	d05e      	beq.n	40513a <_free_r+0xea>
  40507c:	07fe      	lsls	r6, r7, #31
  40507e:	6050      	str	r0, [r2, #4]
  405080:	d40b      	bmi.n	40509a <_free_r+0x4a>
  405082:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405086:	1be4      	subs	r4, r4, r7
  405088:	f101 0e08 	add.w	lr, r1, #8
  40508c:	68a5      	ldr	r5, [r4, #8]
  40508e:	4575      	cmp	r5, lr
  405090:	443b      	add	r3, r7
  405092:	d06d      	beq.n	405170 <_free_r+0x120>
  405094:	68e7      	ldr	r7, [r4, #12]
  405096:	60ef      	str	r7, [r5, #12]
  405098:	60bd      	str	r5, [r7, #8]
  40509a:	1815      	adds	r5, r2, r0
  40509c:	686d      	ldr	r5, [r5, #4]
  40509e:	07ed      	lsls	r5, r5, #31
  4050a0:	d53e      	bpl.n	405120 <_free_r+0xd0>
  4050a2:	f043 0201 	orr.w	r2, r3, #1
  4050a6:	6062      	str	r2, [r4, #4]
  4050a8:	50e3      	str	r3, [r4, r3]
  4050aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4050ae:	d217      	bcs.n	4050e0 <_free_r+0x90>
  4050b0:	08db      	lsrs	r3, r3, #3
  4050b2:	1c58      	adds	r0, r3, #1
  4050b4:	109a      	asrs	r2, r3, #2
  4050b6:	684d      	ldr	r5, [r1, #4]
  4050b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4050bc:	60a7      	str	r7, [r4, #8]
  4050be:	2301      	movs	r3, #1
  4050c0:	4093      	lsls	r3, r2
  4050c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4050c6:	432b      	orrs	r3, r5
  4050c8:	3a08      	subs	r2, #8
  4050ca:	60e2      	str	r2, [r4, #12]
  4050cc:	604b      	str	r3, [r1, #4]
  4050ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4050d2:	60fc      	str	r4, [r7, #12]
  4050d4:	4640      	mov	r0, r8
  4050d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4050da:	f000 bedd 	b.w	405e98 <__malloc_unlock>
  4050de:	4770      	bx	lr
  4050e0:	0a5a      	lsrs	r2, r3, #9
  4050e2:	2a04      	cmp	r2, #4
  4050e4:	d852      	bhi.n	40518c <_free_r+0x13c>
  4050e6:	099a      	lsrs	r2, r3, #6
  4050e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4050ec:	00ff      	lsls	r7, r7, #3
  4050ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4050f2:	19c8      	adds	r0, r1, r7
  4050f4:	59ca      	ldr	r2, [r1, r7]
  4050f6:	3808      	subs	r0, #8
  4050f8:	4290      	cmp	r0, r2
  4050fa:	d04f      	beq.n	40519c <_free_r+0x14c>
  4050fc:	6851      	ldr	r1, [r2, #4]
  4050fe:	f021 0103 	bic.w	r1, r1, #3
  405102:	428b      	cmp	r3, r1
  405104:	d232      	bcs.n	40516c <_free_r+0x11c>
  405106:	6892      	ldr	r2, [r2, #8]
  405108:	4290      	cmp	r0, r2
  40510a:	d1f7      	bne.n	4050fc <_free_r+0xac>
  40510c:	68c3      	ldr	r3, [r0, #12]
  40510e:	60a0      	str	r0, [r4, #8]
  405110:	60e3      	str	r3, [r4, #12]
  405112:	609c      	str	r4, [r3, #8]
  405114:	60c4      	str	r4, [r0, #12]
  405116:	4640      	mov	r0, r8
  405118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40511c:	f000 bebc 	b.w	405e98 <__malloc_unlock>
  405120:	6895      	ldr	r5, [r2, #8]
  405122:	4f3b      	ldr	r7, [pc, #236]	; (405210 <_free_r+0x1c0>)
  405124:	42bd      	cmp	r5, r7
  405126:	4403      	add	r3, r0
  405128:	d040      	beq.n	4051ac <_free_r+0x15c>
  40512a:	68d0      	ldr	r0, [r2, #12]
  40512c:	60e8      	str	r0, [r5, #12]
  40512e:	f043 0201 	orr.w	r2, r3, #1
  405132:	6085      	str	r5, [r0, #8]
  405134:	6062      	str	r2, [r4, #4]
  405136:	50e3      	str	r3, [r4, r3]
  405138:	e7b7      	b.n	4050aa <_free_r+0x5a>
  40513a:	07ff      	lsls	r7, r7, #31
  40513c:	4403      	add	r3, r0
  40513e:	d407      	bmi.n	405150 <_free_r+0x100>
  405140:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405144:	1aa4      	subs	r4, r4, r2
  405146:	4413      	add	r3, r2
  405148:	68a0      	ldr	r0, [r4, #8]
  40514a:	68e2      	ldr	r2, [r4, #12]
  40514c:	60c2      	str	r2, [r0, #12]
  40514e:	6090      	str	r0, [r2, #8]
  405150:	4a30      	ldr	r2, [pc, #192]	; (405214 <_free_r+0x1c4>)
  405152:	6812      	ldr	r2, [r2, #0]
  405154:	f043 0001 	orr.w	r0, r3, #1
  405158:	4293      	cmp	r3, r2
  40515a:	6060      	str	r0, [r4, #4]
  40515c:	608c      	str	r4, [r1, #8]
  40515e:	d3b9      	bcc.n	4050d4 <_free_r+0x84>
  405160:	4b2d      	ldr	r3, [pc, #180]	; (405218 <_free_r+0x1c8>)
  405162:	4640      	mov	r0, r8
  405164:	6819      	ldr	r1, [r3, #0]
  405166:	f7ff ff23 	bl	404fb0 <_malloc_trim_r>
  40516a:	e7b3      	b.n	4050d4 <_free_r+0x84>
  40516c:	4610      	mov	r0, r2
  40516e:	e7cd      	b.n	40510c <_free_r+0xbc>
  405170:	1811      	adds	r1, r2, r0
  405172:	6849      	ldr	r1, [r1, #4]
  405174:	07c9      	lsls	r1, r1, #31
  405176:	d444      	bmi.n	405202 <_free_r+0x1b2>
  405178:	6891      	ldr	r1, [r2, #8]
  40517a:	68d2      	ldr	r2, [r2, #12]
  40517c:	60ca      	str	r2, [r1, #12]
  40517e:	4403      	add	r3, r0
  405180:	f043 0001 	orr.w	r0, r3, #1
  405184:	6091      	str	r1, [r2, #8]
  405186:	6060      	str	r0, [r4, #4]
  405188:	50e3      	str	r3, [r4, r3]
  40518a:	e7a3      	b.n	4050d4 <_free_r+0x84>
  40518c:	2a14      	cmp	r2, #20
  40518e:	d816      	bhi.n	4051be <_free_r+0x16e>
  405190:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405194:	00ff      	lsls	r7, r7, #3
  405196:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40519a:	e7aa      	b.n	4050f2 <_free_r+0xa2>
  40519c:	10aa      	asrs	r2, r5, #2
  40519e:	2301      	movs	r3, #1
  4051a0:	684d      	ldr	r5, [r1, #4]
  4051a2:	4093      	lsls	r3, r2
  4051a4:	432b      	orrs	r3, r5
  4051a6:	604b      	str	r3, [r1, #4]
  4051a8:	4603      	mov	r3, r0
  4051aa:	e7b0      	b.n	40510e <_free_r+0xbe>
  4051ac:	f043 0201 	orr.w	r2, r3, #1
  4051b0:	614c      	str	r4, [r1, #20]
  4051b2:	610c      	str	r4, [r1, #16]
  4051b4:	60e5      	str	r5, [r4, #12]
  4051b6:	60a5      	str	r5, [r4, #8]
  4051b8:	6062      	str	r2, [r4, #4]
  4051ba:	50e3      	str	r3, [r4, r3]
  4051bc:	e78a      	b.n	4050d4 <_free_r+0x84>
  4051be:	2a54      	cmp	r2, #84	; 0x54
  4051c0:	d806      	bhi.n	4051d0 <_free_r+0x180>
  4051c2:	0b1a      	lsrs	r2, r3, #12
  4051c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4051c8:	00ff      	lsls	r7, r7, #3
  4051ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4051ce:	e790      	b.n	4050f2 <_free_r+0xa2>
  4051d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4051d4:	d806      	bhi.n	4051e4 <_free_r+0x194>
  4051d6:	0bda      	lsrs	r2, r3, #15
  4051d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4051dc:	00ff      	lsls	r7, r7, #3
  4051de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4051e2:	e786      	b.n	4050f2 <_free_r+0xa2>
  4051e4:	f240 5054 	movw	r0, #1364	; 0x554
  4051e8:	4282      	cmp	r2, r0
  4051ea:	d806      	bhi.n	4051fa <_free_r+0x1aa>
  4051ec:	0c9a      	lsrs	r2, r3, #18
  4051ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4051f2:	00ff      	lsls	r7, r7, #3
  4051f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4051f8:	e77b      	b.n	4050f2 <_free_r+0xa2>
  4051fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4051fe:	257e      	movs	r5, #126	; 0x7e
  405200:	e777      	b.n	4050f2 <_free_r+0xa2>
  405202:	f043 0101 	orr.w	r1, r3, #1
  405206:	6061      	str	r1, [r4, #4]
  405208:	6013      	str	r3, [r2, #0]
  40520a:	e763      	b.n	4050d4 <_free_r+0x84>
  40520c:	2040043c 	.word	0x2040043c
  405210:	20400444 	.word	0x20400444
  405214:	20400848 	.word	0x20400848
  405218:	20400a7c 	.word	0x20400a7c

0040521c <__sfvwrite_r>:
  40521c:	6893      	ldr	r3, [r2, #8]
  40521e:	2b00      	cmp	r3, #0
  405220:	d073      	beq.n	40530a <__sfvwrite_r+0xee>
  405222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405226:	898b      	ldrh	r3, [r1, #12]
  405228:	b083      	sub	sp, #12
  40522a:	460c      	mov	r4, r1
  40522c:	0719      	lsls	r1, r3, #28
  40522e:	9000      	str	r0, [sp, #0]
  405230:	4616      	mov	r6, r2
  405232:	d526      	bpl.n	405282 <__sfvwrite_r+0x66>
  405234:	6922      	ldr	r2, [r4, #16]
  405236:	b322      	cbz	r2, 405282 <__sfvwrite_r+0x66>
  405238:	f013 0002 	ands.w	r0, r3, #2
  40523c:	6835      	ldr	r5, [r6, #0]
  40523e:	d02c      	beq.n	40529a <__sfvwrite_r+0x7e>
  405240:	f04f 0900 	mov.w	r9, #0
  405244:	4fb0      	ldr	r7, [pc, #704]	; (405508 <__sfvwrite_r+0x2ec>)
  405246:	46c8      	mov	r8, r9
  405248:	46b2      	mov	sl, r6
  40524a:	45b8      	cmp	r8, r7
  40524c:	4643      	mov	r3, r8
  40524e:	464a      	mov	r2, r9
  405250:	bf28      	it	cs
  405252:	463b      	movcs	r3, r7
  405254:	9800      	ldr	r0, [sp, #0]
  405256:	f1b8 0f00 	cmp.w	r8, #0
  40525a:	d050      	beq.n	4052fe <__sfvwrite_r+0xe2>
  40525c:	69e1      	ldr	r1, [r4, #28]
  40525e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405260:	47b0      	blx	r6
  405262:	2800      	cmp	r0, #0
  405264:	dd58      	ble.n	405318 <__sfvwrite_r+0xfc>
  405266:	f8da 3008 	ldr.w	r3, [sl, #8]
  40526a:	1a1b      	subs	r3, r3, r0
  40526c:	4481      	add	r9, r0
  40526e:	eba8 0800 	sub.w	r8, r8, r0
  405272:	f8ca 3008 	str.w	r3, [sl, #8]
  405276:	2b00      	cmp	r3, #0
  405278:	d1e7      	bne.n	40524a <__sfvwrite_r+0x2e>
  40527a:	2000      	movs	r0, #0
  40527c:	b003      	add	sp, #12
  40527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405282:	4621      	mov	r1, r4
  405284:	9800      	ldr	r0, [sp, #0]
  405286:	f7fe fd17 	bl	403cb8 <__swsetup_r>
  40528a:	2800      	cmp	r0, #0
  40528c:	f040 8133 	bne.w	4054f6 <__sfvwrite_r+0x2da>
  405290:	89a3      	ldrh	r3, [r4, #12]
  405292:	6835      	ldr	r5, [r6, #0]
  405294:	f013 0002 	ands.w	r0, r3, #2
  405298:	d1d2      	bne.n	405240 <__sfvwrite_r+0x24>
  40529a:	f013 0901 	ands.w	r9, r3, #1
  40529e:	d145      	bne.n	40532c <__sfvwrite_r+0x110>
  4052a0:	464f      	mov	r7, r9
  4052a2:	9601      	str	r6, [sp, #4]
  4052a4:	b337      	cbz	r7, 4052f4 <__sfvwrite_r+0xd8>
  4052a6:	059a      	lsls	r2, r3, #22
  4052a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4052ac:	f140 8083 	bpl.w	4053b6 <__sfvwrite_r+0x19a>
  4052b0:	4547      	cmp	r7, r8
  4052b2:	46c3      	mov	fp, r8
  4052b4:	f0c0 80ab 	bcc.w	40540e <__sfvwrite_r+0x1f2>
  4052b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4052bc:	f040 80ac 	bne.w	405418 <__sfvwrite_r+0x1fc>
  4052c0:	6820      	ldr	r0, [r4, #0]
  4052c2:	46ba      	mov	sl, r7
  4052c4:	465a      	mov	r2, fp
  4052c6:	4649      	mov	r1, r9
  4052c8:	f000 fd7c 	bl	405dc4 <memmove>
  4052cc:	68a2      	ldr	r2, [r4, #8]
  4052ce:	6823      	ldr	r3, [r4, #0]
  4052d0:	eba2 0208 	sub.w	r2, r2, r8
  4052d4:	445b      	add	r3, fp
  4052d6:	60a2      	str	r2, [r4, #8]
  4052d8:	6023      	str	r3, [r4, #0]
  4052da:	9a01      	ldr	r2, [sp, #4]
  4052dc:	6893      	ldr	r3, [r2, #8]
  4052de:	eba3 030a 	sub.w	r3, r3, sl
  4052e2:	44d1      	add	r9, sl
  4052e4:	eba7 070a 	sub.w	r7, r7, sl
  4052e8:	6093      	str	r3, [r2, #8]
  4052ea:	2b00      	cmp	r3, #0
  4052ec:	d0c5      	beq.n	40527a <__sfvwrite_r+0x5e>
  4052ee:	89a3      	ldrh	r3, [r4, #12]
  4052f0:	2f00      	cmp	r7, #0
  4052f2:	d1d8      	bne.n	4052a6 <__sfvwrite_r+0x8a>
  4052f4:	f8d5 9000 	ldr.w	r9, [r5]
  4052f8:	686f      	ldr	r7, [r5, #4]
  4052fa:	3508      	adds	r5, #8
  4052fc:	e7d2      	b.n	4052a4 <__sfvwrite_r+0x88>
  4052fe:	f8d5 9000 	ldr.w	r9, [r5]
  405302:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405306:	3508      	adds	r5, #8
  405308:	e79f      	b.n	40524a <__sfvwrite_r+0x2e>
  40530a:	2000      	movs	r0, #0
  40530c:	4770      	bx	lr
  40530e:	4621      	mov	r1, r4
  405310:	9800      	ldr	r0, [sp, #0]
  405312:	f7ff fda3 	bl	404e5c <_fflush_r>
  405316:	b370      	cbz	r0, 405376 <__sfvwrite_r+0x15a>
  405318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40531c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405320:	f04f 30ff 	mov.w	r0, #4294967295
  405324:	81a3      	strh	r3, [r4, #12]
  405326:	b003      	add	sp, #12
  405328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40532c:	4681      	mov	r9, r0
  40532e:	4633      	mov	r3, r6
  405330:	464e      	mov	r6, r9
  405332:	46a8      	mov	r8, r5
  405334:	469a      	mov	sl, r3
  405336:	464d      	mov	r5, r9
  405338:	b34e      	cbz	r6, 40538e <__sfvwrite_r+0x172>
  40533a:	b380      	cbz	r0, 40539e <__sfvwrite_r+0x182>
  40533c:	6820      	ldr	r0, [r4, #0]
  40533e:	6923      	ldr	r3, [r4, #16]
  405340:	6962      	ldr	r2, [r4, #20]
  405342:	45b1      	cmp	r9, r6
  405344:	46cb      	mov	fp, r9
  405346:	bf28      	it	cs
  405348:	46b3      	movcs	fp, r6
  40534a:	4298      	cmp	r0, r3
  40534c:	465f      	mov	r7, fp
  40534e:	d904      	bls.n	40535a <__sfvwrite_r+0x13e>
  405350:	68a3      	ldr	r3, [r4, #8]
  405352:	4413      	add	r3, r2
  405354:	459b      	cmp	fp, r3
  405356:	f300 80a6 	bgt.w	4054a6 <__sfvwrite_r+0x28a>
  40535a:	4593      	cmp	fp, r2
  40535c:	db4b      	blt.n	4053f6 <__sfvwrite_r+0x1da>
  40535e:	4613      	mov	r3, r2
  405360:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405362:	69e1      	ldr	r1, [r4, #28]
  405364:	9800      	ldr	r0, [sp, #0]
  405366:	462a      	mov	r2, r5
  405368:	47b8      	blx	r7
  40536a:	1e07      	subs	r7, r0, #0
  40536c:	ddd4      	ble.n	405318 <__sfvwrite_r+0xfc>
  40536e:	ebb9 0907 	subs.w	r9, r9, r7
  405372:	d0cc      	beq.n	40530e <__sfvwrite_r+0xf2>
  405374:	2001      	movs	r0, #1
  405376:	f8da 3008 	ldr.w	r3, [sl, #8]
  40537a:	1bdb      	subs	r3, r3, r7
  40537c:	443d      	add	r5, r7
  40537e:	1bf6      	subs	r6, r6, r7
  405380:	f8ca 3008 	str.w	r3, [sl, #8]
  405384:	2b00      	cmp	r3, #0
  405386:	f43f af78 	beq.w	40527a <__sfvwrite_r+0x5e>
  40538a:	2e00      	cmp	r6, #0
  40538c:	d1d5      	bne.n	40533a <__sfvwrite_r+0x11e>
  40538e:	f108 0308 	add.w	r3, r8, #8
  405392:	e913 0060 	ldmdb	r3, {r5, r6}
  405396:	4698      	mov	r8, r3
  405398:	3308      	adds	r3, #8
  40539a:	2e00      	cmp	r6, #0
  40539c:	d0f9      	beq.n	405392 <__sfvwrite_r+0x176>
  40539e:	4632      	mov	r2, r6
  4053a0:	210a      	movs	r1, #10
  4053a2:	4628      	mov	r0, r5
  4053a4:	f000 fc24 	bl	405bf0 <memchr>
  4053a8:	2800      	cmp	r0, #0
  4053aa:	f000 80a1 	beq.w	4054f0 <__sfvwrite_r+0x2d4>
  4053ae:	3001      	adds	r0, #1
  4053b0:	eba0 0905 	sub.w	r9, r0, r5
  4053b4:	e7c2      	b.n	40533c <__sfvwrite_r+0x120>
  4053b6:	6820      	ldr	r0, [r4, #0]
  4053b8:	6923      	ldr	r3, [r4, #16]
  4053ba:	4298      	cmp	r0, r3
  4053bc:	d802      	bhi.n	4053c4 <__sfvwrite_r+0x1a8>
  4053be:	6963      	ldr	r3, [r4, #20]
  4053c0:	429f      	cmp	r7, r3
  4053c2:	d25d      	bcs.n	405480 <__sfvwrite_r+0x264>
  4053c4:	45b8      	cmp	r8, r7
  4053c6:	bf28      	it	cs
  4053c8:	46b8      	movcs	r8, r7
  4053ca:	4642      	mov	r2, r8
  4053cc:	4649      	mov	r1, r9
  4053ce:	f000 fcf9 	bl	405dc4 <memmove>
  4053d2:	68a3      	ldr	r3, [r4, #8]
  4053d4:	6822      	ldr	r2, [r4, #0]
  4053d6:	eba3 0308 	sub.w	r3, r3, r8
  4053da:	4442      	add	r2, r8
  4053dc:	60a3      	str	r3, [r4, #8]
  4053de:	6022      	str	r2, [r4, #0]
  4053e0:	b10b      	cbz	r3, 4053e6 <__sfvwrite_r+0x1ca>
  4053e2:	46c2      	mov	sl, r8
  4053e4:	e779      	b.n	4052da <__sfvwrite_r+0xbe>
  4053e6:	4621      	mov	r1, r4
  4053e8:	9800      	ldr	r0, [sp, #0]
  4053ea:	f7ff fd37 	bl	404e5c <_fflush_r>
  4053ee:	2800      	cmp	r0, #0
  4053f0:	d192      	bne.n	405318 <__sfvwrite_r+0xfc>
  4053f2:	46c2      	mov	sl, r8
  4053f4:	e771      	b.n	4052da <__sfvwrite_r+0xbe>
  4053f6:	465a      	mov	r2, fp
  4053f8:	4629      	mov	r1, r5
  4053fa:	f000 fce3 	bl	405dc4 <memmove>
  4053fe:	68a2      	ldr	r2, [r4, #8]
  405400:	6823      	ldr	r3, [r4, #0]
  405402:	eba2 020b 	sub.w	r2, r2, fp
  405406:	445b      	add	r3, fp
  405408:	60a2      	str	r2, [r4, #8]
  40540a:	6023      	str	r3, [r4, #0]
  40540c:	e7af      	b.n	40536e <__sfvwrite_r+0x152>
  40540e:	6820      	ldr	r0, [r4, #0]
  405410:	46b8      	mov	r8, r7
  405412:	46ba      	mov	sl, r7
  405414:	46bb      	mov	fp, r7
  405416:	e755      	b.n	4052c4 <__sfvwrite_r+0xa8>
  405418:	6962      	ldr	r2, [r4, #20]
  40541a:	6820      	ldr	r0, [r4, #0]
  40541c:	6921      	ldr	r1, [r4, #16]
  40541e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405422:	eba0 0a01 	sub.w	sl, r0, r1
  405426:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40542a:	f10a 0001 	add.w	r0, sl, #1
  40542e:	ea4f 0868 	mov.w	r8, r8, asr #1
  405432:	4438      	add	r0, r7
  405434:	4540      	cmp	r0, r8
  405436:	4642      	mov	r2, r8
  405438:	bf84      	itt	hi
  40543a:	4680      	movhi	r8, r0
  40543c:	4642      	movhi	r2, r8
  40543e:	055b      	lsls	r3, r3, #21
  405440:	d544      	bpl.n	4054cc <__sfvwrite_r+0x2b0>
  405442:	4611      	mov	r1, r2
  405444:	9800      	ldr	r0, [sp, #0]
  405446:	f000 f921 	bl	40568c <_malloc_r>
  40544a:	4683      	mov	fp, r0
  40544c:	2800      	cmp	r0, #0
  40544e:	d055      	beq.n	4054fc <__sfvwrite_r+0x2e0>
  405450:	4652      	mov	r2, sl
  405452:	6921      	ldr	r1, [r4, #16]
  405454:	f000 fc1c 	bl	405c90 <memcpy>
  405458:	89a3      	ldrh	r3, [r4, #12]
  40545a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405462:	81a3      	strh	r3, [r4, #12]
  405464:	eb0b 000a 	add.w	r0, fp, sl
  405468:	eba8 030a 	sub.w	r3, r8, sl
  40546c:	f8c4 b010 	str.w	fp, [r4, #16]
  405470:	f8c4 8014 	str.w	r8, [r4, #20]
  405474:	6020      	str	r0, [r4, #0]
  405476:	60a3      	str	r3, [r4, #8]
  405478:	46b8      	mov	r8, r7
  40547a:	46ba      	mov	sl, r7
  40547c:	46bb      	mov	fp, r7
  40547e:	e721      	b.n	4052c4 <__sfvwrite_r+0xa8>
  405480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405484:	42b9      	cmp	r1, r7
  405486:	bf28      	it	cs
  405488:	4639      	movcs	r1, r7
  40548a:	464a      	mov	r2, r9
  40548c:	fb91 f1f3 	sdiv	r1, r1, r3
  405490:	9800      	ldr	r0, [sp, #0]
  405492:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405494:	fb03 f301 	mul.w	r3, r3, r1
  405498:	69e1      	ldr	r1, [r4, #28]
  40549a:	47b0      	blx	r6
  40549c:	f1b0 0a00 	subs.w	sl, r0, #0
  4054a0:	f73f af1b 	bgt.w	4052da <__sfvwrite_r+0xbe>
  4054a4:	e738      	b.n	405318 <__sfvwrite_r+0xfc>
  4054a6:	461a      	mov	r2, r3
  4054a8:	4629      	mov	r1, r5
  4054aa:	9301      	str	r3, [sp, #4]
  4054ac:	f000 fc8a 	bl	405dc4 <memmove>
  4054b0:	6822      	ldr	r2, [r4, #0]
  4054b2:	9b01      	ldr	r3, [sp, #4]
  4054b4:	9800      	ldr	r0, [sp, #0]
  4054b6:	441a      	add	r2, r3
  4054b8:	6022      	str	r2, [r4, #0]
  4054ba:	4621      	mov	r1, r4
  4054bc:	f7ff fcce 	bl	404e5c <_fflush_r>
  4054c0:	9b01      	ldr	r3, [sp, #4]
  4054c2:	2800      	cmp	r0, #0
  4054c4:	f47f af28 	bne.w	405318 <__sfvwrite_r+0xfc>
  4054c8:	461f      	mov	r7, r3
  4054ca:	e750      	b.n	40536e <__sfvwrite_r+0x152>
  4054cc:	9800      	ldr	r0, [sp, #0]
  4054ce:	f000 ffe3 	bl	406498 <_realloc_r>
  4054d2:	4683      	mov	fp, r0
  4054d4:	2800      	cmp	r0, #0
  4054d6:	d1c5      	bne.n	405464 <__sfvwrite_r+0x248>
  4054d8:	9d00      	ldr	r5, [sp, #0]
  4054da:	6921      	ldr	r1, [r4, #16]
  4054dc:	4628      	mov	r0, r5
  4054de:	f7ff fdb7 	bl	405050 <_free_r>
  4054e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054e6:	220c      	movs	r2, #12
  4054e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4054ec:	602a      	str	r2, [r5, #0]
  4054ee:	e715      	b.n	40531c <__sfvwrite_r+0x100>
  4054f0:	f106 0901 	add.w	r9, r6, #1
  4054f4:	e722      	b.n	40533c <__sfvwrite_r+0x120>
  4054f6:	f04f 30ff 	mov.w	r0, #4294967295
  4054fa:	e6bf      	b.n	40527c <__sfvwrite_r+0x60>
  4054fc:	9a00      	ldr	r2, [sp, #0]
  4054fe:	230c      	movs	r3, #12
  405500:	6013      	str	r3, [r2, #0]
  405502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405506:	e709      	b.n	40531c <__sfvwrite_r+0x100>
  405508:	7ffffc00 	.word	0x7ffffc00

0040550c <_fwalk_reent>:
  40550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405510:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405514:	d01f      	beq.n	405556 <_fwalk_reent+0x4a>
  405516:	4688      	mov	r8, r1
  405518:	4606      	mov	r6, r0
  40551a:	f04f 0900 	mov.w	r9, #0
  40551e:	687d      	ldr	r5, [r7, #4]
  405520:	68bc      	ldr	r4, [r7, #8]
  405522:	3d01      	subs	r5, #1
  405524:	d411      	bmi.n	40554a <_fwalk_reent+0x3e>
  405526:	89a3      	ldrh	r3, [r4, #12]
  405528:	2b01      	cmp	r3, #1
  40552a:	f105 35ff 	add.w	r5, r5, #4294967295
  40552e:	d908      	bls.n	405542 <_fwalk_reent+0x36>
  405530:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405534:	3301      	adds	r3, #1
  405536:	4621      	mov	r1, r4
  405538:	4630      	mov	r0, r6
  40553a:	d002      	beq.n	405542 <_fwalk_reent+0x36>
  40553c:	47c0      	blx	r8
  40553e:	ea49 0900 	orr.w	r9, r9, r0
  405542:	1c6b      	adds	r3, r5, #1
  405544:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405548:	d1ed      	bne.n	405526 <_fwalk_reent+0x1a>
  40554a:	683f      	ldr	r7, [r7, #0]
  40554c:	2f00      	cmp	r7, #0
  40554e:	d1e6      	bne.n	40551e <_fwalk_reent+0x12>
  405550:	4648      	mov	r0, r9
  405552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405556:	46b9      	mov	r9, r7
  405558:	4648      	mov	r0, r9
  40555a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40555e:	bf00      	nop

00405560 <_localeconv_r>:
  405560:	4a04      	ldr	r2, [pc, #16]	; (405574 <_localeconv_r+0x14>)
  405562:	4b05      	ldr	r3, [pc, #20]	; (405578 <_localeconv_r+0x18>)
  405564:	6812      	ldr	r2, [r2, #0]
  405566:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405568:	2800      	cmp	r0, #0
  40556a:	bf08      	it	eq
  40556c:	4618      	moveq	r0, r3
  40556e:	30f0      	adds	r0, #240	; 0xf0
  405570:	4770      	bx	lr
  405572:	bf00      	nop
  405574:	20400008 	.word	0x20400008
  405578:	2040084c 	.word	0x2040084c

0040557c <__retarget_lock_init_recursive>:
  40557c:	4770      	bx	lr
  40557e:	bf00      	nop

00405580 <__retarget_lock_close_recursive>:
  405580:	4770      	bx	lr
  405582:	bf00      	nop

00405584 <__retarget_lock_acquire_recursive>:
  405584:	4770      	bx	lr
  405586:	bf00      	nop

00405588 <__retarget_lock_release_recursive>:
  405588:	4770      	bx	lr
  40558a:	bf00      	nop

0040558c <__swhatbuf_r>:
  40558c:	b570      	push	{r4, r5, r6, lr}
  40558e:	460c      	mov	r4, r1
  405590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405594:	2900      	cmp	r1, #0
  405596:	b090      	sub	sp, #64	; 0x40
  405598:	4615      	mov	r5, r2
  40559a:	461e      	mov	r6, r3
  40559c:	db14      	blt.n	4055c8 <__swhatbuf_r+0x3c>
  40559e:	aa01      	add	r2, sp, #4
  4055a0:	f001 fb60 	bl	406c64 <_fstat_r>
  4055a4:	2800      	cmp	r0, #0
  4055a6:	db0f      	blt.n	4055c8 <__swhatbuf_r+0x3c>
  4055a8:	9a02      	ldr	r2, [sp, #8]
  4055aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4055ae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4055b2:	fab2 f282 	clz	r2, r2
  4055b6:	0952      	lsrs	r2, r2, #5
  4055b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4055bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4055c0:	6032      	str	r2, [r6, #0]
  4055c2:	602b      	str	r3, [r5, #0]
  4055c4:	b010      	add	sp, #64	; 0x40
  4055c6:	bd70      	pop	{r4, r5, r6, pc}
  4055c8:	89a2      	ldrh	r2, [r4, #12]
  4055ca:	2300      	movs	r3, #0
  4055cc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4055d0:	6033      	str	r3, [r6, #0]
  4055d2:	d004      	beq.n	4055de <__swhatbuf_r+0x52>
  4055d4:	2240      	movs	r2, #64	; 0x40
  4055d6:	4618      	mov	r0, r3
  4055d8:	602a      	str	r2, [r5, #0]
  4055da:	b010      	add	sp, #64	; 0x40
  4055dc:	bd70      	pop	{r4, r5, r6, pc}
  4055de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4055e2:	602b      	str	r3, [r5, #0]
  4055e4:	b010      	add	sp, #64	; 0x40
  4055e6:	bd70      	pop	{r4, r5, r6, pc}

004055e8 <__smakebuf_r>:
  4055e8:	898a      	ldrh	r2, [r1, #12]
  4055ea:	0792      	lsls	r2, r2, #30
  4055ec:	460b      	mov	r3, r1
  4055ee:	d506      	bpl.n	4055fe <__smakebuf_r+0x16>
  4055f0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4055f4:	2101      	movs	r1, #1
  4055f6:	601a      	str	r2, [r3, #0]
  4055f8:	611a      	str	r2, [r3, #16]
  4055fa:	6159      	str	r1, [r3, #20]
  4055fc:	4770      	bx	lr
  4055fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  405600:	b083      	sub	sp, #12
  405602:	ab01      	add	r3, sp, #4
  405604:	466a      	mov	r2, sp
  405606:	460c      	mov	r4, r1
  405608:	4606      	mov	r6, r0
  40560a:	f7ff ffbf 	bl	40558c <__swhatbuf_r>
  40560e:	9900      	ldr	r1, [sp, #0]
  405610:	4605      	mov	r5, r0
  405612:	4630      	mov	r0, r6
  405614:	f000 f83a 	bl	40568c <_malloc_r>
  405618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40561c:	b1d8      	cbz	r0, 405656 <__smakebuf_r+0x6e>
  40561e:	9a01      	ldr	r2, [sp, #4]
  405620:	4f15      	ldr	r7, [pc, #84]	; (405678 <__smakebuf_r+0x90>)
  405622:	9900      	ldr	r1, [sp, #0]
  405624:	63f7      	str	r7, [r6, #60]	; 0x3c
  405626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40562a:	81a3      	strh	r3, [r4, #12]
  40562c:	6020      	str	r0, [r4, #0]
  40562e:	6120      	str	r0, [r4, #16]
  405630:	6161      	str	r1, [r4, #20]
  405632:	b91a      	cbnz	r2, 40563c <__smakebuf_r+0x54>
  405634:	432b      	orrs	r3, r5
  405636:	81a3      	strh	r3, [r4, #12]
  405638:	b003      	add	sp, #12
  40563a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40563c:	4630      	mov	r0, r6
  40563e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405642:	f001 fb23 	bl	406c8c <_isatty_r>
  405646:	b1a0      	cbz	r0, 405672 <__smakebuf_r+0x8a>
  405648:	89a3      	ldrh	r3, [r4, #12]
  40564a:	f023 0303 	bic.w	r3, r3, #3
  40564e:	f043 0301 	orr.w	r3, r3, #1
  405652:	b21b      	sxth	r3, r3
  405654:	e7ee      	b.n	405634 <__smakebuf_r+0x4c>
  405656:	059a      	lsls	r2, r3, #22
  405658:	d4ee      	bmi.n	405638 <__smakebuf_r+0x50>
  40565a:	f023 0303 	bic.w	r3, r3, #3
  40565e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405662:	f043 0302 	orr.w	r3, r3, #2
  405666:	2101      	movs	r1, #1
  405668:	81a3      	strh	r3, [r4, #12]
  40566a:	6022      	str	r2, [r4, #0]
  40566c:	6122      	str	r2, [r4, #16]
  40566e:	6161      	str	r1, [r4, #20]
  405670:	e7e2      	b.n	405638 <__smakebuf_r+0x50>
  405672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405676:	e7dd      	b.n	405634 <__smakebuf_r+0x4c>
  405678:	00404eb1 	.word	0x00404eb1

0040567c <malloc>:
  40567c:	4b02      	ldr	r3, [pc, #8]	; (405688 <malloc+0xc>)
  40567e:	4601      	mov	r1, r0
  405680:	6818      	ldr	r0, [r3, #0]
  405682:	f000 b803 	b.w	40568c <_malloc_r>
  405686:	bf00      	nop
  405688:	20400008 	.word	0x20400008

0040568c <_malloc_r>:
  40568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405690:	f101 060b 	add.w	r6, r1, #11
  405694:	2e16      	cmp	r6, #22
  405696:	b083      	sub	sp, #12
  405698:	4605      	mov	r5, r0
  40569a:	f240 809e 	bls.w	4057da <_malloc_r+0x14e>
  40569e:	f036 0607 	bics.w	r6, r6, #7
  4056a2:	f100 80bd 	bmi.w	405820 <_malloc_r+0x194>
  4056a6:	42b1      	cmp	r1, r6
  4056a8:	f200 80ba 	bhi.w	405820 <_malloc_r+0x194>
  4056ac:	f000 fbee 	bl	405e8c <__malloc_lock>
  4056b0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4056b4:	f0c0 8293 	bcc.w	405bde <_malloc_r+0x552>
  4056b8:	0a73      	lsrs	r3, r6, #9
  4056ba:	f000 80b8 	beq.w	40582e <_malloc_r+0x1a2>
  4056be:	2b04      	cmp	r3, #4
  4056c0:	f200 8179 	bhi.w	4059b6 <_malloc_r+0x32a>
  4056c4:	09b3      	lsrs	r3, r6, #6
  4056c6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4056ca:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4056ce:	00c3      	lsls	r3, r0, #3
  4056d0:	4fbf      	ldr	r7, [pc, #764]	; (4059d0 <_malloc_r+0x344>)
  4056d2:	443b      	add	r3, r7
  4056d4:	f1a3 0108 	sub.w	r1, r3, #8
  4056d8:	685c      	ldr	r4, [r3, #4]
  4056da:	42a1      	cmp	r1, r4
  4056dc:	d106      	bne.n	4056ec <_malloc_r+0x60>
  4056de:	e00c      	b.n	4056fa <_malloc_r+0x6e>
  4056e0:	2a00      	cmp	r2, #0
  4056e2:	f280 80aa 	bge.w	40583a <_malloc_r+0x1ae>
  4056e6:	68e4      	ldr	r4, [r4, #12]
  4056e8:	42a1      	cmp	r1, r4
  4056ea:	d006      	beq.n	4056fa <_malloc_r+0x6e>
  4056ec:	6863      	ldr	r3, [r4, #4]
  4056ee:	f023 0303 	bic.w	r3, r3, #3
  4056f2:	1b9a      	subs	r2, r3, r6
  4056f4:	2a0f      	cmp	r2, #15
  4056f6:	ddf3      	ble.n	4056e0 <_malloc_r+0x54>
  4056f8:	4670      	mov	r0, lr
  4056fa:	693c      	ldr	r4, [r7, #16]
  4056fc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4059e4 <_malloc_r+0x358>
  405700:	4574      	cmp	r4, lr
  405702:	f000 81ab 	beq.w	405a5c <_malloc_r+0x3d0>
  405706:	6863      	ldr	r3, [r4, #4]
  405708:	f023 0303 	bic.w	r3, r3, #3
  40570c:	1b9a      	subs	r2, r3, r6
  40570e:	2a0f      	cmp	r2, #15
  405710:	f300 8190 	bgt.w	405a34 <_malloc_r+0x3a8>
  405714:	2a00      	cmp	r2, #0
  405716:	f8c7 e014 	str.w	lr, [r7, #20]
  40571a:	f8c7 e010 	str.w	lr, [r7, #16]
  40571e:	f280 809d 	bge.w	40585c <_malloc_r+0x1d0>
  405722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405726:	f080 8161 	bcs.w	4059ec <_malloc_r+0x360>
  40572a:	08db      	lsrs	r3, r3, #3
  40572c:	f103 0c01 	add.w	ip, r3, #1
  405730:	1099      	asrs	r1, r3, #2
  405732:	687a      	ldr	r2, [r7, #4]
  405734:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405738:	f8c4 8008 	str.w	r8, [r4, #8]
  40573c:	2301      	movs	r3, #1
  40573e:	408b      	lsls	r3, r1
  405740:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405744:	4313      	orrs	r3, r2
  405746:	3908      	subs	r1, #8
  405748:	60e1      	str	r1, [r4, #12]
  40574a:	607b      	str	r3, [r7, #4]
  40574c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405750:	f8c8 400c 	str.w	r4, [r8, #12]
  405754:	1082      	asrs	r2, r0, #2
  405756:	2401      	movs	r4, #1
  405758:	4094      	lsls	r4, r2
  40575a:	429c      	cmp	r4, r3
  40575c:	f200 808b 	bhi.w	405876 <_malloc_r+0x1ea>
  405760:	421c      	tst	r4, r3
  405762:	d106      	bne.n	405772 <_malloc_r+0xe6>
  405764:	f020 0003 	bic.w	r0, r0, #3
  405768:	0064      	lsls	r4, r4, #1
  40576a:	421c      	tst	r4, r3
  40576c:	f100 0004 	add.w	r0, r0, #4
  405770:	d0fa      	beq.n	405768 <_malloc_r+0xdc>
  405772:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405776:	46cc      	mov	ip, r9
  405778:	4680      	mov	r8, r0
  40577a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40577e:	459c      	cmp	ip, r3
  405780:	d107      	bne.n	405792 <_malloc_r+0x106>
  405782:	e16d      	b.n	405a60 <_malloc_r+0x3d4>
  405784:	2a00      	cmp	r2, #0
  405786:	f280 817b 	bge.w	405a80 <_malloc_r+0x3f4>
  40578a:	68db      	ldr	r3, [r3, #12]
  40578c:	459c      	cmp	ip, r3
  40578e:	f000 8167 	beq.w	405a60 <_malloc_r+0x3d4>
  405792:	6859      	ldr	r1, [r3, #4]
  405794:	f021 0103 	bic.w	r1, r1, #3
  405798:	1b8a      	subs	r2, r1, r6
  40579a:	2a0f      	cmp	r2, #15
  40579c:	ddf2      	ble.n	405784 <_malloc_r+0xf8>
  40579e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4057a2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4057a6:	9300      	str	r3, [sp, #0]
  4057a8:	199c      	adds	r4, r3, r6
  4057aa:	4628      	mov	r0, r5
  4057ac:	f046 0601 	orr.w	r6, r6, #1
  4057b0:	f042 0501 	orr.w	r5, r2, #1
  4057b4:	605e      	str	r6, [r3, #4]
  4057b6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4057ba:	f8cc 8008 	str.w	r8, [ip, #8]
  4057be:	617c      	str	r4, [r7, #20]
  4057c0:	613c      	str	r4, [r7, #16]
  4057c2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4057c6:	f8c4 e008 	str.w	lr, [r4, #8]
  4057ca:	6065      	str	r5, [r4, #4]
  4057cc:	505a      	str	r2, [r3, r1]
  4057ce:	f000 fb63 	bl	405e98 <__malloc_unlock>
  4057d2:	9b00      	ldr	r3, [sp, #0]
  4057d4:	f103 0408 	add.w	r4, r3, #8
  4057d8:	e01e      	b.n	405818 <_malloc_r+0x18c>
  4057da:	2910      	cmp	r1, #16
  4057dc:	d820      	bhi.n	405820 <_malloc_r+0x194>
  4057de:	f000 fb55 	bl	405e8c <__malloc_lock>
  4057e2:	2610      	movs	r6, #16
  4057e4:	2318      	movs	r3, #24
  4057e6:	2002      	movs	r0, #2
  4057e8:	4f79      	ldr	r7, [pc, #484]	; (4059d0 <_malloc_r+0x344>)
  4057ea:	443b      	add	r3, r7
  4057ec:	f1a3 0208 	sub.w	r2, r3, #8
  4057f0:	685c      	ldr	r4, [r3, #4]
  4057f2:	4294      	cmp	r4, r2
  4057f4:	f000 813d 	beq.w	405a72 <_malloc_r+0x3e6>
  4057f8:	6863      	ldr	r3, [r4, #4]
  4057fa:	68e1      	ldr	r1, [r4, #12]
  4057fc:	68a6      	ldr	r6, [r4, #8]
  4057fe:	f023 0303 	bic.w	r3, r3, #3
  405802:	4423      	add	r3, r4
  405804:	4628      	mov	r0, r5
  405806:	685a      	ldr	r2, [r3, #4]
  405808:	60f1      	str	r1, [r6, #12]
  40580a:	f042 0201 	orr.w	r2, r2, #1
  40580e:	608e      	str	r6, [r1, #8]
  405810:	605a      	str	r2, [r3, #4]
  405812:	f000 fb41 	bl	405e98 <__malloc_unlock>
  405816:	3408      	adds	r4, #8
  405818:	4620      	mov	r0, r4
  40581a:	b003      	add	sp, #12
  40581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405820:	2400      	movs	r4, #0
  405822:	230c      	movs	r3, #12
  405824:	4620      	mov	r0, r4
  405826:	602b      	str	r3, [r5, #0]
  405828:	b003      	add	sp, #12
  40582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40582e:	2040      	movs	r0, #64	; 0x40
  405830:	f44f 7300 	mov.w	r3, #512	; 0x200
  405834:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405838:	e74a      	b.n	4056d0 <_malloc_r+0x44>
  40583a:	4423      	add	r3, r4
  40583c:	68e1      	ldr	r1, [r4, #12]
  40583e:	685a      	ldr	r2, [r3, #4]
  405840:	68a6      	ldr	r6, [r4, #8]
  405842:	f042 0201 	orr.w	r2, r2, #1
  405846:	60f1      	str	r1, [r6, #12]
  405848:	4628      	mov	r0, r5
  40584a:	608e      	str	r6, [r1, #8]
  40584c:	605a      	str	r2, [r3, #4]
  40584e:	f000 fb23 	bl	405e98 <__malloc_unlock>
  405852:	3408      	adds	r4, #8
  405854:	4620      	mov	r0, r4
  405856:	b003      	add	sp, #12
  405858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40585c:	4423      	add	r3, r4
  40585e:	4628      	mov	r0, r5
  405860:	685a      	ldr	r2, [r3, #4]
  405862:	f042 0201 	orr.w	r2, r2, #1
  405866:	605a      	str	r2, [r3, #4]
  405868:	f000 fb16 	bl	405e98 <__malloc_unlock>
  40586c:	3408      	adds	r4, #8
  40586e:	4620      	mov	r0, r4
  405870:	b003      	add	sp, #12
  405872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405876:	68bc      	ldr	r4, [r7, #8]
  405878:	6863      	ldr	r3, [r4, #4]
  40587a:	f023 0803 	bic.w	r8, r3, #3
  40587e:	45b0      	cmp	r8, r6
  405880:	d304      	bcc.n	40588c <_malloc_r+0x200>
  405882:	eba8 0306 	sub.w	r3, r8, r6
  405886:	2b0f      	cmp	r3, #15
  405888:	f300 8085 	bgt.w	405996 <_malloc_r+0x30a>
  40588c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4059e8 <_malloc_r+0x35c>
  405890:	4b50      	ldr	r3, [pc, #320]	; (4059d4 <_malloc_r+0x348>)
  405892:	f8d9 2000 	ldr.w	r2, [r9]
  405896:	681b      	ldr	r3, [r3, #0]
  405898:	3201      	adds	r2, #1
  40589a:	4433      	add	r3, r6
  40589c:	eb04 0a08 	add.w	sl, r4, r8
  4058a0:	f000 8155 	beq.w	405b4e <_malloc_r+0x4c2>
  4058a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4058a8:	330f      	adds	r3, #15
  4058aa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4058ae:	f02b 0b0f 	bic.w	fp, fp, #15
  4058b2:	4659      	mov	r1, fp
  4058b4:	4628      	mov	r0, r5
  4058b6:	f000 ff95 	bl	4067e4 <_sbrk_r>
  4058ba:	1c41      	adds	r1, r0, #1
  4058bc:	4602      	mov	r2, r0
  4058be:	f000 80fc 	beq.w	405aba <_malloc_r+0x42e>
  4058c2:	4582      	cmp	sl, r0
  4058c4:	f200 80f7 	bhi.w	405ab6 <_malloc_r+0x42a>
  4058c8:	4b43      	ldr	r3, [pc, #268]	; (4059d8 <_malloc_r+0x34c>)
  4058ca:	6819      	ldr	r1, [r3, #0]
  4058cc:	4459      	add	r1, fp
  4058ce:	6019      	str	r1, [r3, #0]
  4058d0:	f000 814d 	beq.w	405b6e <_malloc_r+0x4e2>
  4058d4:	f8d9 0000 	ldr.w	r0, [r9]
  4058d8:	3001      	adds	r0, #1
  4058da:	bf1b      	ittet	ne
  4058dc:	eba2 0a0a 	subne.w	sl, r2, sl
  4058e0:	4451      	addne	r1, sl
  4058e2:	f8c9 2000 	streq.w	r2, [r9]
  4058e6:	6019      	strne	r1, [r3, #0]
  4058e8:	f012 0107 	ands.w	r1, r2, #7
  4058ec:	f000 8115 	beq.w	405b1a <_malloc_r+0x48e>
  4058f0:	f1c1 0008 	rsb	r0, r1, #8
  4058f4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4058f8:	4402      	add	r2, r0
  4058fa:	3108      	adds	r1, #8
  4058fc:	eb02 090b 	add.w	r9, r2, fp
  405900:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405904:	eba1 0909 	sub.w	r9, r1, r9
  405908:	4649      	mov	r1, r9
  40590a:	4628      	mov	r0, r5
  40590c:	9301      	str	r3, [sp, #4]
  40590e:	9200      	str	r2, [sp, #0]
  405910:	f000 ff68 	bl	4067e4 <_sbrk_r>
  405914:	1c43      	adds	r3, r0, #1
  405916:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40591a:	f000 8143 	beq.w	405ba4 <_malloc_r+0x518>
  40591e:	1a80      	subs	r0, r0, r2
  405920:	4448      	add	r0, r9
  405922:	f040 0001 	orr.w	r0, r0, #1
  405926:	6819      	ldr	r1, [r3, #0]
  405928:	60ba      	str	r2, [r7, #8]
  40592a:	4449      	add	r1, r9
  40592c:	42bc      	cmp	r4, r7
  40592e:	6050      	str	r0, [r2, #4]
  405930:	6019      	str	r1, [r3, #0]
  405932:	d017      	beq.n	405964 <_malloc_r+0x2d8>
  405934:	f1b8 0f0f 	cmp.w	r8, #15
  405938:	f240 80fb 	bls.w	405b32 <_malloc_r+0x4a6>
  40593c:	6860      	ldr	r0, [r4, #4]
  40593e:	f1a8 020c 	sub.w	r2, r8, #12
  405942:	f022 0207 	bic.w	r2, r2, #7
  405946:	eb04 0e02 	add.w	lr, r4, r2
  40594a:	f000 0001 	and.w	r0, r0, #1
  40594e:	f04f 0c05 	mov.w	ip, #5
  405952:	4310      	orrs	r0, r2
  405954:	2a0f      	cmp	r2, #15
  405956:	6060      	str	r0, [r4, #4]
  405958:	f8ce c004 	str.w	ip, [lr, #4]
  40595c:	f8ce c008 	str.w	ip, [lr, #8]
  405960:	f200 8117 	bhi.w	405b92 <_malloc_r+0x506>
  405964:	4b1d      	ldr	r3, [pc, #116]	; (4059dc <_malloc_r+0x350>)
  405966:	68bc      	ldr	r4, [r7, #8]
  405968:	681a      	ldr	r2, [r3, #0]
  40596a:	4291      	cmp	r1, r2
  40596c:	bf88      	it	hi
  40596e:	6019      	strhi	r1, [r3, #0]
  405970:	4b1b      	ldr	r3, [pc, #108]	; (4059e0 <_malloc_r+0x354>)
  405972:	681a      	ldr	r2, [r3, #0]
  405974:	4291      	cmp	r1, r2
  405976:	6862      	ldr	r2, [r4, #4]
  405978:	bf88      	it	hi
  40597a:	6019      	strhi	r1, [r3, #0]
  40597c:	f022 0203 	bic.w	r2, r2, #3
  405980:	4296      	cmp	r6, r2
  405982:	eba2 0306 	sub.w	r3, r2, r6
  405986:	d801      	bhi.n	40598c <_malloc_r+0x300>
  405988:	2b0f      	cmp	r3, #15
  40598a:	dc04      	bgt.n	405996 <_malloc_r+0x30a>
  40598c:	4628      	mov	r0, r5
  40598e:	f000 fa83 	bl	405e98 <__malloc_unlock>
  405992:	2400      	movs	r4, #0
  405994:	e740      	b.n	405818 <_malloc_r+0x18c>
  405996:	19a2      	adds	r2, r4, r6
  405998:	f043 0301 	orr.w	r3, r3, #1
  40599c:	f046 0601 	orr.w	r6, r6, #1
  4059a0:	6066      	str	r6, [r4, #4]
  4059a2:	4628      	mov	r0, r5
  4059a4:	60ba      	str	r2, [r7, #8]
  4059a6:	6053      	str	r3, [r2, #4]
  4059a8:	f000 fa76 	bl	405e98 <__malloc_unlock>
  4059ac:	3408      	adds	r4, #8
  4059ae:	4620      	mov	r0, r4
  4059b0:	b003      	add	sp, #12
  4059b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059b6:	2b14      	cmp	r3, #20
  4059b8:	d971      	bls.n	405a9e <_malloc_r+0x412>
  4059ba:	2b54      	cmp	r3, #84	; 0x54
  4059bc:	f200 80a3 	bhi.w	405b06 <_malloc_r+0x47a>
  4059c0:	0b33      	lsrs	r3, r6, #12
  4059c2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4059c6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4059ca:	00c3      	lsls	r3, r0, #3
  4059cc:	e680      	b.n	4056d0 <_malloc_r+0x44>
  4059ce:	bf00      	nop
  4059d0:	2040043c 	.word	0x2040043c
  4059d4:	20400a7c 	.word	0x20400a7c
  4059d8:	20400a4c 	.word	0x20400a4c
  4059dc:	20400a74 	.word	0x20400a74
  4059e0:	20400a78 	.word	0x20400a78
  4059e4:	20400444 	.word	0x20400444
  4059e8:	20400844 	.word	0x20400844
  4059ec:	0a5a      	lsrs	r2, r3, #9
  4059ee:	2a04      	cmp	r2, #4
  4059f0:	d95b      	bls.n	405aaa <_malloc_r+0x41e>
  4059f2:	2a14      	cmp	r2, #20
  4059f4:	f200 80ae 	bhi.w	405b54 <_malloc_r+0x4c8>
  4059f8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4059fc:	00c9      	lsls	r1, r1, #3
  4059fe:	325b      	adds	r2, #91	; 0x5b
  405a00:	eb07 0c01 	add.w	ip, r7, r1
  405a04:	5879      	ldr	r1, [r7, r1]
  405a06:	f1ac 0c08 	sub.w	ip, ip, #8
  405a0a:	458c      	cmp	ip, r1
  405a0c:	f000 8088 	beq.w	405b20 <_malloc_r+0x494>
  405a10:	684a      	ldr	r2, [r1, #4]
  405a12:	f022 0203 	bic.w	r2, r2, #3
  405a16:	4293      	cmp	r3, r2
  405a18:	d273      	bcs.n	405b02 <_malloc_r+0x476>
  405a1a:	6889      	ldr	r1, [r1, #8]
  405a1c:	458c      	cmp	ip, r1
  405a1e:	d1f7      	bne.n	405a10 <_malloc_r+0x384>
  405a20:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405a24:	687b      	ldr	r3, [r7, #4]
  405a26:	60e2      	str	r2, [r4, #12]
  405a28:	f8c4 c008 	str.w	ip, [r4, #8]
  405a2c:	6094      	str	r4, [r2, #8]
  405a2e:	f8cc 400c 	str.w	r4, [ip, #12]
  405a32:	e68f      	b.n	405754 <_malloc_r+0xc8>
  405a34:	19a1      	adds	r1, r4, r6
  405a36:	f046 0c01 	orr.w	ip, r6, #1
  405a3a:	f042 0601 	orr.w	r6, r2, #1
  405a3e:	f8c4 c004 	str.w	ip, [r4, #4]
  405a42:	4628      	mov	r0, r5
  405a44:	6179      	str	r1, [r7, #20]
  405a46:	6139      	str	r1, [r7, #16]
  405a48:	f8c1 e00c 	str.w	lr, [r1, #12]
  405a4c:	f8c1 e008 	str.w	lr, [r1, #8]
  405a50:	604e      	str	r6, [r1, #4]
  405a52:	50e2      	str	r2, [r4, r3]
  405a54:	f000 fa20 	bl	405e98 <__malloc_unlock>
  405a58:	3408      	adds	r4, #8
  405a5a:	e6dd      	b.n	405818 <_malloc_r+0x18c>
  405a5c:	687b      	ldr	r3, [r7, #4]
  405a5e:	e679      	b.n	405754 <_malloc_r+0xc8>
  405a60:	f108 0801 	add.w	r8, r8, #1
  405a64:	f018 0f03 	tst.w	r8, #3
  405a68:	f10c 0c08 	add.w	ip, ip, #8
  405a6c:	f47f ae85 	bne.w	40577a <_malloc_r+0xee>
  405a70:	e02d      	b.n	405ace <_malloc_r+0x442>
  405a72:	68dc      	ldr	r4, [r3, #12]
  405a74:	42a3      	cmp	r3, r4
  405a76:	bf08      	it	eq
  405a78:	3002      	addeq	r0, #2
  405a7a:	f43f ae3e 	beq.w	4056fa <_malloc_r+0x6e>
  405a7e:	e6bb      	b.n	4057f8 <_malloc_r+0x16c>
  405a80:	4419      	add	r1, r3
  405a82:	461c      	mov	r4, r3
  405a84:	684a      	ldr	r2, [r1, #4]
  405a86:	68db      	ldr	r3, [r3, #12]
  405a88:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405a8c:	f042 0201 	orr.w	r2, r2, #1
  405a90:	604a      	str	r2, [r1, #4]
  405a92:	4628      	mov	r0, r5
  405a94:	60f3      	str	r3, [r6, #12]
  405a96:	609e      	str	r6, [r3, #8]
  405a98:	f000 f9fe 	bl	405e98 <__malloc_unlock>
  405a9c:	e6bc      	b.n	405818 <_malloc_r+0x18c>
  405a9e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405aa2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405aa6:	00c3      	lsls	r3, r0, #3
  405aa8:	e612      	b.n	4056d0 <_malloc_r+0x44>
  405aaa:	099a      	lsrs	r2, r3, #6
  405aac:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405ab0:	00c9      	lsls	r1, r1, #3
  405ab2:	3238      	adds	r2, #56	; 0x38
  405ab4:	e7a4      	b.n	405a00 <_malloc_r+0x374>
  405ab6:	42bc      	cmp	r4, r7
  405ab8:	d054      	beq.n	405b64 <_malloc_r+0x4d8>
  405aba:	68bc      	ldr	r4, [r7, #8]
  405abc:	6862      	ldr	r2, [r4, #4]
  405abe:	f022 0203 	bic.w	r2, r2, #3
  405ac2:	e75d      	b.n	405980 <_malloc_r+0x2f4>
  405ac4:	f859 3908 	ldr.w	r3, [r9], #-8
  405ac8:	4599      	cmp	r9, r3
  405aca:	f040 8086 	bne.w	405bda <_malloc_r+0x54e>
  405ace:	f010 0f03 	tst.w	r0, #3
  405ad2:	f100 30ff 	add.w	r0, r0, #4294967295
  405ad6:	d1f5      	bne.n	405ac4 <_malloc_r+0x438>
  405ad8:	687b      	ldr	r3, [r7, #4]
  405ada:	ea23 0304 	bic.w	r3, r3, r4
  405ade:	607b      	str	r3, [r7, #4]
  405ae0:	0064      	lsls	r4, r4, #1
  405ae2:	429c      	cmp	r4, r3
  405ae4:	f63f aec7 	bhi.w	405876 <_malloc_r+0x1ea>
  405ae8:	2c00      	cmp	r4, #0
  405aea:	f43f aec4 	beq.w	405876 <_malloc_r+0x1ea>
  405aee:	421c      	tst	r4, r3
  405af0:	4640      	mov	r0, r8
  405af2:	f47f ae3e 	bne.w	405772 <_malloc_r+0xe6>
  405af6:	0064      	lsls	r4, r4, #1
  405af8:	421c      	tst	r4, r3
  405afa:	f100 0004 	add.w	r0, r0, #4
  405afe:	d0fa      	beq.n	405af6 <_malloc_r+0x46a>
  405b00:	e637      	b.n	405772 <_malloc_r+0xe6>
  405b02:	468c      	mov	ip, r1
  405b04:	e78c      	b.n	405a20 <_malloc_r+0x394>
  405b06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405b0a:	d815      	bhi.n	405b38 <_malloc_r+0x4ac>
  405b0c:	0bf3      	lsrs	r3, r6, #15
  405b0e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405b12:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405b16:	00c3      	lsls	r3, r0, #3
  405b18:	e5da      	b.n	4056d0 <_malloc_r+0x44>
  405b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405b1e:	e6ed      	b.n	4058fc <_malloc_r+0x270>
  405b20:	687b      	ldr	r3, [r7, #4]
  405b22:	1092      	asrs	r2, r2, #2
  405b24:	2101      	movs	r1, #1
  405b26:	fa01 f202 	lsl.w	r2, r1, r2
  405b2a:	4313      	orrs	r3, r2
  405b2c:	607b      	str	r3, [r7, #4]
  405b2e:	4662      	mov	r2, ip
  405b30:	e779      	b.n	405a26 <_malloc_r+0x39a>
  405b32:	2301      	movs	r3, #1
  405b34:	6053      	str	r3, [r2, #4]
  405b36:	e729      	b.n	40598c <_malloc_r+0x300>
  405b38:	f240 5254 	movw	r2, #1364	; 0x554
  405b3c:	4293      	cmp	r3, r2
  405b3e:	d822      	bhi.n	405b86 <_malloc_r+0x4fa>
  405b40:	0cb3      	lsrs	r3, r6, #18
  405b42:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405b46:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405b4a:	00c3      	lsls	r3, r0, #3
  405b4c:	e5c0      	b.n	4056d0 <_malloc_r+0x44>
  405b4e:	f103 0b10 	add.w	fp, r3, #16
  405b52:	e6ae      	b.n	4058b2 <_malloc_r+0x226>
  405b54:	2a54      	cmp	r2, #84	; 0x54
  405b56:	d829      	bhi.n	405bac <_malloc_r+0x520>
  405b58:	0b1a      	lsrs	r2, r3, #12
  405b5a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405b5e:	00c9      	lsls	r1, r1, #3
  405b60:	326e      	adds	r2, #110	; 0x6e
  405b62:	e74d      	b.n	405a00 <_malloc_r+0x374>
  405b64:	4b20      	ldr	r3, [pc, #128]	; (405be8 <_malloc_r+0x55c>)
  405b66:	6819      	ldr	r1, [r3, #0]
  405b68:	4459      	add	r1, fp
  405b6a:	6019      	str	r1, [r3, #0]
  405b6c:	e6b2      	b.n	4058d4 <_malloc_r+0x248>
  405b6e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405b72:	2800      	cmp	r0, #0
  405b74:	f47f aeae 	bne.w	4058d4 <_malloc_r+0x248>
  405b78:	eb08 030b 	add.w	r3, r8, fp
  405b7c:	68ba      	ldr	r2, [r7, #8]
  405b7e:	f043 0301 	orr.w	r3, r3, #1
  405b82:	6053      	str	r3, [r2, #4]
  405b84:	e6ee      	b.n	405964 <_malloc_r+0x2d8>
  405b86:	207f      	movs	r0, #127	; 0x7f
  405b88:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405b8c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405b90:	e59e      	b.n	4056d0 <_malloc_r+0x44>
  405b92:	f104 0108 	add.w	r1, r4, #8
  405b96:	4628      	mov	r0, r5
  405b98:	9300      	str	r3, [sp, #0]
  405b9a:	f7ff fa59 	bl	405050 <_free_r>
  405b9e:	9b00      	ldr	r3, [sp, #0]
  405ba0:	6819      	ldr	r1, [r3, #0]
  405ba2:	e6df      	b.n	405964 <_malloc_r+0x2d8>
  405ba4:	2001      	movs	r0, #1
  405ba6:	f04f 0900 	mov.w	r9, #0
  405baa:	e6bc      	b.n	405926 <_malloc_r+0x29a>
  405bac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405bb0:	d805      	bhi.n	405bbe <_malloc_r+0x532>
  405bb2:	0bda      	lsrs	r2, r3, #15
  405bb4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405bb8:	00c9      	lsls	r1, r1, #3
  405bba:	3277      	adds	r2, #119	; 0x77
  405bbc:	e720      	b.n	405a00 <_malloc_r+0x374>
  405bbe:	f240 5154 	movw	r1, #1364	; 0x554
  405bc2:	428a      	cmp	r2, r1
  405bc4:	d805      	bhi.n	405bd2 <_malloc_r+0x546>
  405bc6:	0c9a      	lsrs	r2, r3, #18
  405bc8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405bcc:	00c9      	lsls	r1, r1, #3
  405bce:	327c      	adds	r2, #124	; 0x7c
  405bd0:	e716      	b.n	405a00 <_malloc_r+0x374>
  405bd2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405bd6:	227e      	movs	r2, #126	; 0x7e
  405bd8:	e712      	b.n	405a00 <_malloc_r+0x374>
  405bda:	687b      	ldr	r3, [r7, #4]
  405bdc:	e780      	b.n	405ae0 <_malloc_r+0x454>
  405bde:	08f0      	lsrs	r0, r6, #3
  405be0:	f106 0308 	add.w	r3, r6, #8
  405be4:	e600      	b.n	4057e8 <_malloc_r+0x15c>
  405be6:	bf00      	nop
  405be8:	20400a4c 	.word	0x20400a4c
  405bec:	00000000 	.word	0x00000000

00405bf0 <memchr>:
  405bf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405bf4:	2a10      	cmp	r2, #16
  405bf6:	db2b      	blt.n	405c50 <memchr+0x60>
  405bf8:	f010 0f07 	tst.w	r0, #7
  405bfc:	d008      	beq.n	405c10 <memchr+0x20>
  405bfe:	f810 3b01 	ldrb.w	r3, [r0], #1
  405c02:	3a01      	subs	r2, #1
  405c04:	428b      	cmp	r3, r1
  405c06:	d02d      	beq.n	405c64 <memchr+0x74>
  405c08:	f010 0f07 	tst.w	r0, #7
  405c0c:	b342      	cbz	r2, 405c60 <memchr+0x70>
  405c0e:	d1f6      	bne.n	405bfe <memchr+0xe>
  405c10:	b4f0      	push	{r4, r5, r6, r7}
  405c12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405c16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405c1a:	f022 0407 	bic.w	r4, r2, #7
  405c1e:	f07f 0700 	mvns.w	r7, #0
  405c22:	2300      	movs	r3, #0
  405c24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405c28:	3c08      	subs	r4, #8
  405c2a:	ea85 0501 	eor.w	r5, r5, r1
  405c2e:	ea86 0601 	eor.w	r6, r6, r1
  405c32:	fa85 f547 	uadd8	r5, r5, r7
  405c36:	faa3 f587 	sel	r5, r3, r7
  405c3a:	fa86 f647 	uadd8	r6, r6, r7
  405c3e:	faa5 f687 	sel	r6, r5, r7
  405c42:	b98e      	cbnz	r6, 405c68 <memchr+0x78>
  405c44:	d1ee      	bne.n	405c24 <memchr+0x34>
  405c46:	bcf0      	pop	{r4, r5, r6, r7}
  405c48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405c4c:	f002 0207 	and.w	r2, r2, #7
  405c50:	b132      	cbz	r2, 405c60 <memchr+0x70>
  405c52:	f810 3b01 	ldrb.w	r3, [r0], #1
  405c56:	3a01      	subs	r2, #1
  405c58:	ea83 0301 	eor.w	r3, r3, r1
  405c5c:	b113      	cbz	r3, 405c64 <memchr+0x74>
  405c5e:	d1f8      	bne.n	405c52 <memchr+0x62>
  405c60:	2000      	movs	r0, #0
  405c62:	4770      	bx	lr
  405c64:	3801      	subs	r0, #1
  405c66:	4770      	bx	lr
  405c68:	2d00      	cmp	r5, #0
  405c6a:	bf06      	itte	eq
  405c6c:	4635      	moveq	r5, r6
  405c6e:	3803      	subeq	r0, #3
  405c70:	3807      	subne	r0, #7
  405c72:	f015 0f01 	tst.w	r5, #1
  405c76:	d107      	bne.n	405c88 <memchr+0x98>
  405c78:	3001      	adds	r0, #1
  405c7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405c7e:	bf02      	ittt	eq
  405c80:	3001      	addeq	r0, #1
  405c82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405c86:	3001      	addeq	r0, #1
  405c88:	bcf0      	pop	{r4, r5, r6, r7}
  405c8a:	3801      	subs	r0, #1
  405c8c:	4770      	bx	lr
  405c8e:	bf00      	nop

00405c90 <memcpy>:
  405c90:	4684      	mov	ip, r0
  405c92:	ea41 0300 	orr.w	r3, r1, r0
  405c96:	f013 0303 	ands.w	r3, r3, #3
  405c9a:	d16d      	bne.n	405d78 <memcpy+0xe8>
  405c9c:	3a40      	subs	r2, #64	; 0x40
  405c9e:	d341      	bcc.n	405d24 <memcpy+0x94>
  405ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ca4:	f840 3b04 	str.w	r3, [r0], #4
  405ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cac:	f840 3b04 	str.w	r3, [r0], #4
  405cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cb4:	f840 3b04 	str.w	r3, [r0], #4
  405cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cbc:	f840 3b04 	str.w	r3, [r0], #4
  405cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cc4:	f840 3b04 	str.w	r3, [r0], #4
  405cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ccc:	f840 3b04 	str.w	r3, [r0], #4
  405cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cd4:	f840 3b04 	str.w	r3, [r0], #4
  405cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cdc:	f840 3b04 	str.w	r3, [r0], #4
  405ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ce4:	f840 3b04 	str.w	r3, [r0], #4
  405ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cec:	f840 3b04 	str.w	r3, [r0], #4
  405cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cf4:	f840 3b04 	str.w	r3, [r0], #4
  405cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cfc:	f840 3b04 	str.w	r3, [r0], #4
  405d00:	f851 3b04 	ldr.w	r3, [r1], #4
  405d04:	f840 3b04 	str.w	r3, [r0], #4
  405d08:	f851 3b04 	ldr.w	r3, [r1], #4
  405d0c:	f840 3b04 	str.w	r3, [r0], #4
  405d10:	f851 3b04 	ldr.w	r3, [r1], #4
  405d14:	f840 3b04 	str.w	r3, [r0], #4
  405d18:	f851 3b04 	ldr.w	r3, [r1], #4
  405d1c:	f840 3b04 	str.w	r3, [r0], #4
  405d20:	3a40      	subs	r2, #64	; 0x40
  405d22:	d2bd      	bcs.n	405ca0 <memcpy+0x10>
  405d24:	3230      	adds	r2, #48	; 0x30
  405d26:	d311      	bcc.n	405d4c <memcpy+0xbc>
  405d28:	f851 3b04 	ldr.w	r3, [r1], #4
  405d2c:	f840 3b04 	str.w	r3, [r0], #4
  405d30:	f851 3b04 	ldr.w	r3, [r1], #4
  405d34:	f840 3b04 	str.w	r3, [r0], #4
  405d38:	f851 3b04 	ldr.w	r3, [r1], #4
  405d3c:	f840 3b04 	str.w	r3, [r0], #4
  405d40:	f851 3b04 	ldr.w	r3, [r1], #4
  405d44:	f840 3b04 	str.w	r3, [r0], #4
  405d48:	3a10      	subs	r2, #16
  405d4a:	d2ed      	bcs.n	405d28 <memcpy+0x98>
  405d4c:	320c      	adds	r2, #12
  405d4e:	d305      	bcc.n	405d5c <memcpy+0xcc>
  405d50:	f851 3b04 	ldr.w	r3, [r1], #4
  405d54:	f840 3b04 	str.w	r3, [r0], #4
  405d58:	3a04      	subs	r2, #4
  405d5a:	d2f9      	bcs.n	405d50 <memcpy+0xc0>
  405d5c:	3204      	adds	r2, #4
  405d5e:	d008      	beq.n	405d72 <memcpy+0xe2>
  405d60:	07d2      	lsls	r2, r2, #31
  405d62:	bf1c      	itt	ne
  405d64:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405d68:	f800 3b01 	strbne.w	r3, [r0], #1
  405d6c:	d301      	bcc.n	405d72 <memcpy+0xe2>
  405d6e:	880b      	ldrh	r3, [r1, #0]
  405d70:	8003      	strh	r3, [r0, #0]
  405d72:	4660      	mov	r0, ip
  405d74:	4770      	bx	lr
  405d76:	bf00      	nop
  405d78:	2a08      	cmp	r2, #8
  405d7a:	d313      	bcc.n	405da4 <memcpy+0x114>
  405d7c:	078b      	lsls	r3, r1, #30
  405d7e:	d08d      	beq.n	405c9c <memcpy+0xc>
  405d80:	f010 0303 	ands.w	r3, r0, #3
  405d84:	d08a      	beq.n	405c9c <memcpy+0xc>
  405d86:	f1c3 0304 	rsb	r3, r3, #4
  405d8a:	1ad2      	subs	r2, r2, r3
  405d8c:	07db      	lsls	r3, r3, #31
  405d8e:	bf1c      	itt	ne
  405d90:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405d94:	f800 3b01 	strbne.w	r3, [r0], #1
  405d98:	d380      	bcc.n	405c9c <memcpy+0xc>
  405d9a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405d9e:	f820 3b02 	strh.w	r3, [r0], #2
  405da2:	e77b      	b.n	405c9c <memcpy+0xc>
  405da4:	3a04      	subs	r2, #4
  405da6:	d3d9      	bcc.n	405d5c <memcpy+0xcc>
  405da8:	3a01      	subs	r2, #1
  405daa:	f811 3b01 	ldrb.w	r3, [r1], #1
  405dae:	f800 3b01 	strb.w	r3, [r0], #1
  405db2:	d2f9      	bcs.n	405da8 <memcpy+0x118>
  405db4:	780b      	ldrb	r3, [r1, #0]
  405db6:	7003      	strb	r3, [r0, #0]
  405db8:	784b      	ldrb	r3, [r1, #1]
  405dba:	7043      	strb	r3, [r0, #1]
  405dbc:	788b      	ldrb	r3, [r1, #2]
  405dbe:	7083      	strb	r3, [r0, #2]
  405dc0:	4660      	mov	r0, ip
  405dc2:	4770      	bx	lr

00405dc4 <memmove>:
  405dc4:	4288      	cmp	r0, r1
  405dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
  405dc8:	d90d      	bls.n	405de6 <memmove+0x22>
  405dca:	188b      	adds	r3, r1, r2
  405dcc:	4298      	cmp	r0, r3
  405dce:	d20a      	bcs.n	405de6 <memmove+0x22>
  405dd0:	1884      	adds	r4, r0, r2
  405dd2:	2a00      	cmp	r2, #0
  405dd4:	d051      	beq.n	405e7a <memmove+0xb6>
  405dd6:	4622      	mov	r2, r4
  405dd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405ddc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405de0:	4299      	cmp	r1, r3
  405de2:	d1f9      	bne.n	405dd8 <memmove+0x14>
  405de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405de6:	2a0f      	cmp	r2, #15
  405de8:	d948      	bls.n	405e7c <memmove+0xb8>
  405dea:	ea41 0300 	orr.w	r3, r1, r0
  405dee:	079b      	lsls	r3, r3, #30
  405df0:	d146      	bne.n	405e80 <memmove+0xbc>
  405df2:	f100 0410 	add.w	r4, r0, #16
  405df6:	f101 0310 	add.w	r3, r1, #16
  405dfa:	4615      	mov	r5, r2
  405dfc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405e00:	f844 6c10 	str.w	r6, [r4, #-16]
  405e04:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405e08:	f844 6c0c 	str.w	r6, [r4, #-12]
  405e0c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405e10:	f844 6c08 	str.w	r6, [r4, #-8]
  405e14:	3d10      	subs	r5, #16
  405e16:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405e1a:	f844 6c04 	str.w	r6, [r4, #-4]
  405e1e:	2d0f      	cmp	r5, #15
  405e20:	f103 0310 	add.w	r3, r3, #16
  405e24:	f104 0410 	add.w	r4, r4, #16
  405e28:	d8e8      	bhi.n	405dfc <memmove+0x38>
  405e2a:	f1a2 0310 	sub.w	r3, r2, #16
  405e2e:	f023 030f 	bic.w	r3, r3, #15
  405e32:	f002 0e0f 	and.w	lr, r2, #15
  405e36:	3310      	adds	r3, #16
  405e38:	f1be 0f03 	cmp.w	lr, #3
  405e3c:	4419      	add	r1, r3
  405e3e:	4403      	add	r3, r0
  405e40:	d921      	bls.n	405e86 <memmove+0xc2>
  405e42:	1f1e      	subs	r6, r3, #4
  405e44:	460d      	mov	r5, r1
  405e46:	4674      	mov	r4, lr
  405e48:	3c04      	subs	r4, #4
  405e4a:	f855 7b04 	ldr.w	r7, [r5], #4
  405e4e:	f846 7f04 	str.w	r7, [r6, #4]!
  405e52:	2c03      	cmp	r4, #3
  405e54:	d8f8      	bhi.n	405e48 <memmove+0x84>
  405e56:	f1ae 0404 	sub.w	r4, lr, #4
  405e5a:	f024 0403 	bic.w	r4, r4, #3
  405e5e:	3404      	adds	r4, #4
  405e60:	4421      	add	r1, r4
  405e62:	4423      	add	r3, r4
  405e64:	f002 0203 	and.w	r2, r2, #3
  405e68:	b162      	cbz	r2, 405e84 <memmove+0xc0>
  405e6a:	3b01      	subs	r3, #1
  405e6c:	440a      	add	r2, r1
  405e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405e72:	f803 4f01 	strb.w	r4, [r3, #1]!
  405e76:	428a      	cmp	r2, r1
  405e78:	d1f9      	bne.n	405e6e <memmove+0xaa>
  405e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e7c:	4603      	mov	r3, r0
  405e7e:	e7f3      	b.n	405e68 <memmove+0xa4>
  405e80:	4603      	mov	r3, r0
  405e82:	e7f2      	b.n	405e6a <memmove+0xa6>
  405e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e86:	4672      	mov	r2, lr
  405e88:	e7ee      	b.n	405e68 <memmove+0xa4>
  405e8a:	bf00      	nop

00405e8c <__malloc_lock>:
  405e8c:	4801      	ldr	r0, [pc, #4]	; (405e94 <__malloc_lock+0x8>)
  405e8e:	f7ff bb79 	b.w	405584 <__retarget_lock_acquire_recursive>
  405e92:	bf00      	nop
  405e94:	20400a9c 	.word	0x20400a9c

00405e98 <__malloc_unlock>:
  405e98:	4801      	ldr	r0, [pc, #4]	; (405ea0 <__malloc_unlock+0x8>)
  405e9a:	f7ff bb75 	b.w	405588 <__retarget_lock_release_recursive>
  405e9e:	bf00      	nop
  405ea0:	20400a9c 	.word	0x20400a9c

00405ea4 <_Balloc>:
  405ea4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405ea6:	b570      	push	{r4, r5, r6, lr}
  405ea8:	4605      	mov	r5, r0
  405eaa:	460c      	mov	r4, r1
  405eac:	b14b      	cbz	r3, 405ec2 <_Balloc+0x1e>
  405eae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  405eb2:	b180      	cbz	r0, 405ed6 <_Balloc+0x32>
  405eb4:	6802      	ldr	r2, [r0, #0]
  405eb6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405eba:	2300      	movs	r3, #0
  405ebc:	6103      	str	r3, [r0, #16]
  405ebe:	60c3      	str	r3, [r0, #12]
  405ec0:	bd70      	pop	{r4, r5, r6, pc}
  405ec2:	2221      	movs	r2, #33	; 0x21
  405ec4:	2104      	movs	r1, #4
  405ec6:	f000 fda5 	bl	406a14 <_calloc_r>
  405eca:	64e8      	str	r0, [r5, #76]	; 0x4c
  405ecc:	4603      	mov	r3, r0
  405ece:	2800      	cmp	r0, #0
  405ed0:	d1ed      	bne.n	405eae <_Balloc+0xa>
  405ed2:	2000      	movs	r0, #0
  405ed4:	bd70      	pop	{r4, r5, r6, pc}
  405ed6:	2101      	movs	r1, #1
  405ed8:	fa01 f604 	lsl.w	r6, r1, r4
  405edc:	1d72      	adds	r2, r6, #5
  405ede:	4628      	mov	r0, r5
  405ee0:	0092      	lsls	r2, r2, #2
  405ee2:	f000 fd97 	bl	406a14 <_calloc_r>
  405ee6:	2800      	cmp	r0, #0
  405ee8:	d0f3      	beq.n	405ed2 <_Balloc+0x2e>
  405eea:	6044      	str	r4, [r0, #4]
  405eec:	6086      	str	r6, [r0, #8]
  405eee:	e7e4      	b.n	405eba <_Balloc+0x16>

00405ef0 <_Bfree>:
  405ef0:	b131      	cbz	r1, 405f00 <_Bfree+0x10>
  405ef2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405ef4:	684a      	ldr	r2, [r1, #4]
  405ef6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405efa:	6008      	str	r0, [r1, #0]
  405efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405f00:	4770      	bx	lr
  405f02:	bf00      	nop

00405f04 <__multadd>:
  405f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f06:	690c      	ldr	r4, [r1, #16]
  405f08:	b083      	sub	sp, #12
  405f0a:	460d      	mov	r5, r1
  405f0c:	4606      	mov	r6, r0
  405f0e:	f101 0e14 	add.w	lr, r1, #20
  405f12:	2700      	movs	r7, #0
  405f14:	f8de 0000 	ldr.w	r0, [lr]
  405f18:	b281      	uxth	r1, r0
  405f1a:	fb02 3301 	mla	r3, r2, r1, r3
  405f1e:	0c01      	lsrs	r1, r0, #16
  405f20:	0c18      	lsrs	r0, r3, #16
  405f22:	fb02 0101 	mla	r1, r2, r1, r0
  405f26:	b29b      	uxth	r3, r3
  405f28:	3701      	adds	r7, #1
  405f2a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  405f2e:	42bc      	cmp	r4, r7
  405f30:	f84e 3b04 	str.w	r3, [lr], #4
  405f34:	ea4f 4311 	mov.w	r3, r1, lsr #16
  405f38:	dcec      	bgt.n	405f14 <__multadd+0x10>
  405f3a:	b13b      	cbz	r3, 405f4c <__multadd+0x48>
  405f3c:	68aa      	ldr	r2, [r5, #8]
  405f3e:	4294      	cmp	r4, r2
  405f40:	da07      	bge.n	405f52 <__multadd+0x4e>
  405f42:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  405f46:	3401      	adds	r4, #1
  405f48:	6153      	str	r3, [r2, #20]
  405f4a:	612c      	str	r4, [r5, #16]
  405f4c:	4628      	mov	r0, r5
  405f4e:	b003      	add	sp, #12
  405f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f52:	6869      	ldr	r1, [r5, #4]
  405f54:	9301      	str	r3, [sp, #4]
  405f56:	3101      	adds	r1, #1
  405f58:	4630      	mov	r0, r6
  405f5a:	f7ff ffa3 	bl	405ea4 <_Balloc>
  405f5e:	692a      	ldr	r2, [r5, #16]
  405f60:	3202      	adds	r2, #2
  405f62:	f105 010c 	add.w	r1, r5, #12
  405f66:	4607      	mov	r7, r0
  405f68:	0092      	lsls	r2, r2, #2
  405f6a:	300c      	adds	r0, #12
  405f6c:	f7ff fe90 	bl	405c90 <memcpy>
  405f70:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  405f72:	6869      	ldr	r1, [r5, #4]
  405f74:	9b01      	ldr	r3, [sp, #4]
  405f76:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405f7a:	6028      	str	r0, [r5, #0]
  405f7c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405f80:	463d      	mov	r5, r7
  405f82:	e7de      	b.n	405f42 <__multadd+0x3e>

00405f84 <__hi0bits>:
  405f84:	0c02      	lsrs	r2, r0, #16
  405f86:	0412      	lsls	r2, r2, #16
  405f88:	4603      	mov	r3, r0
  405f8a:	b9b2      	cbnz	r2, 405fba <__hi0bits+0x36>
  405f8c:	0403      	lsls	r3, r0, #16
  405f8e:	2010      	movs	r0, #16
  405f90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  405f94:	bf04      	itt	eq
  405f96:	021b      	lsleq	r3, r3, #8
  405f98:	3008      	addeq	r0, #8
  405f9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405f9e:	bf04      	itt	eq
  405fa0:	011b      	lsleq	r3, r3, #4
  405fa2:	3004      	addeq	r0, #4
  405fa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405fa8:	bf04      	itt	eq
  405faa:	009b      	lsleq	r3, r3, #2
  405fac:	3002      	addeq	r0, #2
  405fae:	2b00      	cmp	r3, #0
  405fb0:	db02      	blt.n	405fb8 <__hi0bits+0x34>
  405fb2:	005b      	lsls	r3, r3, #1
  405fb4:	d403      	bmi.n	405fbe <__hi0bits+0x3a>
  405fb6:	2020      	movs	r0, #32
  405fb8:	4770      	bx	lr
  405fba:	2000      	movs	r0, #0
  405fbc:	e7e8      	b.n	405f90 <__hi0bits+0xc>
  405fbe:	3001      	adds	r0, #1
  405fc0:	4770      	bx	lr
  405fc2:	bf00      	nop

00405fc4 <__lo0bits>:
  405fc4:	6803      	ldr	r3, [r0, #0]
  405fc6:	f013 0207 	ands.w	r2, r3, #7
  405fca:	4601      	mov	r1, r0
  405fcc:	d007      	beq.n	405fde <__lo0bits+0x1a>
  405fce:	07da      	lsls	r2, r3, #31
  405fd0:	d421      	bmi.n	406016 <__lo0bits+0x52>
  405fd2:	0798      	lsls	r0, r3, #30
  405fd4:	d421      	bmi.n	40601a <__lo0bits+0x56>
  405fd6:	089b      	lsrs	r3, r3, #2
  405fd8:	600b      	str	r3, [r1, #0]
  405fda:	2002      	movs	r0, #2
  405fdc:	4770      	bx	lr
  405fde:	b298      	uxth	r0, r3
  405fe0:	b198      	cbz	r0, 40600a <__lo0bits+0x46>
  405fe2:	4610      	mov	r0, r2
  405fe4:	f013 0fff 	tst.w	r3, #255	; 0xff
  405fe8:	bf04      	itt	eq
  405fea:	0a1b      	lsreq	r3, r3, #8
  405fec:	3008      	addeq	r0, #8
  405fee:	071a      	lsls	r2, r3, #28
  405ff0:	bf04      	itt	eq
  405ff2:	091b      	lsreq	r3, r3, #4
  405ff4:	3004      	addeq	r0, #4
  405ff6:	079a      	lsls	r2, r3, #30
  405ff8:	bf04      	itt	eq
  405ffa:	089b      	lsreq	r3, r3, #2
  405ffc:	3002      	addeq	r0, #2
  405ffe:	07da      	lsls	r2, r3, #31
  406000:	d407      	bmi.n	406012 <__lo0bits+0x4e>
  406002:	085b      	lsrs	r3, r3, #1
  406004:	d104      	bne.n	406010 <__lo0bits+0x4c>
  406006:	2020      	movs	r0, #32
  406008:	4770      	bx	lr
  40600a:	0c1b      	lsrs	r3, r3, #16
  40600c:	2010      	movs	r0, #16
  40600e:	e7e9      	b.n	405fe4 <__lo0bits+0x20>
  406010:	3001      	adds	r0, #1
  406012:	600b      	str	r3, [r1, #0]
  406014:	4770      	bx	lr
  406016:	2000      	movs	r0, #0
  406018:	4770      	bx	lr
  40601a:	085b      	lsrs	r3, r3, #1
  40601c:	600b      	str	r3, [r1, #0]
  40601e:	2001      	movs	r0, #1
  406020:	4770      	bx	lr
  406022:	bf00      	nop

00406024 <__i2b>:
  406024:	b510      	push	{r4, lr}
  406026:	460c      	mov	r4, r1
  406028:	2101      	movs	r1, #1
  40602a:	f7ff ff3b 	bl	405ea4 <_Balloc>
  40602e:	2201      	movs	r2, #1
  406030:	6144      	str	r4, [r0, #20]
  406032:	6102      	str	r2, [r0, #16]
  406034:	bd10      	pop	{r4, pc}
  406036:	bf00      	nop

00406038 <__multiply>:
  406038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40603c:	690c      	ldr	r4, [r1, #16]
  40603e:	6915      	ldr	r5, [r2, #16]
  406040:	42ac      	cmp	r4, r5
  406042:	b083      	sub	sp, #12
  406044:	468b      	mov	fp, r1
  406046:	4616      	mov	r6, r2
  406048:	da04      	bge.n	406054 <__multiply+0x1c>
  40604a:	4622      	mov	r2, r4
  40604c:	46b3      	mov	fp, r6
  40604e:	462c      	mov	r4, r5
  406050:	460e      	mov	r6, r1
  406052:	4615      	mov	r5, r2
  406054:	f8db 3008 	ldr.w	r3, [fp, #8]
  406058:	f8db 1004 	ldr.w	r1, [fp, #4]
  40605c:	eb04 0805 	add.w	r8, r4, r5
  406060:	4598      	cmp	r8, r3
  406062:	bfc8      	it	gt
  406064:	3101      	addgt	r1, #1
  406066:	f7ff ff1d 	bl	405ea4 <_Balloc>
  40606a:	f100 0914 	add.w	r9, r0, #20
  40606e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406072:	45d1      	cmp	r9, sl
  406074:	9000      	str	r0, [sp, #0]
  406076:	d205      	bcs.n	406084 <__multiply+0x4c>
  406078:	464b      	mov	r3, r9
  40607a:	2100      	movs	r1, #0
  40607c:	f843 1b04 	str.w	r1, [r3], #4
  406080:	459a      	cmp	sl, r3
  406082:	d8fb      	bhi.n	40607c <__multiply+0x44>
  406084:	f106 0c14 	add.w	ip, r6, #20
  406088:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40608c:	f10b 0b14 	add.w	fp, fp, #20
  406090:	459c      	cmp	ip, r3
  406092:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406096:	d24c      	bcs.n	406132 <__multiply+0xfa>
  406098:	f8cd a004 	str.w	sl, [sp, #4]
  40609c:	469a      	mov	sl, r3
  40609e:	f8dc 5000 	ldr.w	r5, [ip]
  4060a2:	b2af      	uxth	r7, r5
  4060a4:	b1ef      	cbz	r7, 4060e2 <__multiply+0xaa>
  4060a6:	2100      	movs	r1, #0
  4060a8:	464d      	mov	r5, r9
  4060aa:	465e      	mov	r6, fp
  4060ac:	460c      	mov	r4, r1
  4060ae:	f856 2b04 	ldr.w	r2, [r6], #4
  4060b2:	6828      	ldr	r0, [r5, #0]
  4060b4:	b293      	uxth	r3, r2
  4060b6:	b281      	uxth	r1, r0
  4060b8:	fb07 1303 	mla	r3, r7, r3, r1
  4060bc:	0c12      	lsrs	r2, r2, #16
  4060be:	0c01      	lsrs	r1, r0, #16
  4060c0:	4423      	add	r3, r4
  4060c2:	fb07 1102 	mla	r1, r7, r2, r1
  4060c6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4060ca:	b29b      	uxth	r3, r3
  4060cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4060d0:	45b6      	cmp	lr, r6
  4060d2:	f845 3b04 	str.w	r3, [r5], #4
  4060d6:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4060da:	d8e8      	bhi.n	4060ae <__multiply+0x76>
  4060dc:	602c      	str	r4, [r5, #0]
  4060de:	f8dc 5000 	ldr.w	r5, [ip]
  4060e2:	0c2d      	lsrs	r5, r5, #16
  4060e4:	d01d      	beq.n	406122 <__multiply+0xea>
  4060e6:	f8d9 3000 	ldr.w	r3, [r9]
  4060ea:	4648      	mov	r0, r9
  4060ec:	461c      	mov	r4, r3
  4060ee:	4659      	mov	r1, fp
  4060f0:	2200      	movs	r2, #0
  4060f2:	880e      	ldrh	r6, [r1, #0]
  4060f4:	0c24      	lsrs	r4, r4, #16
  4060f6:	fb05 4406 	mla	r4, r5, r6, r4
  4060fa:	4422      	add	r2, r4
  4060fc:	b29b      	uxth	r3, r3
  4060fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406102:	f840 3b04 	str.w	r3, [r0], #4
  406106:	f851 3b04 	ldr.w	r3, [r1], #4
  40610a:	6804      	ldr	r4, [r0, #0]
  40610c:	0c1b      	lsrs	r3, r3, #16
  40610e:	b2a6      	uxth	r6, r4
  406110:	fb05 6303 	mla	r3, r5, r3, r6
  406114:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406118:	458e      	cmp	lr, r1
  40611a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40611e:	d8e8      	bhi.n	4060f2 <__multiply+0xba>
  406120:	6003      	str	r3, [r0, #0]
  406122:	f10c 0c04 	add.w	ip, ip, #4
  406126:	45e2      	cmp	sl, ip
  406128:	f109 0904 	add.w	r9, r9, #4
  40612c:	d8b7      	bhi.n	40609e <__multiply+0x66>
  40612e:	f8dd a004 	ldr.w	sl, [sp, #4]
  406132:	f1b8 0f00 	cmp.w	r8, #0
  406136:	dd0b      	ble.n	406150 <__multiply+0x118>
  406138:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40613c:	f1aa 0a04 	sub.w	sl, sl, #4
  406140:	b11b      	cbz	r3, 40614a <__multiply+0x112>
  406142:	e005      	b.n	406150 <__multiply+0x118>
  406144:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406148:	b913      	cbnz	r3, 406150 <__multiply+0x118>
  40614a:	f1b8 0801 	subs.w	r8, r8, #1
  40614e:	d1f9      	bne.n	406144 <__multiply+0x10c>
  406150:	9800      	ldr	r0, [sp, #0]
  406152:	f8c0 8010 	str.w	r8, [r0, #16]
  406156:	b003      	add	sp, #12
  406158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040615c <__pow5mult>:
  40615c:	f012 0303 	ands.w	r3, r2, #3
  406160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406164:	4614      	mov	r4, r2
  406166:	4607      	mov	r7, r0
  406168:	d12e      	bne.n	4061c8 <__pow5mult+0x6c>
  40616a:	460d      	mov	r5, r1
  40616c:	10a4      	asrs	r4, r4, #2
  40616e:	d01c      	beq.n	4061aa <__pow5mult+0x4e>
  406170:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406172:	b396      	cbz	r6, 4061da <__pow5mult+0x7e>
  406174:	07e3      	lsls	r3, r4, #31
  406176:	f04f 0800 	mov.w	r8, #0
  40617a:	d406      	bmi.n	40618a <__pow5mult+0x2e>
  40617c:	1064      	asrs	r4, r4, #1
  40617e:	d014      	beq.n	4061aa <__pow5mult+0x4e>
  406180:	6830      	ldr	r0, [r6, #0]
  406182:	b1a8      	cbz	r0, 4061b0 <__pow5mult+0x54>
  406184:	4606      	mov	r6, r0
  406186:	07e3      	lsls	r3, r4, #31
  406188:	d5f8      	bpl.n	40617c <__pow5mult+0x20>
  40618a:	4632      	mov	r2, r6
  40618c:	4629      	mov	r1, r5
  40618e:	4638      	mov	r0, r7
  406190:	f7ff ff52 	bl	406038 <__multiply>
  406194:	b1b5      	cbz	r5, 4061c4 <__pow5mult+0x68>
  406196:	686a      	ldr	r2, [r5, #4]
  406198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40619a:	1064      	asrs	r4, r4, #1
  40619c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4061a0:	6029      	str	r1, [r5, #0]
  4061a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4061a6:	4605      	mov	r5, r0
  4061a8:	d1ea      	bne.n	406180 <__pow5mult+0x24>
  4061aa:	4628      	mov	r0, r5
  4061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4061b0:	4632      	mov	r2, r6
  4061b2:	4631      	mov	r1, r6
  4061b4:	4638      	mov	r0, r7
  4061b6:	f7ff ff3f 	bl	406038 <__multiply>
  4061ba:	6030      	str	r0, [r6, #0]
  4061bc:	f8c0 8000 	str.w	r8, [r0]
  4061c0:	4606      	mov	r6, r0
  4061c2:	e7e0      	b.n	406186 <__pow5mult+0x2a>
  4061c4:	4605      	mov	r5, r0
  4061c6:	e7d9      	b.n	40617c <__pow5mult+0x20>
  4061c8:	1e5a      	subs	r2, r3, #1
  4061ca:	4d0b      	ldr	r5, [pc, #44]	; (4061f8 <__pow5mult+0x9c>)
  4061cc:	2300      	movs	r3, #0
  4061ce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4061d2:	f7ff fe97 	bl	405f04 <__multadd>
  4061d6:	4605      	mov	r5, r0
  4061d8:	e7c8      	b.n	40616c <__pow5mult+0x10>
  4061da:	2101      	movs	r1, #1
  4061dc:	4638      	mov	r0, r7
  4061de:	f7ff fe61 	bl	405ea4 <_Balloc>
  4061e2:	f240 2171 	movw	r1, #625	; 0x271
  4061e6:	2201      	movs	r2, #1
  4061e8:	2300      	movs	r3, #0
  4061ea:	6141      	str	r1, [r0, #20]
  4061ec:	6102      	str	r2, [r0, #16]
  4061ee:	4606      	mov	r6, r0
  4061f0:	64b8      	str	r0, [r7, #72]	; 0x48
  4061f2:	6003      	str	r3, [r0, #0]
  4061f4:	e7be      	b.n	406174 <__pow5mult+0x18>
  4061f6:	bf00      	nop
  4061f8:	00407c80 	.word	0x00407c80

004061fc <__lshift>:
  4061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406200:	4691      	mov	r9, r2
  406202:	690a      	ldr	r2, [r1, #16]
  406204:	688b      	ldr	r3, [r1, #8]
  406206:	ea4f 1469 	mov.w	r4, r9, asr #5
  40620a:	eb04 0802 	add.w	r8, r4, r2
  40620e:	f108 0501 	add.w	r5, r8, #1
  406212:	429d      	cmp	r5, r3
  406214:	460e      	mov	r6, r1
  406216:	4607      	mov	r7, r0
  406218:	6849      	ldr	r1, [r1, #4]
  40621a:	dd04      	ble.n	406226 <__lshift+0x2a>
  40621c:	005b      	lsls	r3, r3, #1
  40621e:	429d      	cmp	r5, r3
  406220:	f101 0101 	add.w	r1, r1, #1
  406224:	dcfa      	bgt.n	40621c <__lshift+0x20>
  406226:	4638      	mov	r0, r7
  406228:	f7ff fe3c 	bl	405ea4 <_Balloc>
  40622c:	2c00      	cmp	r4, #0
  40622e:	f100 0314 	add.w	r3, r0, #20
  406232:	dd06      	ble.n	406242 <__lshift+0x46>
  406234:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406238:	2100      	movs	r1, #0
  40623a:	f843 1b04 	str.w	r1, [r3], #4
  40623e:	429a      	cmp	r2, r3
  406240:	d1fb      	bne.n	40623a <__lshift+0x3e>
  406242:	6934      	ldr	r4, [r6, #16]
  406244:	f106 0114 	add.w	r1, r6, #20
  406248:	f019 091f 	ands.w	r9, r9, #31
  40624c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406250:	d01d      	beq.n	40628e <__lshift+0x92>
  406252:	f1c9 0c20 	rsb	ip, r9, #32
  406256:	2200      	movs	r2, #0
  406258:	680c      	ldr	r4, [r1, #0]
  40625a:	fa04 f409 	lsl.w	r4, r4, r9
  40625e:	4314      	orrs	r4, r2
  406260:	f843 4b04 	str.w	r4, [r3], #4
  406264:	f851 2b04 	ldr.w	r2, [r1], #4
  406268:	458e      	cmp	lr, r1
  40626a:	fa22 f20c 	lsr.w	r2, r2, ip
  40626e:	d8f3      	bhi.n	406258 <__lshift+0x5c>
  406270:	601a      	str	r2, [r3, #0]
  406272:	b10a      	cbz	r2, 406278 <__lshift+0x7c>
  406274:	f108 0502 	add.w	r5, r8, #2
  406278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40627a:	6872      	ldr	r2, [r6, #4]
  40627c:	3d01      	subs	r5, #1
  40627e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406282:	6105      	str	r5, [r0, #16]
  406284:	6031      	str	r1, [r6, #0]
  406286:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40628a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40628e:	3b04      	subs	r3, #4
  406290:	f851 2b04 	ldr.w	r2, [r1], #4
  406294:	f843 2f04 	str.w	r2, [r3, #4]!
  406298:	458e      	cmp	lr, r1
  40629a:	d8f9      	bhi.n	406290 <__lshift+0x94>
  40629c:	e7ec      	b.n	406278 <__lshift+0x7c>
  40629e:	bf00      	nop

004062a0 <__mcmp>:
  4062a0:	b430      	push	{r4, r5}
  4062a2:	690b      	ldr	r3, [r1, #16]
  4062a4:	4605      	mov	r5, r0
  4062a6:	6900      	ldr	r0, [r0, #16]
  4062a8:	1ac0      	subs	r0, r0, r3
  4062aa:	d10f      	bne.n	4062cc <__mcmp+0x2c>
  4062ac:	009b      	lsls	r3, r3, #2
  4062ae:	3514      	adds	r5, #20
  4062b0:	3114      	adds	r1, #20
  4062b2:	4419      	add	r1, r3
  4062b4:	442b      	add	r3, r5
  4062b6:	e001      	b.n	4062bc <__mcmp+0x1c>
  4062b8:	429d      	cmp	r5, r3
  4062ba:	d207      	bcs.n	4062cc <__mcmp+0x2c>
  4062bc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4062c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4062c4:	4294      	cmp	r4, r2
  4062c6:	d0f7      	beq.n	4062b8 <__mcmp+0x18>
  4062c8:	d302      	bcc.n	4062d0 <__mcmp+0x30>
  4062ca:	2001      	movs	r0, #1
  4062cc:	bc30      	pop	{r4, r5}
  4062ce:	4770      	bx	lr
  4062d0:	f04f 30ff 	mov.w	r0, #4294967295
  4062d4:	e7fa      	b.n	4062cc <__mcmp+0x2c>
  4062d6:	bf00      	nop

004062d8 <__mdiff>:
  4062d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4062dc:	690f      	ldr	r7, [r1, #16]
  4062de:	460e      	mov	r6, r1
  4062e0:	6911      	ldr	r1, [r2, #16]
  4062e2:	1a7f      	subs	r7, r7, r1
  4062e4:	2f00      	cmp	r7, #0
  4062e6:	4690      	mov	r8, r2
  4062e8:	d117      	bne.n	40631a <__mdiff+0x42>
  4062ea:	0089      	lsls	r1, r1, #2
  4062ec:	f106 0514 	add.w	r5, r6, #20
  4062f0:	f102 0e14 	add.w	lr, r2, #20
  4062f4:	186b      	adds	r3, r5, r1
  4062f6:	4471      	add	r1, lr
  4062f8:	e001      	b.n	4062fe <__mdiff+0x26>
  4062fa:	429d      	cmp	r5, r3
  4062fc:	d25c      	bcs.n	4063b8 <__mdiff+0xe0>
  4062fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406302:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406306:	42a2      	cmp	r2, r4
  406308:	d0f7      	beq.n	4062fa <__mdiff+0x22>
  40630a:	d25e      	bcs.n	4063ca <__mdiff+0xf2>
  40630c:	4633      	mov	r3, r6
  40630e:	462c      	mov	r4, r5
  406310:	4646      	mov	r6, r8
  406312:	4675      	mov	r5, lr
  406314:	4698      	mov	r8, r3
  406316:	2701      	movs	r7, #1
  406318:	e005      	b.n	406326 <__mdiff+0x4e>
  40631a:	db58      	blt.n	4063ce <__mdiff+0xf6>
  40631c:	f106 0514 	add.w	r5, r6, #20
  406320:	f108 0414 	add.w	r4, r8, #20
  406324:	2700      	movs	r7, #0
  406326:	6871      	ldr	r1, [r6, #4]
  406328:	f7ff fdbc 	bl	405ea4 <_Balloc>
  40632c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406330:	6936      	ldr	r6, [r6, #16]
  406332:	60c7      	str	r7, [r0, #12]
  406334:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406338:	46a6      	mov	lr, r4
  40633a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40633e:	f100 0414 	add.w	r4, r0, #20
  406342:	2300      	movs	r3, #0
  406344:	f85e 1b04 	ldr.w	r1, [lr], #4
  406348:	f855 8b04 	ldr.w	r8, [r5], #4
  40634c:	b28a      	uxth	r2, r1
  40634e:	fa13 f388 	uxtah	r3, r3, r8
  406352:	0c09      	lsrs	r1, r1, #16
  406354:	1a9a      	subs	r2, r3, r2
  406356:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40635a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40635e:	b292      	uxth	r2, r2
  406360:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406364:	45f4      	cmp	ip, lr
  406366:	f844 2b04 	str.w	r2, [r4], #4
  40636a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40636e:	d8e9      	bhi.n	406344 <__mdiff+0x6c>
  406370:	42af      	cmp	r7, r5
  406372:	d917      	bls.n	4063a4 <__mdiff+0xcc>
  406374:	46a4      	mov	ip, r4
  406376:	46ae      	mov	lr, r5
  406378:	f85e 2b04 	ldr.w	r2, [lr], #4
  40637c:	fa13 f382 	uxtah	r3, r3, r2
  406380:	1419      	asrs	r1, r3, #16
  406382:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406386:	b29b      	uxth	r3, r3
  406388:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40638c:	4577      	cmp	r7, lr
  40638e:	f84c 2b04 	str.w	r2, [ip], #4
  406392:	ea4f 4321 	mov.w	r3, r1, asr #16
  406396:	d8ef      	bhi.n	406378 <__mdiff+0xa0>
  406398:	43ed      	mvns	r5, r5
  40639a:	442f      	add	r7, r5
  40639c:	f027 0703 	bic.w	r7, r7, #3
  4063a0:	3704      	adds	r7, #4
  4063a2:	443c      	add	r4, r7
  4063a4:	3c04      	subs	r4, #4
  4063a6:	b922      	cbnz	r2, 4063b2 <__mdiff+0xda>
  4063a8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4063ac:	3e01      	subs	r6, #1
  4063ae:	2b00      	cmp	r3, #0
  4063b0:	d0fa      	beq.n	4063a8 <__mdiff+0xd0>
  4063b2:	6106      	str	r6, [r0, #16]
  4063b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063b8:	2100      	movs	r1, #0
  4063ba:	f7ff fd73 	bl	405ea4 <_Balloc>
  4063be:	2201      	movs	r2, #1
  4063c0:	2300      	movs	r3, #0
  4063c2:	6102      	str	r2, [r0, #16]
  4063c4:	6143      	str	r3, [r0, #20]
  4063c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063ca:	4674      	mov	r4, lr
  4063cc:	e7ab      	b.n	406326 <__mdiff+0x4e>
  4063ce:	4633      	mov	r3, r6
  4063d0:	f106 0414 	add.w	r4, r6, #20
  4063d4:	f102 0514 	add.w	r5, r2, #20
  4063d8:	4616      	mov	r6, r2
  4063da:	2701      	movs	r7, #1
  4063dc:	4698      	mov	r8, r3
  4063de:	e7a2      	b.n	406326 <__mdiff+0x4e>

004063e0 <__d2b>:
  4063e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4063e4:	b082      	sub	sp, #8
  4063e6:	2101      	movs	r1, #1
  4063e8:	461c      	mov	r4, r3
  4063ea:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4063ee:	4615      	mov	r5, r2
  4063f0:	9e08      	ldr	r6, [sp, #32]
  4063f2:	f7ff fd57 	bl	405ea4 <_Balloc>
  4063f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4063fa:	4680      	mov	r8, r0
  4063fc:	b10f      	cbz	r7, 406402 <__d2b+0x22>
  4063fe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406402:	9401      	str	r4, [sp, #4]
  406404:	b31d      	cbz	r5, 40644e <__d2b+0x6e>
  406406:	a802      	add	r0, sp, #8
  406408:	f840 5d08 	str.w	r5, [r0, #-8]!
  40640c:	f7ff fdda 	bl	405fc4 <__lo0bits>
  406410:	2800      	cmp	r0, #0
  406412:	d134      	bne.n	40647e <__d2b+0x9e>
  406414:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406418:	f8c8 2014 	str.w	r2, [r8, #20]
  40641c:	2b00      	cmp	r3, #0
  40641e:	bf0c      	ite	eq
  406420:	2101      	moveq	r1, #1
  406422:	2102      	movne	r1, #2
  406424:	f8c8 3018 	str.w	r3, [r8, #24]
  406428:	f8c8 1010 	str.w	r1, [r8, #16]
  40642c:	b9df      	cbnz	r7, 406466 <__d2b+0x86>
  40642e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406432:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406436:	6030      	str	r0, [r6, #0]
  406438:	6918      	ldr	r0, [r3, #16]
  40643a:	f7ff fda3 	bl	405f84 <__hi0bits>
  40643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406440:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406444:	6018      	str	r0, [r3, #0]
  406446:	4640      	mov	r0, r8
  406448:	b002      	add	sp, #8
  40644a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40644e:	a801      	add	r0, sp, #4
  406450:	f7ff fdb8 	bl	405fc4 <__lo0bits>
  406454:	9b01      	ldr	r3, [sp, #4]
  406456:	f8c8 3014 	str.w	r3, [r8, #20]
  40645a:	2101      	movs	r1, #1
  40645c:	3020      	adds	r0, #32
  40645e:	f8c8 1010 	str.w	r1, [r8, #16]
  406462:	2f00      	cmp	r7, #0
  406464:	d0e3      	beq.n	40642e <__d2b+0x4e>
  406466:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406468:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40646c:	4407      	add	r7, r0
  40646e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406472:	6037      	str	r7, [r6, #0]
  406474:	6018      	str	r0, [r3, #0]
  406476:	4640      	mov	r0, r8
  406478:	b002      	add	sp, #8
  40647a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40647e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406482:	f1c0 0220 	rsb	r2, r0, #32
  406486:	fa03 f202 	lsl.w	r2, r3, r2
  40648a:	430a      	orrs	r2, r1
  40648c:	40c3      	lsrs	r3, r0
  40648e:	9301      	str	r3, [sp, #4]
  406490:	f8c8 2014 	str.w	r2, [r8, #20]
  406494:	e7c2      	b.n	40641c <__d2b+0x3c>
  406496:	bf00      	nop

00406498 <_realloc_r>:
  406498:	2900      	cmp	r1, #0
  40649a:	f000 8095 	beq.w	4065c8 <_realloc_r+0x130>
  40649e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064a2:	460d      	mov	r5, r1
  4064a4:	4616      	mov	r6, r2
  4064a6:	b083      	sub	sp, #12
  4064a8:	4680      	mov	r8, r0
  4064aa:	f106 070b 	add.w	r7, r6, #11
  4064ae:	f7ff fced 	bl	405e8c <__malloc_lock>
  4064b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4064b6:	2f16      	cmp	r7, #22
  4064b8:	f02e 0403 	bic.w	r4, lr, #3
  4064bc:	f1a5 0908 	sub.w	r9, r5, #8
  4064c0:	d83c      	bhi.n	40653c <_realloc_r+0xa4>
  4064c2:	2210      	movs	r2, #16
  4064c4:	4617      	mov	r7, r2
  4064c6:	42be      	cmp	r6, r7
  4064c8:	d83d      	bhi.n	406546 <_realloc_r+0xae>
  4064ca:	4294      	cmp	r4, r2
  4064cc:	da43      	bge.n	406556 <_realloc_r+0xbe>
  4064ce:	4bc4      	ldr	r3, [pc, #784]	; (4067e0 <_realloc_r+0x348>)
  4064d0:	6899      	ldr	r1, [r3, #8]
  4064d2:	eb09 0004 	add.w	r0, r9, r4
  4064d6:	4288      	cmp	r0, r1
  4064d8:	f000 80b4 	beq.w	406644 <_realloc_r+0x1ac>
  4064dc:	6843      	ldr	r3, [r0, #4]
  4064de:	f023 0101 	bic.w	r1, r3, #1
  4064e2:	4401      	add	r1, r0
  4064e4:	6849      	ldr	r1, [r1, #4]
  4064e6:	07c9      	lsls	r1, r1, #31
  4064e8:	d54c      	bpl.n	406584 <_realloc_r+0xec>
  4064ea:	f01e 0f01 	tst.w	lr, #1
  4064ee:	f000 809b 	beq.w	406628 <_realloc_r+0x190>
  4064f2:	4631      	mov	r1, r6
  4064f4:	4640      	mov	r0, r8
  4064f6:	f7ff f8c9 	bl	40568c <_malloc_r>
  4064fa:	4606      	mov	r6, r0
  4064fc:	2800      	cmp	r0, #0
  4064fe:	d03a      	beq.n	406576 <_realloc_r+0xde>
  406500:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406504:	f023 0301 	bic.w	r3, r3, #1
  406508:	444b      	add	r3, r9
  40650a:	f1a0 0208 	sub.w	r2, r0, #8
  40650e:	429a      	cmp	r2, r3
  406510:	f000 8121 	beq.w	406756 <_realloc_r+0x2be>
  406514:	1f22      	subs	r2, r4, #4
  406516:	2a24      	cmp	r2, #36	; 0x24
  406518:	f200 8107 	bhi.w	40672a <_realloc_r+0x292>
  40651c:	2a13      	cmp	r2, #19
  40651e:	f200 80db 	bhi.w	4066d8 <_realloc_r+0x240>
  406522:	4603      	mov	r3, r0
  406524:	462a      	mov	r2, r5
  406526:	6811      	ldr	r1, [r2, #0]
  406528:	6019      	str	r1, [r3, #0]
  40652a:	6851      	ldr	r1, [r2, #4]
  40652c:	6059      	str	r1, [r3, #4]
  40652e:	6892      	ldr	r2, [r2, #8]
  406530:	609a      	str	r2, [r3, #8]
  406532:	4629      	mov	r1, r5
  406534:	4640      	mov	r0, r8
  406536:	f7fe fd8b 	bl	405050 <_free_r>
  40653a:	e01c      	b.n	406576 <_realloc_r+0xde>
  40653c:	f027 0707 	bic.w	r7, r7, #7
  406540:	2f00      	cmp	r7, #0
  406542:	463a      	mov	r2, r7
  406544:	dabf      	bge.n	4064c6 <_realloc_r+0x2e>
  406546:	2600      	movs	r6, #0
  406548:	230c      	movs	r3, #12
  40654a:	4630      	mov	r0, r6
  40654c:	f8c8 3000 	str.w	r3, [r8]
  406550:	b003      	add	sp, #12
  406552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406556:	462e      	mov	r6, r5
  406558:	1be3      	subs	r3, r4, r7
  40655a:	2b0f      	cmp	r3, #15
  40655c:	d81e      	bhi.n	40659c <_realloc_r+0x104>
  40655e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406562:	f003 0301 	and.w	r3, r3, #1
  406566:	4323      	orrs	r3, r4
  406568:	444c      	add	r4, r9
  40656a:	f8c9 3004 	str.w	r3, [r9, #4]
  40656e:	6863      	ldr	r3, [r4, #4]
  406570:	f043 0301 	orr.w	r3, r3, #1
  406574:	6063      	str	r3, [r4, #4]
  406576:	4640      	mov	r0, r8
  406578:	f7ff fc8e 	bl	405e98 <__malloc_unlock>
  40657c:	4630      	mov	r0, r6
  40657e:	b003      	add	sp, #12
  406580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406584:	f023 0303 	bic.w	r3, r3, #3
  406588:	18e1      	adds	r1, r4, r3
  40658a:	4291      	cmp	r1, r2
  40658c:	db1f      	blt.n	4065ce <_realloc_r+0x136>
  40658e:	68c3      	ldr	r3, [r0, #12]
  406590:	6882      	ldr	r2, [r0, #8]
  406592:	462e      	mov	r6, r5
  406594:	60d3      	str	r3, [r2, #12]
  406596:	460c      	mov	r4, r1
  406598:	609a      	str	r2, [r3, #8]
  40659a:	e7dd      	b.n	406558 <_realloc_r+0xc0>
  40659c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4065a0:	eb09 0107 	add.w	r1, r9, r7
  4065a4:	f002 0201 	and.w	r2, r2, #1
  4065a8:	444c      	add	r4, r9
  4065aa:	f043 0301 	orr.w	r3, r3, #1
  4065ae:	4317      	orrs	r7, r2
  4065b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4065b4:	604b      	str	r3, [r1, #4]
  4065b6:	6863      	ldr	r3, [r4, #4]
  4065b8:	f043 0301 	orr.w	r3, r3, #1
  4065bc:	3108      	adds	r1, #8
  4065be:	6063      	str	r3, [r4, #4]
  4065c0:	4640      	mov	r0, r8
  4065c2:	f7fe fd45 	bl	405050 <_free_r>
  4065c6:	e7d6      	b.n	406576 <_realloc_r+0xde>
  4065c8:	4611      	mov	r1, r2
  4065ca:	f7ff b85f 	b.w	40568c <_malloc_r>
  4065ce:	f01e 0f01 	tst.w	lr, #1
  4065d2:	d18e      	bne.n	4064f2 <_realloc_r+0x5a>
  4065d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4065d8:	eba9 0a01 	sub.w	sl, r9, r1
  4065dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4065e0:	f021 0103 	bic.w	r1, r1, #3
  4065e4:	440b      	add	r3, r1
  4065e6:	4423      	add	r3, r4
  4065e8:	4293      	cmp	r3, r2
  4065ea:	db25      	blt.n	406638 <_realloc_r+0x1a0>
  4065ec:	68c2      	ldr	r2, [r0, #12]
  4065ee:	6881      	ldr	r1, [r0, #8]
  4065f0:	4656      	mov	r6, sl
  4065f2:	60ca      	str	r2, [r1, #12]
  4065f4:	6091      	str	r1, [r2, #8]
  4065f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4065fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4065fe:	1f22      	subs	r2, r4, #4
  406600:	2a24      	cmp	r2, #36	; 0x24
  406602:	60c1      	str	r1, [r0, #12]
  406604:	6088      	str	r0, [r1, #8]
  406606:	f200 8094 	bhi.w	406732 <_realloc_r+0x29a>
  40660a:	2a13      	cmp	r2, #19
  40660c:	d96f      	bls.n	4066ee <_realloc_r+0x256>
  40660e:	6829      	ldr	r1, [r5, #0]
  406610:	f8ca 1008 	str.w	r1, [sl, #8]
  406614:	6869      	ldr	r1, [r5, #4]
  406616:	f8ca 100c 	str.w	r1, [sl, #12]
  40661a:	2a1b      	cmp	r2, #27
  40661c:	f200 80a2 	bhi.w	406764 <_realloc_r+0x2cc>
  406620:	3508      	adds	r5, #8
  406622:	f10a 0210 	add.w	r2, sl, #16
  406626:	e063      	b.n	4066f0 <_realloc_r+0x258>
  406628:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40662c:	eba9 0a03 	sub.w	sl, r9, r3
  406630:	f8da 1004 	ldr.w	r1, [sl, #4]
  406634:	f021 0103 	bic.w	r1, r1, #3
  406638:	1863      	adds	r3, r4, r1
  40663a:	4293      	cmp	r3, r2
  40663c:	f6ff af59 	blt.w	4064f2 <_realloc_r+0x5a>
  406640:	4656      	mov	r6, sl
  406642:	e7d8      	b.n	4065f6 <_realloc_r+0x15e>
  406644:	6841      	ldr	r1, [r0, #4]
  406646:	f021 0b03 	bic.w	fp, r1, #3
  40664a:	44a3      	add	fp, r4
  40664c:	f107 0010 	add.w	r0, r7, #16
  406650:	4583      	cmp	fp, r0
  406652:	da56      	bge.n	406702 <_realloc_r+0x26a>
  406654:	f01e 0f01 	tst.w	lr, #1
  406658:	f47f af4b 	bne.w	4064f2 <_realloc_r+0x5a>
  40665c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406660:	eba9 0a01 	sub.w	sl, r9, r1
  406664:	f8da 1004 	ldr.w	r1, [sl, #4]
  406668:	f021 0103 	bic.w	r1, r1, #3
  40666c:	448b      	add	fp, r1
  40666e:	4558      	cmp	r0, fp
  406670:	dce2      	bgt.n	406638 <_realloc_r+0x1a0>
  406672:	4656      	mov	r6, sl
  406674:	f8da 100c 	ldr.w	r1, [sl, #12]
  406678:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40667c:	1f22      	subs	r2, r4, #4
  40667e:	2a24      	cmp	r2, #36	; 0x24
  406680:	60c1      	str	r1, [r0, #12]
  406682:	6088      	str	r0, [r1, #8]
  406684:	f200 808f 	bhi.w	4067a6 <_realloc_r+0x30e>
  406688:	2a13      	cmp	r2, #19
  40668a:	f240 808a 	bls.w	4067a2 <_realloc_r+0x30a>
  40668e:	6829      	ldr	r1, [r5, #0]
  406690:	f8ca 1008 	str.w	r1, [sl, #8]
  406694:	6869      	ldr	r1, [r5, #4]
  406696:	f8ca 100c 	str.w	r1, [sl, #12]
  40669a:	2a1b      	cmp	r2, #27
  40669c:	f200 808a 	bhi.w	4067b4 <_realloc_r+0x31c>
  4066a0:	3508      	adds	r5, #8
  4066a2:	f10a 0210 	add.w	r2, sl, #16
  4066a6:	6829      	ldr	r1, [r5, #0]
  4066a8:	6011      	str	r1, [r2, #0]
  4066aa:	6869      	ldr	r1, [r5, #4]
  4066ac:	6051      	str	r1, [r2, #4]
  4066ae:	68a9      	ldr	r1, [r5, #8]
  4066b0:	6091      	str	r1, [r2, #8]
  4066b2:	eb0a 0107 	add.w	r1, sl, r7
  4066b6:	ebab 0207 	sub.w	r2, fp, r7
  4066ba:	f042 0201 	orr.w	r2, r2, #1
  4066be:	6099      	str	r1, [r3, #8]
  4066c0:	604a      	str	r2, [r1, #4]
  4066c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4066c6:	f003 0301 	and.w	r3, r3, #1
  4066ca:	431f      	orrs	r7, r3
  4066cc:	4640      	mov	r0, r8
  4066ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4066d2:	f7ff fbe1 	bl	405e98 <__malloc_unlock>
  4066d6:	e751      	b.n	40657c <_realloc_r+0xe4>
  4066d8:	682b      	ldr	r3, [r5, #0]
  4066da:	6003      	str	r3, [r0, #0]
  4066dc:	686b      	ldr	r3, [r5, #4]
  4066de:	6043      	str	r3, [r0, #4]
  4066e0:	2a1b      	cmp	r2, #27
  4066e2:	d82d      	bhi.n	406740 <_realloc_r+0x2a8>
  4066e4:	f100 0308 	add.w	r3, r0, #8
  4066e8:	f105 0208 	add.w	r2, r5, #8
  4066ec:	e71b      	b.n	406526 <_realloc_r+0x8e>
  4066ee:	4632      	mov	r2, r6
  4066f0:	6829      	ldr	r1, [r5, #0]
  4066f2:	6011      	str	r1, [r2, #0]
  4066f4:	6869      	ldr	r1, [r5, #4]
  4066f6:	6051      	str	r1, [r2, #4]
  4066f8:	68a9      	ldr	r1, [r5, #8]
  4066fa:	6091      	str	r1, [r2, #8]
  4066fc:	461c      	mov	r4, r3
  4066fe:	46d1      	mov	r9, sl
  406700:	e72a      	b.n	406558 <_realloc_r+0xc0>
  406702:	eb09 0107 	add.w	r1, r9, r7
  406706:	ebab 0b07 	sub.w	fp, fp, r7
  40670a:	f04b 0201 	orr.w	r2, fp, #1
  40670e:	6099      	str	r1, [r3, #8]
  406710:	604a      	str	r2, [r1, #4]
  406712:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406716:	f003 0301 	and.w	r3, r3, #1
  40671a:	431f      	orrs	r7, r3
  40671c:	4640      	mov	r0, r8
  40671e:	f845 7c04 	str.w	r7, [r5, #-4]
  406722:	f7ff fbb9 	bl	405e98 <__malloc_unlock>
  406726:	462e      	mov	r6, r5
  406728:	e728      	b.n	40657c <_realloc_r+0xe4>
  40672a:	4629      	mov	r1, r5
  40672c:	f7ff fb4a 	bl	405dc4 <memmove>
  406730:	e6ff      	b.n	406532 <_realloc_r+0x9a>
  406732:	4629      	mov	r1, r5
  406734:	4630      	mov	r0, r6
  406736:	461c      	mov	r4, r3
  406738:	46d1      	mov	r9, sl
  40673a:	f7ff fb43 	bl	405dc4 <memmove>
  40673e:	e70b      	b.n	406558 <_realloc_r+0xc0>
  406740:	68ab      	ldr	r3, [r5, #8]
  406742:	6083      	str	r3, [r0, #8]
  406744:	68eb      	ldr	r3, [r5, #12]
  406746:	60c3      	str	r3, [r0, #12]
  406748:	2a24      	cmp	r2, #36	; 0x24
  40674a:	d017      	beq.n	40677c <_realloc_r+0x2e4>
  40674c:	f100 0310 	add.w	r3, r0, #16
  406750:	f105 0210 	add.w	r2, r5, #16
  406754:	e6e7      	b.n	406526 <_realloc_r+0x8e>
  406756:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40675a:	f023 0303 	bic.w	r3, r3, #3
  40675e:	441c      	add	r4, r3
  406760:	462e      	mov	r6, r5
  406762:	e6f9      	b.n	406558 <_realloc_r+0xc0>
  406764:	68a9      	ldr	r1, [r5, #8]
  406766:	f8ca 1010 	str.w	r1, [sl, #16]
  40676a:	68e9      	ldr	r1, [r5, #12]
  40676c:	f8ca 1014 	str.w	r1, [sl, #20]
  406770:	2a24      	cmp	r2, #36	; 0x24
  406772:	d00c      	beq.n	40678e <_realloc_r+0x2f6>
  406774:	3510      	adds	r5, #16
  406776:	f10a 0218 	add.w	r2, sl, #24
  40677a:	e7b9      	b.n	4066f0 <_realloc_r+0x258>
  40677c:	692b      	ldr	r3, [r5, #16]
  40677e:	6103      	str	r3, [r0, #16]
  406780:	696b      	ldr	r3, [r5, #20]
  406782:	6143      	str	r3, [r0, #20]
  406784:	f105 0218 	add.w	r2, r5, #24
  406788:	f100 0318 	add.w	r3, r0, #24
  40678c:	e6cb      	b.n	406526 <_realloc_r+0x8e>
  40678e:	692a      	ldr	r2, [r5, #16]
  406790:	f8ca 2018 	str.w	r2, [sl, #24]
  406794:	696a      	ldr	r2, [r5, #20]
  406796:	f8ca 201c 	str.w	r2, [sl, #28]
  40679a:	3518      	adds	r5, #24
  40679c:	f10a 0220 	add.w	r2, sl, #32
  4067a0:	e7a6      	b.n	4066f0 <_realloc_r+0x258>
  4067a2:	4632      	mov	r2, r6
  4067a4:	e77f      	b.n	4066a6 <_realloc_r+0x20e>
  4067a6:	4629      	mov	r1, r5
  4067a8:	4630      	mov	r0, r6
  4067aa:	9301      	str	r3, [sp, #4]
  4067ac:	f7ff fb0a 	bl	405dc4 <memmove>
  4067b0:	9b01      	ldr	r3, [sp, #4]
  4067b2:	e77e      	b.n	4066b2 <_realloc_r+0x21a>
  4067b4:	68a9      	ldr	r1, [r5, #8]
  4067b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4067ba:	68e9      	ldr	r1, [r5, #12]
  4067bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4067c0:	2a24      	cmp	r2, #36	; 0x24
  4067c2:	d003      	beq.n	4067cc <_realloc_r+0x334>
  4067c4:	3510      	adds	r5, #16
  4067c6:	f10a 0218 	add.w	r2, sl, #24
  4067ca:	e76c      	b.n	4066a6 <_realloc_r+0x20e>
  4067cc:	692a      	ldr	r2, [r5, #16]
  4067ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4067d2:	696a      	ldr	r2, [r5, #20]
  4067d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4067d8:	3518      	adds	r5, #24
  4067da:	f10a 0220 	add.w	r2, sl, #32
  4067de:	e762      	b.n	4066a6 <_realloc_r+0x20e>
  4067e0:	2040043c 	.word	0x2040043c

004067e4 <_sbrk_r>:
  4067e4:	b538      	push	{r3, r4, r5, lr}
  4067e6:	4c07      	ldr	r4, [pc, #28]	; (406804 <_sbrk_r+0x20>)
  4067e8:	2300      	movs	r3, #0
  4067ea:	4605      	mov	r5, r0
  4067ec:	4608      	mov	r0, r1
  4067ee:	6023      	str	r3, [r4, #0]
  4067f0:	f7fb f936 	bl	401a60 <_sbrk>
  4067f4:	1c43      	adds	r3, r0, #1
  4067f6:	d000      	beq.n	4067fa <_sbrk_r+0x16>
  4067f8:	bd38      	pop	{r3, r4, r5, pc}
  4067fa:	6823      	ldr	r3, [r4, #0]
  4067fc:	2b00      	cmp	r3, #0
  4067fe:	d0fb      	beq.n	4067f8 <_sbrk_r+0x14>
  406800:	602b      	str	r3, [r5, #0]
  406802:	bd38      	pop	{r3, r4, r5, pc}
  406804:	20400ab0 	.word	0x20400ab0

00406808 <__sread>:
  406808:	b510      	push	{r4, lr}
  40680a:	460c      	mov	r4, r1
  40680c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406810:	f000 fa88 	bl	406d24 <_read_r>
  406814:	2800      	cmp	r0, #0
  406816:	db03      	blt.n	406820 <__sread+0x18>
  406818:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40681a:	4403      	add	r3, r0
  40681c:	6523      	str	r3, [r4, #80]	; 0x50
  40681e:	bd10      	pop	{r4, pc}
  406820:	89a3      	ldrh	r3, [r4, #12]
  406822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406826:	81a3      	strh	r3, [r4, #12]
  406828:	bd10      	pop	{r4, pc}
  40682a:	bf00      	nop

0040682c <__swrite>:
  40682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406830:	4616      	mov	r6, r2
  406832:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406836:	461f      	mov	r7, r3
  406838:	05d3      	lsls	r3, r2, #23
  40683a:	460c      	mov	r4, r1
  40683c:	4605      	mov	r5, r0
  40683e:	d507      	bpl.n	406850 <__swrite+0x24>
  406840:	2200      	movs	r2, #0
  406842:	2302      	movs	r3, #2
  406844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406848:	f000 fa40 	bl	406ccc <_lseek_r>
  40684c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406854:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406858:	81a2      	strh	r2, [r4, #12]
  40685a:	463b      	mov	r3, r7
  40685c:	4632      	mov	r2, r6
  40685e:	4628      	mov	r0, r5
  406860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406864:	f000 b85e 	b.w	406924 <_write_r>

00406868 <__sseek>:
  406868:	b510      	push	{r4, lr}
  40686a:	460c      	mov	r4, r1
  40686c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406870:	f000 fa2c 	bl	406ccc <_lseek_r>
  406874:	89a3      	ldrh	r3, [r4, #12]
  406876:	1c42      	adds	r2, r0, #1
  406878:	bf0e      	itee	eq
  40687a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40687e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406882:	6520      	strne	r0, [r4, #80]	; 0x50
  406884:	81a3      	strh	r3, [r4, #12]
  406886:	bd10      	pop	{r4, pc}

00406888 <__sclose>:
  406888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40688c:	f000 b8f2 	b.w	406a74 <_close_r>

00406890 <__sprint_r.part.0>:
  406890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406894:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406896:	049c      	lsls	r4, r3, #18
  406898:	4693      	mov	fp, r2
  40689a:	d52f      	bpl.n	4068fc <__sprint_r.part.0+0x6c>
  40689c:	6893      	ldr	r3, [r2, #8]
  40689e:	6812      	ldr	r2, [r2, #0]
  4068a0:	b353      	cbz	r3, 4068f8 <__sprint_r.part.0+0x68>
  4068a2:	460e      	mov	r6, r1
  4068a4:	4607      	mov	r7, r0
  4068a6:	f102 0908 	add.w	r9, r2, #8
  4068aa:	e919 0420 	ldmdb	r9, {r5, sl}
  4068ae:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4068b2:	d017      	beq.n	4068e4 <__sprint_r.part.0+0x54>
  4068b4:	3d04      	subs	r5, #4
  4068b6:	2400      	movs	r4, #0
  4068b8:	e001      	b.n	4068be <__sprint_r.part.0+0x2e>
  4068ba:	45a0      	cmp	r8, r4
  4068bc:	d010      	beq.n	4068e0 <__sprint_r.part.0+0x50>
  4068be:	4632      	mov	r2, r6
  4068c0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4068c4:	4638      	mov	r0, r7
  4068c6:	f000 f999 	bl	406bfc <_fputwc_r>
  4068ca:	1c43      	adds	r3, r0, #1
  4068cc:	f104 0401 	add.w	r4, r4, #1
  4068d0:	d1f3      	bne.n	4068ba <__sprint_r.part.0+0x2a>
  4068d2:	2300      	movs	r3, #0
  4068d4:	f8cb 3008 	str.w	r3, [fp, #8]
  4068d8:	f8cb 3004 	str.w	r3, [fp, #4]
  4068dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068e0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4068e4:	f02a 0a03 	bic.w	sl, sl, #3
  4068e8:	eba3 030a 	sub.w	r3, r3, sl
  4068ec:	f8cb 3008 	str.w	r3, [fp, #8]
  4068f0:	f109 0908 	add.w	r9, r9, #8
  4068f4:	2b00      	cmp	r3, #0
  4068f6:	d1d8      	bne.n	4068aa <__sprint_r.part.0+0x1a>
  4068f8:	2000      	movs	r0, #0
  4068fa:	e7ea      	b.n	4068d2 <__sprint_r.part.0+0x42>
  4068fc:	f7fe fc8e 	bl	40521c <__sfvwrite_r>
  406900:	2300      	movs	r3, #0
  406902:	f8cb 3008 	str.w	r3, [fp, #8]
  406906:	f8cb 3004 	str.w	r3, [fp, #4]
  40690a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40690e:	bf00      	nop

00406910 <__sprint_r>:
  406910:	6893      	ldr	r3, [r2, #8]
  406912:	b10b      	cbz	r3, 406918 <__sprint_r+0x8>
  406914:	f7ff bfbc 	b.w	406890 <__sprint_r.part.0>
  406918:	b410      	push	{r4}
  40691a:	4618      	mov	r0, r3
  40691c:	6053      	str	r3, [r2, #4]
  40691e:	bc10      	pop	{r4}
  406920:	4770      	bx	lr
  406922:	bf00      	nop

00406924 <_write_r>:
  406924:	b570      	push	{r4, r5, r6, lr}
  406926:	460d      	mov	r5, r1
  406928:	4c08      	ldr	r4, [pc, #32]	; (40694c <_write_r+0x28>)
  40692a:	4611      	mov	r1, r2
  40692c:	4606      	mov	r6, r0
  40692e:	461a      	mov	r2, r3
  406930:	4628      	mov	r0, r5
  406932:	2300      	movs	r3, #0
  406934:	6023      	str	r3, [r4, #0]
  406936:	f7f9 fe21 	bl	40057c <_write>
  40693a:	1c43      	adds	r3, r0, #1
  40693c:	d000      	beq.n	406940 <_write_r+0x1c>
  40693e:	bd70      	pop	{r4, r5, r6, pc}
  406940:	6823      	ldr	r3, [r4, #0]
  406942:	2b00      	cmp	r3, #0
  406944:	d0fb      	beq.n	40693e <_write_r+0x1a>
  406946:	6033      	str	r3, [r6, #0]
  406948:	bd70      	pop	{r4, r5, r6, pc}
  40694a:	bf00      	nop
  40694c:	20400ab0 	.word	0x20400ab0

00406950 <__register_exitproc>:
  406950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406954:	4d2c      	ldr	r5, [pc, #176]	; (406a08 <__register_exitproc+0xb8>)
  406956:	4606      	mov	r6, r0
  406958:	6828      	ldr	r0, [r5, #0]
  40695a:	4698      	mov	r8, r3
  40695c:	460f      	mov	r7, r1
  40695e:	4691      	mov	r9, r2
  406960:	f7fe fe10 	bl	405584 <__retarget_lock_acquire_recursive>
  406964:	4b29      	ldr	r3, [pc, #164]	; (406a0c <__register_exitproc+0xbc>)
  406966:	681c      	ldr	r4, [r3, #0]
  406968:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40696c:	2b00      	cmp	r3, #0
  40696e:	d03e      	beq.n	4069ee <__register_exitproc+0x9e>
  406970:	685a      	ldr	r2, [r3, #4]
  406972:	2a1f      	cmp	r2, #31
  406974:	dc1c      	bgt.n	4069b0 <__register_exitproc+0x60>
  406976:	f102 0e01 	add.w	lr, r2, #1
  40697a:	b176      	cbz	r6, 40699a <__register_exitproc+0x4a>
  40697c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406980:	2401      	movs	r4, #1
  406982:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406986:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40698a:	4094      	lsls	r4, r2
  40698c:	4320      	orrs	r0, r4
  40698e:	2e02      	cmp	r6, #2
  406990:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406994:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406998:	d023      	beq.n	4069e2 <__register_exitproc+0x92>
  40699a:	3202      	adds	r2, #2
  40699c:	f8c3 e004 	str.w	lr, [r3, #4]
  4069a0:	6828      	ldr	r0, [r5, #0]
  4069a2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4069a6:	f7fe fdef 	bl	405588 <__retarget_lock_release_recursive>
  4069aa:	2000      	movs	r0, #0
  4069ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4069b0:	4b17      	ldr	r3, [pc, #92]	; (406a10 <__register_exitproc+0xc0>)
  4069b2:	b30b      	cbz	r3, 4069f8 <__register_exitproc+0xa8>
  4069b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4069b8:	f7fe fe60 	bl	40567c <malloc>
  4069bc:	4603      	mov	r3, r0
  4069be:	b1d8      	cbz	r0, 4069f8 <__register_exitproc+0xa8>
  4069c0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4069c4:	6002      	str	r2, [r0, #0]
  4069c6:	2100      	movs	r1, #0
  4069c8:	6041      	str	r1, [r0, #4]
  4069ca:	460a      	mov	r2, r1
  4069cc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4069d0:	f04f 0e01 	mov.w	lr, #1
  4069d4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4069d8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4069dc:	2e00      	cmp	r6, #0
  4069de:	d0dc      	beq.n	40699a <__register_exitproc+0x4a>
  4069e0:	e7cc      	b.n	40697c <__register_exitproc+0x2c>
  4069e2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4069e6:	430c      	orrs	r4, r1
  4069e8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4069ec:	e7d5      	b.n	40699a <__register_exitproc+0x4a>
  4069ee:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4069f2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4069f6:	e7bb      	b.n	406970 <__register_exitproc+0x20>
  4069f8:	6828      	ldr	r0, [r5, #0]
  4069fa:	f7fe fdc5 	bl	405588 <__retarget_lock_release_recursive>
  4069fe:	f04f 30ff 	mov.w	r0, #4294967295
  406a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406a06:	bf00      	nop
  406a08:	20400438 	.word	0x20400438
  406a0c:	00407b10 	.word	0x00407b10
  406a10:	0040567d 	.word	0x0040567d

00406a14 <_calloc_r>:
  406a14:	b510      	push	{r4, lr}
  406a16:	fb02 f101 	mul.w	r1, r2, r1
  406a1a:	f7fe fe37 	bl	40568c <_malloc_r>
  406a1e:	4604      	mov	r4, r0
  406a20:	b1d8      	cbz	r0, 406a5a <_calloc_r+0x46>
  406a22:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406a26:	f022 0203 	bic.w	r2, r2, #3
  406a2a:	3a04      	subs	r2, #4
  406a2c:	2a24      	cmp	r2, #36	; 0x24
  406a2e:	d818      	bhi.n	406a62 <_calloc_r+0x4e>
  406a30:	2a13      	cmp	r2, #19
  406a32:	d914      	bls.n	406a5e <_calloc_r+0x4a>
  406a34:	2300      	movs	r3, #0
  406a36:	2a1b      	cmp	r2, #27
  406a38:	6003      	str	r3, [r0, #0]
  406a3a:	6043      	str	r3, [r0, #4]
  406a3c:	d916      	bls.n	406a6c <_calloc_r+0x58>
  406a3e:	2a24      	cmp	r2, #36	; 0x24
  406a40:	6083      	str	r3, [r0, #8]
  406a42:	60c3      	str	r3, [r0, #12]
  406a44:	bf11      	iteee	ne
  406a46:	f100 0210 	addne.w	r2, r0, #16
  406a4a:	6103      	streq	r3, [r0, #16]
  406a4c:	6143      	streq	r3, [r0, #20]
  406a4e:	f100 0218 	addeq.w	r2, r0, #24
  406a52:	2300      	movs	r3, #0
  406a54:	6013      	str	r3, [r2, #0]
  406a56:	6053      	str	r3, [r2, #4]
  406a58:	6093      	str	r3, [r2, #8]
  406a5a:	4620      	mov	r0, r4
  406a5c:	bd10      	pop	{r4, pc}
  406a5e:	4602      	mov	r2, r0
  406a60:	e7f7      	b.n	406a52 <_calloc_r+0x3e>
  406a62:	2100      	movs	r1, #0
  406a64:	f7fb fc2a 	bl	4022bc <memset>
  406a68:	4620      	mov	r0, r4
  406a6a:	bd10      	pop	{r4, pc}
  406a6c:	f100 0208 	add.w	r2, r0, #8
  406a70:	e7ef      	b.n	406a52 <_calloc_r+0x3e>
  406a72:	bf00      	nop

00406a74 <_close_r>:
  406a74:	b538      	push	{r3, r4, r5, lr}
  406a76:	4c07      	ldr	r4, [pc, #28]	; (406a94 <_close_r+0x20>)
  406a78:	2300      	movs	r3, #0
  406a7a:	4605      	mov	r5, r0
  406a7c:	4608      	mov	r0, r1
  406a7e:	6023      	str	r3, [r4, #0]
  406a80:	f7fb f81a 	bl	401ab8 <_close>
  406a84:	1c43      	adds	r3, r0, #1
  406a86:	d000      	beq.n	406a8a <_close_r+0x16>
  406a88:	bd38      	pop	{r3, r4, r5, pc}
  406a8a:	6823      	ldr	r3, [r4, #0]
  406a8c:	2b00      	cmp	r3, #0
  406a8e:	d0fb      	beq.n	406a88 <_close_r+0x14>
  406a90:	602b      	str	r3, [r5, #0]
  406a92:	bd38      	pop	{r3, r4, r5, pc}
  406a94:	20400ab0 	.word	0x20400ab0

00406a98 <_fclose_r>:
  406a98:	b570      	push	{r4, r5, r6, lr}
  406a9a:	b159      	cbz	r1, 406ab4 <_fclose_r+0x1c>
  406a9c:	4605      	mov	r5, r0
  406a9e:	460c      	mov	r4, r1
  406aa0:	b110      	cbz	r0, 406aa8 <_fclose_r+0x10>
  406aa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406aa4:	2b00      	cmp	r3, #0
  406aa6:	d03c      	beq.n	406b22 <_fclose_r+0x8a>
  406aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406aaa:	07d8      	lsls	r0, r3, #31
  406aac:	d505      	bpl.n	406aba <_fclose_r+0x22>
  406aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ab2:	b92b      	cbnz	r3, 406ac0 <_fclose_r+0x28>
  406ab4:	2600      	movs	r6, #0
  406ab6:	4630      	mov	r0, r6
  406ab8:	bd70      	pop	{r4, r5, r6, pc}
  406aba:	89a3      	ldrh	r3, [r4, #12]
  406abc:	0599      	lsls	r1, r3, #22
  406abe:	d53c      	bpl.n	406b3a <_fclose_r+0xa2>
  406ac0:	4621      	mov	r1, r4
  406ac2:	4628      	mov	r0, r5
  406ac4:	f7fe f92a 	bl	404d1c <__sflush_r>
  406ac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406aca:	4606      	mov	r6, r0
  406acc:	b133      	cbz	r3, 406adc <_fclose_r+0x44>
  406ace:	69e1      	ldr	r1, [r4, #28]
  406ad0:	4628      	mov	r0, r5
  406ad2:	4798      	blx	r3
  406ad4:	2800      	cmp	r0, #0
  406ad6:	bfb8      	it	lt
  406ad8:	f04f 36ff 	movlt.w	r6, #4294967295
  406adc:	89a3      	ldrh	r3, [r4, #12]
  406ade:	061a      	lsls	r2, r3, #24
  406ae0:	d422      	bmi.n	406b28 <_fclose_r+0x90>
  406ae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406ae4:	b141      	cbz	r1, 406af8 <_fclose_r+0x60>
  406ae6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406aea:	4299      	cmp	r1, r3
  406aec:	d002      	beq.n	406af4 <_fclose_r+0x5c>
  406aee:	4628      	mov	r0, r5
  406af0:	f7fe faae 	bl	405050 <_free_r>
  406af4:	2300      	movs	r3, #0
  406af6:	6323      	str	r3, [r4, #48]	; 0x30
  406af8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406afa:	b121      	cbz	r1, 406b06 <_fclose_r+0x6e>
  406afc:	4628      	mov	r0, r5
  406afe:	f7fe faa7 	bl	405050 <_free_r>
  406b02:	2300      	movs	r3, #0
  406b04:	6463      	str	r3, [r4, #68]	; 0x44
  406b06:	f7fe fa2d 	bl	404f64 <__sfp_lock_acquire>
  406b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406b0c:	2200      	movs	r2, #0
  406b0e:	07db      	lsls	r3, r3, #31
  406b10:	81a2      	strh	r2, [r4, #12]
  406b12:	d50e      	bpl.n	406b32 <_fclose_r+0x9a>
  406b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b16:	f7fe fd33 	bl	405580 <__retarget_lock_close_recursive>
  406b1a:	f7fe fa29 	bl	404f70 <__sfp_lock_release>
  406b1e:	4630      	mov	r0, r6
  406b20:	bd70      	pop	{r4, r5, r6, pc}
  406b22:	f7fe f9f3 	bl	404f0c <__sinit>
  406b26:	e7bf      	b.n	406aa8 <_fclose_r+0x10>
  406b28:	6921      	ldr	r1, [r4, #16]
  406b2a:	4628      	mov	r0, r5
  406b2c:	f7fe fa90 	bl	405050 <_free_r>
  406b30:	e7d7      	b.n	406ae2 <_fclose_r+0x4a>
  406b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b34:	f7fe fd28 	bl	405588 <__retarget_lock_release_recursive>
  406b38:	e7ec      	b.n	406b14 <_fclose_r+0x7c>
  406b3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b3c:	f7fe fd22 	bl	405584 <__retarget_lock_acquire_recursive>
  406b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b44:	2b00      	cmp	r3, #0
  406b46:	d1bb      	bne.n	406ac0 <_fclose_r+0x28>
  406b48:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406b4a:	f016 0601 	ands.w	r6, r6, #1
  406b4e:	d1b1      	bne.n	406ab4 <_fclose_r+0x1c>
  406b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b52:	f7fe fd19 	bl	405588 <__retarget_lock_release_recursive>
  406b56:	4630      	mov	r0, r6
  406b58:	bd70      	pop	{r4, r5, r6, pc}
  406b5a:	bf00      	nop

00406b5c <__fputwc>:
  406b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406b60:	b082      	sub	sp, #8
  406b62:	4680      	mov	r8, r0
  406b64:	4689      	mov	r9, r1
  406b66:	4614      	mov	r4, r2
  406b68:	f000 f8a2 	bl	406cb0 <__locale_mb_cur_max>
  406b6c:	2801      	cmp	r0, #1
  406b6e:	d036      	beq.n	406bde <__fputwc+0x82>
  406b70:	464a      	mov	r2, r9
  406b72:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406b76:	a901      	add	r1, sp, #4
  406b78:	4640      	mov	r0, r8
  406b7a:	f000 f941 	bl	406e00 <_wcrtomb_r>
  406b7e:	1c42      	adds	r2, r0, #1
  406b80:	4606      	mov	r6, r0
  406b82:	d025      	beq.n	406bd0 <__fputwc+0x74>
  406b84:	b3a8      	cbz	r0, 406bf2 <__fputwc+0x96>
  406b86:	f89d e004 	ldrb.w	lr, [sp, #4]
  406b8a:	2500      	movs	r5, #0
  406b8c:	f10d 0a04 	add.w	sl, sp, #4
  406b90:	e009      	b.n	406ba6 <__fputwc+0x4a>
  406b92:	6823      	ldr	r3, [r4, #0]
  406b94:	1c5a      	adds	r2, r3, #1
  406b96:	6022      	str	r2, [r4, #0]
  406b98:	f883 e000 	strb.w	lr, [r3]
  406b9c:	3501      	adds	r5, #1
  406b9e:	42b5      	cmp	r5, r6
  406ba0:	d227      	bcs.n	406bf2 <__fputwc+0x96>
  406ba2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406ba6:	68a3      	ldr	r3, [r4, #8]
  406ba8:	3b01      	subs	r3, #1
  406baa:	2b00      	cmp	r3, #0
  406bac:	60a3      	str	r3, [r4, #8]
  406bae:	daf0      	bge.n	406b92 <__fputwc+0x36>
  406bb0:	69a7      	ldr	r7, [r4, #24]
  406bb2:	42bb      	cmp	r3, r7
  406bb4:	4671      	mov	r1, lr
  406bb6:	4622      	mov	r2, r4
  406bb8:	4640      	mov	r0, r8
  406bba:	db02      	blt.n	406bc2 <__fputwc+0x66>
  406bbc:	f1be 0f0a 	cmp.w	lr, #10
  406bc0:	d1e7      	bne.n	406b92 <__fputwc+0x36>
  406bc2:	f000 f8c5 	bl	406d50 <__swbuf_r>
  406bc6:	1c43      	adds	r3, r0, #1
  406bc8:	d1e8      	bne.n	406b9c <__fputwc+0x40>
  406bca:	b002      	add	sp, #8
  406bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bd0:	89a3      	ldrh	r3, [r4, #12]
  406bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406bd6:	81a3      	strh	r3, [r4, #12]
  406bd8:	b002      	add	sp, #8
  406bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bde:	f109 33ff 	add.w	r3, r9, #4294967295
  406be2:	2bfe      	cmp	r3, #254	; 0xfe
  406be4:	d8c4      	bhi.n	406b70 <__fputwc+0x14>
  406be6:	fa5f fe89 	uxtb.w	lr, r9
  406bea:	4606      	mov	r6, r0
  406bec:	f88d e004 	strb.w	lr, [sp, #4]
  406bf0:	e7cb      	b.n	406b8a <__fputwc+0x2e>
  406bf2:	4648      	mov	r0, r9
  406bf4:	b002      	add	sp, #8
  406bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bfa:	bf00      	nop

00406bfc <_fputwc_r>:
  406bfc:	b530      	push	{r4, r5, lr}
  406bfe:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406c00:	f013 0f01 	tst.w	r3, #1
  406c04:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406c08:	4614      	mov	r4, r2
  406c0a:	b083      	sub	sp, #12
  406c0c:	4605      	mov	r5, r0
  406c0e:	b29a      	uxth	r2, r3
  406c10:	d101      	bne.n	406c16 <_fputwc_r+0x1a>
  406c12:	0590      	lsls	r0, r2, #22
  406c14:	d51c      	bpl.n	406c50 <_fputwc_r+0x54>
  406c16:	0490      	lsls	r0, r2, #18
  406c18:	d406      	bmi.n	406c28 <_fputwc_r+0x2c>
  406c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406c24:	81a3      	strh	r3, [r4, #12]
  406c26:	6662      	str	r2, [r4, #100]	; 0x64
  406c28:	4628      	mov	r0, r5
  406c2a:	4622      	mov	r2, r4
  406c2c:	f7ff ff96 	bl	406b5c <__fputwc>
  406c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c32:	07da      	lsls	r2, r3, #31
  406c34:	4605      	mov	r5, r0
  406c36:	d402      	bmi.n	406c3e <_fputwc_r+0x42>
  406c38:	89a3      	ldrh	r3, [r4, #12]
  406c3a:	059b      	lsls	r3, r3, #22
  406c3c:	d502      	bpl.n	406c44 <_fputwc_r+0x48>
  406c3e:	4628      	mov	r0, r5
  406c40:	b003      	add	sp, #12
  406c42:	bd30      	pop	{r4, r5, pc}
  406c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c46:	f7fe fc9f 	bl	405588 <__retarget_lock_release_recursive>
  406c4a:	4628      	mov	r0, r5
  406c4c:	b003      	add	sp, #12
  406c4e:	bd30      	pop	{r4, r5, pc}
  406c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c52:	9101      	str	r1, [sp, #4]
  406c54:	f7fe fc96 	bl	405584 <__retarget_lock_acquire_recursive>
  406c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c5c:	9901      	ldr	r1, [sp, #4]
  406c5e:	b29a      	uxth	r2, r3
  406c60:	e7d9      	b.n	406c16 <_fputwc_r+0x1a>
  406c62:	bf00      	nop

00406c64 <_fstat_r>:
  406c64:	b538      	push	{r3, r4, r5, lr}
  406c66:	460b      	mov	r3, r1
  406c68:	4c07      	ldr	r4, [pc, #28]	; (406c88 <_fstat_r+0x24>)
  406c6a:	4605      	mov	r5, r0
  406c6c:	4611      	mov	r1, r2
  406c6e:	4618      	mov	r0, r3
  406c70:	2300      	movs	r3, #0
  406c72:	6023      	str	r3, [r4, #0]
  406c74:	f7fa ff2c 	bl	401ad0 <_fstat>
  406c78:	1c43      	adds	r3, r0, #1
  406c7a:	d000      	beq.n	406c7e <_fstat_r+0x1a>
  406c7c:	bd38      	pop	{r3, r4, r5, pc}
  406c7e:	6823      	ldr	r3, [r4, #0]
  406c80:	2b00      	cmp	r3, #0
  406c82:	d0fb      	beq.n	406c7c <_fstat_r+0x18>
  406c84:	602b      	str	r3, [r5, #0]
  406c86:	bd38      	pop	{r3, r4, r5, pc}
  406c88:	20400ab0 	.word	0x20400ab0

00406c8c <_isatty_r>:
  406c8c:	b538      	push	{r3, r4, r5, lr}
  406c8e:	4c07      	ldr	r4, [pc, #28]	; (406cac <_isatty_r+0x20>)
  406c90:	2300      	movs	r3, #0
  406c92:	4605      	mov	r5, r0
  406c94:	4608      	mov	r0, r1
  406c96:	6023      	str	r3, [r4, #0]
  406c98:	f7fa ff2a 	bl	401af0 <_isatty>
  406c9c:	1c43      	adds	r3, r0, #1
  406c9e:	d000      	beq.n	406ca2 <_isatty_r+0x16>
  406ca0:	bd38      	pop	{r3, r4, r5, pc}
  406ca2:	6823      	ldr	r3, [r4, #0]
  406ca4:	2b00      	cmp	r3, #0
  406ca6:	d0fb      	beq.n	406ca0 <_isatty_r+0x14>
  406ca8:	602b      	str	r3, [r5, #0]
  406caa:	bd38      	pop	{r3, r4, r5, pc}
  406cac:	20400ab0 	.word	0x20400ab0

00406cb0 <__locale_mb_cur_max>:
  406cb0:	4b04      	ldr	r3, [pc, #16]	; (406cc4 <__locale_mb_cur_max+0x14>)
  406cb2:	4a05      	ldr	r2, [pc, #20]	; (406cc8 <__locale_mb_cur_max+0x18>)
  406cb4:	681b      	ldr	r3, [r3, #0]
  406cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406cb8:	2b00      	cmp	r3, #0
  406cba:	bf08      	it	eq
  406cbc:	4613      	moveq	r3, r2
  406cbe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406cc2:	4770      	bx	lr
  406cc4:	20400008 	.word	0x20400008
  406cc8:	2040084c 	.word	0x2040084c

00406ccc <_lseek_r>:
  406ccc:	b570      	push	{r4, r5, r6, lr}
  406cce:	460d      	mov	r5, r1
  406cd0:	4c08      	ldr	r4, [pc, #32]	; (406cf4 <_lseek_r+0x28>)
  406cd2:	4611      	mov	r1, r2
  406cd4:	4606      	mov	r6, r0
  406cd6:	461a      	mov	r2, r3
  406cd8:	4628      	mov	r0, r5
  406cda:	2300      	movs	r3, #0
  406cdc:	6023      	str	r3, [r4, #0]
  406cde:	f7fa ff12 	bl	401b06 <_lseek>
  406ce2:	1c43      	adds	r3, r0, #1
  406ce4:	d000      	beq.n	406ce8 <_lseek_r+0x1c>
  406ce6:	bd70      	pop	{r4, r5, r6, pc}
  406ce8:	6823      	ldr	r3, [r4, #0]
  406cea:	2b00      	cmp	r3, #0
  406cec:	d0fb      	beq.n	406ce6 <_lseek_r+0x1a>
  406cee:	6033      	str	r3, [r6, #0]
  406cf0:	bd70      	pop	{r4, r5, r6, pc}
  406cf2:	bf00      	nop
  406cf4:	20400ab0 	.word	0x20400ab0

00406cf8 <__ascii_mbtowc>:
  406cf8:	b082      	sub	sp, #8
  406cfa:	b149      	cbz	r1, 406d10 <__ascii_mbtowc+0x18>
  406cfc:	b15a      	cbz	r2, 406d16 <__ascii_mbtowc+0x1e>
  406cfe:	b16b      	cbz	r3, 406d1c <__ascii_mbtowc+0x24>
  406d00:	7813      	ldrb	r3, [r2, #0]
  406d02:	600b      	str	r3, [r1, #0]
  406d04:	7812      	ldrb	r2, [r2, #0]
  406d06:	1c10      	adds	r0, r2, #0
  406d08:	bf18      	it	ne
  406d0a:	2001      	movne	r0, #1
  406d0c:	b002      	add	sp, #8
  406d0e:	4770      	bx	lr
  406d10:	a901      	add	r1, sp, #4
  406d12:	2a00      	cmp	r2, #0
  406d14:	d1f3      	bne.n	406cfe <__ascii_mbtowc+0x6>
  406d16:	4610      	mov	r0, r2
  406d18:	b002      	add	sp, #8
  406d1a:	4770      	bx	lr
  406d1c:	f06f 0001 	mvn.w	r0, #1
  406d20:	e7f4      	b.n	406d0c <__ascii_mbtowc+0x14>
  406d22:	bf00      	nop

00406d24 <_read_r>:
  406d24:	b570      	push	{r4, r5, r6, lr}
  406d26:	460d      	mov	r5, r1
  406d28:	4c08      	ldr	r4, [pc, #32]	; (406d4c <_read_r+0x28>)
  406d2a:	4611      	mov	r1, r2
  406d2c:	4606      	mov	r6, r0
  406d2e:	461a      	mov	r2, r3
  406d30:	4628      	mov	r0, r5
  406d32:	2300      	movs	r3, #0
  406d34:	6023      	str	r3, [r4, #0]
  406d36:	f7f9 fbf7 	bl	400528 <_read>
  406d3a:	1c43      	adds	r3, r0, #1
  406d3c:	d000      	beq.n	406d40 <_read_r+0x1c>
  406d3e:	bd70      	pop	{r4, r5, r6, pc}
  406d40:	6823      	ldr	r3, [r4, #0]
  406d42:	2b00      	cmp	r3, #0
  406d44:	d0fb      	beq.n	406d3e <_read_r+0x1a>
  406d46:	6033      	str	r3, [r6, #0]
  406d48:	bd70      	pop	{r4, r5, r6, pc}
  406d4a:	bf00      	nop
  406d4c:	20400ab0 	.word	0x20400ab0

00406d50 <__swbuf_r>:
  406d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d52:	460d      	mov	r5, r1
  406d54:	4614      	mov	r4, r2
  406d56:	4606      	mov	r6, r0
  406d58:	b110      	cbz	r0, 406d60 <__swbuf_r+0x10>
  406d5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d5c:	2b00      	cmp	r3, #0
  406d5e:	d04b      	beq.n	406df8 <__swbuf_r+0xa8>
  406d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406d64:	69a3      	ldr	r3, [r4, #24]
  406d66:	60a3      	str	r3, [r4, #8]
  406d68:	b291      	uxth	r1, r2
  406d6a:	0708      	lsls	r0, r1, #28
  406d6c:	d539      	bpl.n	406de2 <__swbuf_r+0x92>
  406d6e:	6923      	ldr	r3, [r4, #16]
  406d70:	2b00      	cmp	r3, #0
  406d72:	d036      	beq.n	406de2 <__swbuf_r+0x92>
  406d74:	b2ed      	uxtb	r5, r5
  406d76:	0489      	lsls	r1, r1, #18
  406d78:	462f      	mov	r7, r5
  406d7a:	d515      	bpl.n	406da8 <__swbuf_r+0x58>
  406d7c:	6822      	ldr	r2, [r4, #0]
  406d7e:	6961      	ldr	r1, [r4, #20]
  406d80:	1ad3      	subs	r3, r2, r3
  406d82:	428b      	cmp	r3, r1
  406d84:	da1c      	bge.n	406dc0 <__swbuf_r+0x70>
  406d86:	3301      	adds	r3, #1
  406d88:	68a1      	ldr	r1, [r4, #8]
  406d8a:	1c50      	adds	r0, r2, #1
  406d8c:	3901      	subs	r1, #1
  406d8e:	60a1      	str	r1, [r4, #8]
  406d90:	6020      	str	r0, [r4, #0]
  406d92:	7015      	strb	r5, [r2, #0]
  406d94:	6962      	ldr	r2, [r4, #20]
  406d96:	429a      	cmp	r2, r3
  406d98:	d01a      	beq.n	406dd0 <__swbuf_r+0x80>
  406d9a:	89a3      	ldrh	r3, [r4, #12]
  406d9c:	07db      	lsls	r3, r3, #31
  406d9e:	d501      	bpl.n	406da4 <__swbuf_r+0x54>
  406da0:	2d0a      	cmp	r5, #10
  406da2:	d015      	beq.n	406dd0 <__swbuf_r+0x80>
  406da4:	4638      	mov	r0, r7
  406da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406da8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406dae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406db2:	81a2      	strh	r2, [r4, #12]
  406db4:	6822      	ldr	r2, [r4, #0]
  406db6:	6661      	str	r1, [r4, #100]	; 0x64
  406db8:	6961      	ldr	r1, [r4, #20]
  406dba:	1ad3      	subs	r3, r2, r3
  406dbc:	428b      	cmp	r3, r1
  406dbe:	dbe2      	blt.n	406d86 <__swbuf_r+0x36>
  406dc0:	4621      	mov	r1, r4
  406dc2:	4630      	mov	r0, r6
  406dc4:	f7fe f84a 	bl	404e5c <_fflush_r>
  406dc8:	b940      	cbnz	r0, 406ddc <__swbuf_r+0x8c>
  406dca:	6822      	ldr	r2, [r4, #0]
  406dcc:	2301      	movs	r3, #1
  406dce:	e7db      	b.n	406d88 <__swbuf_r+0x38>
  406dd0:	4621      	mov	r1, r4
  406dd2:	4630      	mov	r0, r6
  406dd4:	f7fe f842 	bl	404e5c <_fflush_r>
  406dd8:	2800      	cmp	r0, #0
  406dda:	d0e3      	beq.n	406da4 <__swbuf_r+0x54>
  406ddc:	f04f 37ff 	mov.w	r7, #4294967295
  406de0:	e7e0      	b.n	406da4 <__swbuf_r+0x54>
  406de2:	4621      	mov	r1, r4
  406de4:	4630      	mov	r0, r6
  406de6:	f7fc ff67 	bl	403cb8 <__swsetup_r>
  406dea:	2800      	cmp	r0, #0
  406dec:	d1f6      	bne.n	406ddc <__swbuf_r+0x8c>
  406dee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406df2:	6923      	ldr	r3, [r4, #16]
  406df4:	b291      	uxth	r1, r2
  406df6:	e7bd      	b.n	406d74 <__swbuf_r+0x24>
  406df8:	f7fe f888 	bl	404f0c <__sinit>
  406dfc:	e7b0      	b.n	406d60 <__swbuf_r+0x10>
  406dfe:	bf00      	nop

00406e00 <_wcrtomb_r>:
  406e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e02:	4606      	mov	r6, r0
  406e04:	b085      	sub	sp, #20
  406e06:	461f      	mov	r7, r3
  406e08:	b189      	cbz	r1, 406e2e <_wcrtomb_r+0x2e>
  406e0a:	4c10      	ldr	r4, [pc, #64]	; (406e4c <_wcrtomb_r+0x4c>)
  406e0c:	4d10      	ldr	r5, [pc, #64]	; (406e50 <_wcrtomb_r+0x50>)
  406e0e:	6824      	ldr	r4, [r4, #0]
  406e10:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406e12:	2c00      	cmp	r4, #0
  406e14:	bf08      	it	eq
  406e16:	462c      	moveq	r4, r5
  406e18:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406e1c:	47a0      	blx	r4
  406e1e:	1c43      	adds	r3, r0, #1
  406e20:	d103      	bne.n	406e2a <_wcrtomb_r+0x2a>
  406e22:	2200      	movs	r2, #0
  406e24:	238a      	movs	r3, #138	; 0x8a
  406e26:	603a      	str	r2, [r7, #0]
  406e28:	6033      	str	r3, [r6, #0]
  406e2a:	b005      	add	sp, #20
  406e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e2e:	460c      	mov	r4, r1
  406e30:	4906      	ldr	r1, [pc, #24]	; (406e4c <_wcrtomb_r+0x4c>)
  406e32:	4a07      	ldr	r2, [pc, #28]	; (406e50 <_wcrtomb_r+0x50>)
  406e34:	6809      	ldr	r1, [r1, #0]
  406e36:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406e38:	2900      	cmp	r1, #0
  406e3a:	bf08      	it	eq
  406e3c:	4611      	moveq	r1, r2
  406e3e:	4622      	mov	r2, r4
  406e40:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406e44:	a901      	add	r1, sp, #4
  406e46:	47a0      	blx	r4
  406e48:	e7e9      	b.n	406e1e <_wcrtomb_r+0x1e>
  406e4a:	bf00      	nop
  406e4c:	20400008 	.word	0x20400008
  406e50:	2040084c 	.word	0x2040084c

00406e54 <__ascii_wctomb>:
  406e54:	b121      	cbz	r1, 406e60 <__ascii_wctomb+0xc>
  406e56:	2aff      	cmp	r2, #255	; 0xff
  406e58:	d804      	bhi.n	406e64 <__ascii_wctomb+0x10>
  406e5a:	700a      	strb	r2, [r1, #0]
  406e5c:	2001      	movs	r0, #1
  406e5e:	4770      	bx	lr
  406e60:	4608      	mov	r0, r1
  406e62:	4770      	bx	lr
  406e64:	238a      	movs	r3, #138	; 0x8a
  406e66:	6003      	str	r3, [r0, #0]
  406e68:	f04f 30ff 	mov.w	r0, #4294967295
  406e6c:	4770      	bx	lr
  406e6e:	bf00      	nop

00406e70 <__aeabi_drsub>:
  406e70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406e74:	e002      	b.n	406e7c <__adddf3>
  406e76:	bf00      	nop

00406e78 <__aeabi_dsub>:
  406e78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406e7c <__adddf3>:
  406e7c:	b530      	push	{r4, r5, lr}
  406e7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406e82:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406e86:	ea94 0f05 	teq	r4, r5
  406e8a:	bf08      	it	eq
  406e8c:	ea90 0f02 	teqeq	r0, r2
  406e90:	bf1f      	itttt	ne
  406e92:	ea54 0c00 	orrsne.w	ip, r4, r0
  406e96:	ea55 0c02 	orrsne.w	ip, r5, r2
  406e9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406e9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406ea2:	f000 80e2 	beq.w	40706a <__adddf3+0x1ee>
  406ea6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406eaa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406eae:	bfb8      	it	lt
  406eb0:	426d      	neglt	r5, r5
  406eb2:	dd0c      	ble.n	406ece <__adddf3+0x52>
  406eb4:	442c      	add	r4, r5
  406eb6:	ea80 0202 	eor.w	r2, r0, r2
  406eba:	ea81 0303 	eor.w	r3, r1, r3
  406ebe:	ea82 0000 	eor.w	r0, r2, r0
  406ec2:	ea83 0101 	eor.w	r1, r3, r1
  406ec6:	ea80 0202 	eor.w	r2, r0, r2
  406eca:	ea81 0303 	eor.w	r3, r1, r3
  406ece:	2d36      	cmp	r5, #54	; 0x36
  406ed0:	bf88      	it	hi
  406ed2:	bd30      	pophi	{r4, r5, pc}
  406ed4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406ed8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406edc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406ee0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406ee4:	d002      	beq.n	406eec <__adddf3+0x70>
  406ee6:	4240      	negs	r0, r0
  406ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406eec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406ef0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406ef4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406ef8:	d002      	beq.n	406f00 <__adddf3+0x84>
  406efa:	4252      	negs	r2, r2
  406efc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406f00:	ea94 0f05 	teq	r4, r5
  406f04:	f000 80a7 	beq.w	407056 <__adddf3+0x1da>
  406f08:	f1a4 0401 	sub.w	r4, r4, #1
  406f0c:	f1d5 0e20 	rsbs	lr, r5, #32
  406f10:	db0d      	blt.n	406f2e <__adddf3+0xb2>
  406f12:	fa02 fc0e 	lsl.w	ip, r2, lr
  406f16:	fa22 f205 	lsr.w	r2, r2, r5
  406f1a:	1880      	adds	r0, r0, r2
  406f1c:	f141 0100 	adc.w	r1, r1, #0
  406f20:	fa03 f20e 	lsl.w	r2, r3, lr
  406f24:	1880      	adds	r0, r0, r2
  406f26:	fa43 f305 	asr.w	r3, r3, r5
  406f2a:	4159      	adcs	r1, r3
  406f2c:	e00e      	b.n	406f4c <__adddf3+0xd0>
  406f2e:	f1a5 0520 	sub.w	r5, r5, #32
  406f32:	f10e 0e20 	add.w	lr, lr, #32
  406f36:	2a01      	cmp	r2, #1
  406f38:	fa03 fc0e 	lsl.w	ip, r3, lr
  406f3c:	bf28      	it	cs
  406f3e:	f04c 0c02 	orrcs.w	ip, ip, #2
  406f42:	fa43 f305 	asr.w	r3, r3, r5
  406f46:	18c0      	adds	r0, r0, r3
  406f48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406f4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f50:	d507      	bpl.n	406f62 <__adddf3+0xe6>
  406f52:	f04f 0e00 	mov.w	lr, #0
  406f56:	f1dc 0c00 	rsbs	ip, ip, #0
  406f5a:	eb7e 0000 	sbcs.w	r0, lr, r0
  406f5e:	eb6e 0101 	sbc.w	r1, lr, r1
  406f62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406f66:	d31b      	bcc.n	406fa0 <__adddf3+0x124>
  406f68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406f6c:	d30c      	bcc.n	406f88 <__adddf3+0x10c>
  406f6e:	0849      	lsrs	r1, r1, #1
  406f70:	ea5f 0030 	movs.w	r0, r0, rrx
  406f74:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406f78:	f104 0401 	add.w	r4, r4, #1
  406f7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406f80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406f84:	f080 809a 	bcs.w	4070bc <__adddf3+0x240>
  406f88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406f8c:	bf08      	it	eq
  406f8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406f92:	f150 0000 	adcs.w	r0, r0, #0
  406f96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406f9a:	ea41 0105 	orr.w	r1, r1, r5
  406f9e:	bd30      	pop	{r4, r5, pc}
  406fa0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406fa4:	4140      	adcs	r0, r0
  406fa6:	eb41 0101 	adc.w	r1, r1, r1
  406faa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406fae:	f1a4 0401 	sub.w	r4, r4, #1
  406fb2:	d1e9      	bne.n	406f88 <__adddf3+0x10c>
  406fb4:	f091 0f00 	teq	r1, #0
  406fb8:	bf04      	itt	eq
  406fba:	4601      	moveq	r1, r0
  406fbc:	2000      	moveq	r0, #0
  406fbe:	fab1 f381 	clz	r3, r1
  406fc2:	bf08      	it	eq
  406fc4:	3320      	addeq	r3, #32
  406fc6:	f1a3 030b 	sub.w	r3, r3, #11
  406fca:	f1b3 0220 	subs.w	r2, r3, #32
  406fce:	da0c      	bge.n	406fea <__adddf3+0x16e>
  406fd0:	320c      	adds	r2, #12
  406fd2:	dd08      	ble.n	406fe6 <__adddf3+0x16a>
  406fd4:	f102 0c14 	add.w	ip, r2, #20
  406fd8:	f1c2 020c 	rsb	r2, r2, #12
  406fdc:	fa01 f00c 	lsl.w	r0, r1, ip
  406fe0:	fa21 f102 	lsr.w	r1, r1, r2
  406fe4:	e00c      	b.n	407000 <__adddf3+0x184>
  406fe6:	f102 0214 	add.w	r2, r2, #20
  406fea:	bfd8      	it	le
  406fec:	f1c2 0c20 	rsble	ip, r2, #32
  406ff0:	fa01 f102 	lsl.w	r1, r1, r2
  406ff4:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ff8:	bfdc      	itt	le
  406ffa:	ea41 010c 	orrle.w	r1, r1, ip
  406ffe:	4090      	lslle	r0, r2
  407000:	1ae4      	subs	r4, r4, r3
  407002:	bfa2      	ittt	ge
  407004:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407008:	4329      	orrge	r1, r5
  40700a:	bd30      	popge	{r4, r5, pc}
  40700c:	ea6f 0404 	mvn.w	r4, r4
  407010:	3c1f      	subs	r4, #31
  407012:	da1c      	bge.n	40704e <__adddf3+0x1d2>
  407014:	340c      	adds	r4, #12
  407016:	dc0e      	bgt.n	407036 <__adddf3+0x1ba>
  407018:	f104 0414 	add.w	r4, r4, #20
  40701c:	f1c4 0220 	rsb	r2, r4, #32
  407020:	fa20 f004 	lsr.w	r0, r0, r4
  407024:	fa01 f302 	lsl.w	r3, r1, r2
  407028:	ea40 0003 	orr.w	r0, r0, r3
  40702c:	fa21 f304 	lsr.w	r3, r1, r4
  407030:	ea45 0103 	orr.w	r1, r5, r3
  407034:	bd30      	pop	{r4, r5, pc}
  407036:	f1c4 040c 	rsb	r4, r4, #12
  40703a:	f1c4 0220 	rsb	r2, r4, #32
  40703e:	fa20 f002 	lsr.w	r0, r0, r2
  407042:	fa01 f304 	lsl.w	r3, r1, r4
  407046:	ea40 0003 	orr.w	r0, r0, r3
  40704a:	4629      	mov	r1, r5
  40704c:	bd30      	pop	{r4, r5, pc}
  40704e:	fa21 f004 	lsr.w	r0, r1, r4
  407052:	4629      	mov	r1, r5
  407054:	bd30      	pop	{r4, r5, pc}
  407056:	f094 0f00 	teq	r4, #0
  40705a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40705e:	bf06      	itte	eq
  407060:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407064:	3401      	addeq	r4, #1
  407066:	3d01      	subne	r5, #1
  407068:	e74e      	b.n	406f08 <__adddf3+0x8c>
  40706a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40706e:	bf18      	it	ne
  407070:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407074:	d029      	beq.n	4070ca <__adddf3+0x24e>
  407076:	ea94 0f05 	teq	r4, r5
  40707a:	bf08      	it	eq
  40707c:	ea90 0f02 	teqeq	r0, r2
  407080:	d005      	beq.n	40708e <__adddf3+0x212>
  407082:	ea54 0c00 	orrs.w	ip, r4, r0
  407086:	bf04      	itt	eq
  407088:	4619      	moveq	r1, r3
  40708a:	4610      	moveq	r0, r2
  40708c:	bd30      	pop	{r4, r5, pc}
  40708e:	ea91 0f03 	teq	r1, r3
  407092:	bf1e      	ittt	ne
  407094:	2100      	movne	r1, #0
  407096:	2000      	movne	r0, #0
  407098:	bd30      	popne	{r4, r5, pc}
  40709a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40709e:	d105      	bne.n	4070ac <__adddf3+0x230>
  4070a0:	0040      	lsls	r0, r0, #1
  4070a2:	4149      	adcs	r1, r1
  4070a4:	bf28      	it	cs
  4070a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4070aa:	bd30      	pop	{r4, r5, pc}
  4070ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4070b0:	bf3c      	itt	cc
  4070b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4070b6:	bd30      	popcc	{r4, r5, pc}
  4070b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4070bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4070c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4070c4:	f04f 0000 	mov.w	r0, #0
  4070c8:	bd30      	pop	{r4, r5, pc}
  4070ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4070ce:	bf1a      	itte	ne
  4070d0:	4619      	movne	r1, r3
  4070d2:	4610      	movne	r0, r2
  4070d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4070d8:	bf1c      	itt	ne
  4070da:	460b      	movne	r3, r1
  4070dc:	4602      	movne	r2, r0
  4070de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4070e2:	bf06      	itte	eq
  4070e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4070e8:	ea91 0f03 	teqeq	r1, r3
  4070ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4070f0:	bd30      	pop	{r4, r5, pc}
  4070f2:	bf00      	nop

004070f4 <__aeabi_ui2d>:
  4070f4:	f090 0f00 	teq	r0, #0
  4070f8:	bf04      	itt	eq
  4070fa:	2100      	moveq	r1, #0
  4070fc:	4770      	bxeq	lr
  4070fe:	b530      	push	{r4, r5, lr}
  407100:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407104:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407108:	f04f 0500 	mov.w	r5, #0
  40710c:	f04f 0100 	mov.w	r1, #0
  407110:	e750      	b.n	406fb4 <__adddf3+0x138>
  407112:	bf00      	nop

00407114 <__aeabi_i2d>:
  407114:	f090 0f00 	teq	r0, #0
  407118:	bf04      	itt	eq
  40711a:	2100      	moveq	r1, #0
  40711c:	4770      	bxeq	lr
  40711e:	b530      	push	{r4, r5, lr}
  407120:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407124:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407128:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40712c:	bf48      	it	mi
  40712e:	4240      	negmi	r0, r0
  407130:	f04f 0100 	mov.w	r1, #0
  407134:	e73e      	b.n	406fb4 <__adddf3+0x138>
  407136:	bf00      	nop

00407138 <__aeabi_f2d>:
  407138:	0042      	lsls	r2, r0, #1
  40713a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40713e:	ea4f 0131 	mov.w	r1, r1, rrx
  407142:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407146:	bf1f      	itttt	ne
  407148:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40714c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407150:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407154:	4770      	bxne	lr
  407156:	f092 0f00 	teq	r2, #0
  40715a:	bf14      	ite	ne
  40715c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407160:	4770      	bxeq	lr
  407162:	b530      	push	{r4, r5, lr}
  407164:	f44f 7460 	mov.w	r4, #896	; 0x380
  407168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40716c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407170:	e720      	b.n	406fb4 <__adddf3+0x138>
  407172:	bf00      	nop

00407174 <__aeabi_ul2d>:
  407174:	ea50 0201 	orrs.w	r2, r0, r1
  407178:	bf08      	it	eq
  40717a:	4770      	bxeq	lr
  40717c:	b530      	push	{r4, r5, lr}
  40717e:	f04f 0500 	mov.w	r5, #0
  407182:	e00a      	b.n	40719a <__aeabi_l2d+0x16>

00407184 <__aeabi_l2d>:
  407184:	ea50 0201 	orrs.w	r2, r0, r1
  407188:	bf08      	it	eq
  40718a:	4770      	bxeq	lr
  40718c:	b530      	push	{r4, r5, lr}
  40718e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407192:	d502      	bpl.n	40719a <__aeabi_l2d+0x16>
  407194:	4240      	negs	r0, r0
  407196:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40719a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40719e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4071a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4071a6:	f43f aedc 	beq.w	406f62 <__adddf3+0xe6>
  4071aa:	f04f 0203 	mov.w	r2, #3
  4071ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4071b2:	bf18      	it	ne
  4071b4:	3203      	addne	r2, #3
  4071b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4071ba:	bf18      	it	ne
  4071bc:	3203      	addne	r2, #3
  4071be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4071c2:	f1c2 0320 	rsb	r3, r2, #32
  4071c6:	fa00 fc03 	lsl.w	ip, r0, r3
  4071ca:	fa20 f002 	lsr.w	r0, r0, r2
  4071ce:	fa01 fe03 	lsl.w	lr, r1, r3
  4071d2:	ea40 000e 	orr.w	r0, r0, lr
  4071d6:	fa21 f102 	lsr.w	r1, r1, r2
  4071da:	4414      	add	r4, r2
  4071dc:	e6c1      	b.n	406f62 <__adddf3+0xe6>
  4071de:	bf00      	nop

004071e0 <__aeabi_dmul>:
  4071e0:	b570      	push	{r4, r5, r6, lr}
  4071e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4071e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4071ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4071ee:	bf1d      	ittte	ne
  4071f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4071f4:	ea94 0f0c 	teqne	r4, ip
  4071f8:	ea95 0f0c 	teqne	r5, ip
  4071fc:	f000 f8de 	bleq	4073bc <__aeabi_dmul+0x1dc>
  407200:	442c      	add	r4, r5
  407202:	ea81 0603 	eor.w	r6, r1, r3
  407206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40720a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40720e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407212:	bf18      	it	ne
  407214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40721c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407220:	d038      	beq.n	407294 <__aeabi_dmul+0xb4>
  407222:	fba0 ce02 	umull	ip, lr, r0, r2
  407226:	f04f 0500 	mov.w	r5, #0
  40722a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40722e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407232:	fbe0 e503 	umlal	lr, r5, r0, r3
  407236:	f04f 0600 	mov.w	r6, #0
  40723a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40723e:	f09c 0f00 	teq	ip, #0
  407242:	bf18      	it	ne
  407244:	f04e 0e01 	orrne.w	lr, lr, #1
  407248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40724c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407254:	d204      	bcs.n	407260 <__aeabi_dmul+0x80>
  407256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40725a:	416d      	adcs	r5, r5
  40725c:	eb46 0606 	adc.w	r6, r6, r6
  407260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40726c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407278:	bf88      	it	hi
  40727a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40727e:	d81e      	bhi.n	4072be <__aeabi_dmul+0xde>
  407280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407284:	bf08      	it	eq
  407286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40728a:	f150 0000 	adcs.w	r0, r0, #0
  40728e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407292:	bd70      	pop	{r4, r5, r6, pc}
  407294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407298:	ea46 0101 	orr.w	r1, r6, r1
  40729c:	ea40 0002 	orr.w	r0, r0, r2
  4072a0:	ea81 0103 	eor.w	r1, r1, r3
  4072a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4072a8:	bfc2      	ittt	gt
  4072aa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4072ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4072b2:	bd70      	popgt	{r4, r5, r6, pc}
  4072b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4072b8:	f04f 0e00 	mov.w	lr, #0
  4072bc:	3c01      	subs	r4, #1
  4072be:	f300 80ab 	bgt.w	407418 <__aeabi_dmul+0x238>
  4072c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4072c6:	bfde      	ittt	le
  4072c8:	2000      	movle	r0, #0
  4072ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4072ce:	bd70      	pople	{r4, r5, r6, pc}
  4072d0:	f1c4 0400 	rsb	r4, r4, #0
  4072d4:	3c20      	subs	r4, #32
  4072d6:	da35      	bge.n	407344 <__aeabi_dmul+0x164>
  4072d8:	340c      	adds	r4, #12
  4072da:	dc1b      	bgt.n	407314 <__aeabi_dmul+0x134>
  4072dc:	f104 0414 	add.w	r4, r4, #20
  4072e0:	f1c4 0520 	rsb	r5, r4, #32
  4072e4:	fa00 f305 	lsl.w	r3, r0, r5
  4072e8:	fa20 f004 	lsr.w	r0, r0, r4
  4072ec:	fa01 f205 	lsl.w	r2, r1, r5
  4072f0:	ea40 0002 	orr.w	r0, r0, r2
  4072f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4072f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4072fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407300:	fa21 f604 	lsr.w	r6, r1, r4
  407304:	eb42 0106 	adc.w	r1, r2, r6
  407308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40730c:	bf08      	it	eq
  40730e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407312:	bd70      	pop	{r4, r5, r6, pc}
  407314:	f1c4 040c 	rsb	r4, r4, #12
  407318:	f1c4 0520 	rsb	r5, r4, #32
  40731c:	fa00 f304 	lsl.w	r3, r0, r4
  407320:	fa20 f005 	lsr.w	r0, r0, r5
  407324:	fa01 f204 	lsl.w	r2, r1, r4
  407328:	ea40 0002 	orr.w	r0, r0, r2
  40732c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407334:	f141 0100 	adc.w	r1, r1, #0
  407338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40733c:	bf08      	it	eq
  40733e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407342:	bd70      	pop	{r4, r5, r6, pc}
  407344:	f1c4 0520 	rsb	r5, r4, #32
  407348:	fa00 f205 	lsl.w	r2, r0, r5
  40734c:	ea4e 0e02 	orr.w	lr, lr, r2
  407350:	fa20 f304 	lsr.w	r3, r0, r4
  407354:	fa01 f205 	lsl.w	r2, r1, r5
  407358:	ea43 0302 	orr.w	r3, r3, r2
  40735c:	fa21 f004 	lsr.w	r0, r1, r4
  407360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407364:	fa21 f204 	lsr.w	r2, r1, r4
  407368:	ea20 0002 	bic.w	r0, r0, r2
  40736c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407374:	bf08      	it	eq
  407376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40737a:	bd70      	pop	{r4, r5, r6, pc}
  40737c:	f094 0f00 	teq	r4, #0
  407380:	d10f      	bne.n	4073a2 <__aeabi_dmul+0x1c2>
  407382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407386:	0040      	lsls	r0, r0, #1
  407388:	eb41 0101 	adc.w	r1, r1, r1
  40738c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407390:	bf08      	it	eq
  407392:	3c01      	subeq	r4, #1
  407394:	d0f7      	beq.n	407386 <__aeabi_dmul+0x1a6>
  407396:	ea41 0106 	orr.w	r1, r1, r6
  40739a:	f095 0f00 	teq	r5, #0
  40739e:	bf18      	it	ne
  4073a0:	4770      	bxne	lr
  4073a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4073a6:	0052      	lsls	r2, r2, #1
  4073a8:	eb43 0303 	adc.w	r3, r3, r3
  4073ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4073b0:	bf08      	it	eq
  4073b2:	3d01      	subeq	r5, #1
  4073b4:	d0f7      	beq.n	4073a6 <__aeabi_dmul+0x1c6>
  4073b6:	ea43 0306 	orr.w	r3, r3, r6
  4073ba:	4770      	bx	lr
  4073bc:	ea94 0f0c 	teq	r4, ip
  4073c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4073c4:	bf18      	it	ne
  4073c6:	ea95 0f0c 	teqne	r5, ip
  4073ca:	d00c      	beq.n	4073e6 <__aeabi_dmul+0x206>
  4073cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4073d0:	bf18      	it	ne
  4073d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4073d6:	d1d1      	bne.n	40737c <__aeabi_dmul+0x19c>
  4073d8:	ea81 0103 	eor.w	r1, r1, r3
  4073dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4073e0:	f04f 0000 	mov.w	r0, #0
  4073e4:	bd70      	pop	{r4, r5, r6, pc}
  4073e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4073ea:	bf06      	itte	eq
  4073ec:	4610      	moveq	r0, r2
  4073ee:	4619      	moveq	r1, r3
  4073f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4073f4:	d019      	beq.n	40742a <__aeabi_dmul+0x24a>
  4073f6:	ea94 0f0c 	teq	r4, ip
  4073fa:	d102      	bne.n	407402 <__aeabi_dmul+0x222>
  4073fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407400:	d113      	bne.n	40742a <__aeabi_dmul+0x24a>
  407402:	ea95 0f0c 	teq	r5, ip
  407406:	d105      	bne.n	407414 <__aeabi_dmul+0x234>
  407408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40740c:	bf1c      	itt	ne
  40740e:	4610      	movne	r0, r2
  407410:	4619      	movne	r1, r3
  407412:	d10a      	bne.n	40742a <__aeabi_dmul+0x24a>
  407414:	ea81 0103 	eor.w	r1, r1, r3
  407418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40741c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407424:	f04f 0000 	mov.w	r0, #0
  407428:	bd70      	pop	{r4, r5, r6, pc}
  40742a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40742e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407432:	bd70      	pop	{r4, r5, r6, pc}

00407434 <__aeabi_ddiv>:
  407434:	b570      	push	{r4, r5, r6, lr}
  407436:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40743a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40743e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407442:	bf1d      	ittte	ne
  407444:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407448:	ea94 0f0c 	teqne	r4, ip
  40744c:	ea95 0f0c 	teqne	r5, ip
  407450:	f000 f8a7 	bleq	4075a2 <__aeabi_ddiv+0x16e>
  407454:	eba4 0405 	sub.w	r4, r4, r5
  407458:	ea81 0e03 	eor.w	lr, r1, r3
  40745c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407460:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407464:	f000 8088 	beq.w	407578 <__aeabi_ddiv+0x144>
  407468:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40746c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407470:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407474:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407478:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40747c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407480:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407484:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407488:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40748c:	429d      	cmp	r5, r3
  40748e:	bf08      	it	eq
  407490:	4296      	cmpeq	r6, r2
  407492:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407496:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40749a:	d202      	bcs.n	4074a2 <__aeabi_ddiv+0x6e>
  40749c:	085b      	lsrs	r3, r3, #1
  40749e:	ea4f 0232 	mov.w	r2, r2, rrx
  4074a2:	1ab6      	subs	r6, r6, r2
  4074a4:	eb65 0503 	sbc.w	r5, r5, r3
  4074a8:	085b      	lsrs	r3, r3, #1
  4074aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4074ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4074b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4074b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4074ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4074be:	bf22      	ittt	cs
  4074c0:	1ab6      	subcs	r6, r6, r2
  4074c2:	4675      	movcs	r5, lr
  4074c4:	ea40 000c 	orrcs.w	r0, r0, ip
  4074c8:	085b      	lsrs	r3, r3, #1
  4074ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4074ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4074d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4074d6:	bf22      	ittt	cs
  4074d8:	1ab6      	subcs	r6, r6, r2
  4074da:	4675      	movcs	r5, lr
  4074dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4074e0:	085b      	lsrs	r3, r3, #1
  4074e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4074e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4074ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4074ee:	bf22      	ittt	cs
  4074f0:	1ab6      	subcs	r6, r6, r2
  4074f2:	4675      	movcs	r5, lr
  4074f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4074f8:	085b      	lsrs	r3, r3, #1
  4074fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4074fe:	ebb6 0e02 	subs.w	lr, r6, r2
  407502:	eb75 0e03 	sbcs.w	lr, r5, r3
  407506:	bf22      	ittt	cs
  407508:	1ab6      	subcs	r6, r6, r2
  40750a:	4675      	movcs	r5, lr
  40750c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407510:	ea55 0e06 	orrs.w	lr, r5, r6
  407514:	d018      	beq.n	407548 <__aeabi_ddiv+0x114>
  407516:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40751a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40751e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407522:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407526:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40752a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40752e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407532:	d1c0      	bne.n	4074b6 <__aeabi_ddiv+0x82>
  407534:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407538:	d10b      	bne.n	407552 <__aeabi_ddiv+0x11e>
  40753a:	ea41 0100 	orr.w	r1, r1, r0
  40753e:	f04f 0000 	mov.w	r0, #0
  407542:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407546:	e7b6      	b.n	4074b6 <__aeabi_ddiv+0x82>
  407548:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40754c:	bf04      	itt	eq
  40754e:	4301      	orreq	r1, r0
  407550:	2000      	moveq	r0, #0
  407552:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407556:	bf88      	it	hi
  407558:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40755c:	f63f aeaf 	bhi.w	4072be <__aeabi_dmul+0xde>
  407560:	ebb5 0c03 	subs.w	ip, r5, r3
  407564:	bf04      	itt	eq
  407566:	ebb6 0c02 	subseq.w	ip, r6, r2
  40756a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40756e:	f150 0000 	adcs.w	r0, r0, #0
  407572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407576:	bd70      	pop	{r4, r5, r6, pc}
  407578:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40757c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407580:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407584:	bfc2      	ittt	gt
  407586:	ebd4 050c 	rsbsgt	r5, r4, ip
  40758a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40758e:	bd70      	popgt	{r4, r5, r6, pc}
  407590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407594:	f04f 0e00 	mov.w	lr, #0
  407598:	3c01      	subs	r4, #1
  40759a:	e690      	b.n	4072be <__aeabi_dmul+0xde>
  40759c:	ea45 0e06 	orr.w	lr, r5, r6
  4075a0:	e68d      	b.n	4072be <__aeabi_dmul+0xde>
  4075a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4075a6:	ea94 0f0c 	teq	r4, ip
  4075aa:	bf08      	it	eq
  4075ac:	ea95 0f0c 	teqeq	r5, ip
  4075b0:	f43f af3b 	beq.w	40742a <__aeabi_dmul+0x24a>
  4075b4:	ea94 0f0c 	teq	r4, ip
  4075b8:	d10a      	bne.n	4075d0 <__aeabi_ddiv+0x19c>
  4075ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4075be:	f47f af34 	bne.w	40742a <__aeabi_dmul+0x24a>
  4075c2:	ea95 0f0c 	teq	r5, ip
  4075c6:	f47f af25 	bne.w	407414 <__aeabi_dmul+0x234>
  4075ca:	4610      	mov	r0, r2
  4075cc:	4619      	mov	r1, r3
  4075ce:	e72c      	b.n	40742a <__aeabi_dmul+0x24a>
  4075d0:	ea95 0f0c 	teq	r5, ip
  4075d4:	d106      	bne.n	4075e4 <__aeabi_ddiv+0x1b0>
  4075d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4075da:	f43f aefd 	beq.w	4073d8 <__aeabi_dmul+0x1f8>
  4075de:	4610      	mov	r0, r2
  4075e0:	4619      	mov	r1, r3
  4075e2:	e722      	b.n	40742a <__aeabi_dmul+0x24a>
  4075e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4075e8:	bf18      	it	ne
  4075ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4075ee:	f47f aec5 	bne.w	40737c <__aeabi_dmul+0x19c>
  4075f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4075f6:	f47f af0d 	bne.w	407414 <__aeabi_dmul+0x234>
  4075fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4075fe:	f47f aeeb 	bne.w	4073d8 <__aeabi_dmul+0x1f8>
  407602:	e712      	b.n	40742a <__aeabi_dmul+0x24a>

00407604 <__gedf2>:
  407604:	f04f 3cff 	mov.w	ip, #4294967295
  407608:	e006      	b.n	407618 <__cmpdf2+0x4>
  40760a:	bf00      	nop

0040760c <__ledf2>:
  40760c:	f04f 0c01 	mov.w	ip, #1
  407610:	e002      	b.n	407618 <__cmpdf2+0x4>
  407612:	bf00      	nop

00407614 <__cmpdf2>:
  407614:	f04f 0c01 	mov.w	ip, #1
  407618:	f84d cd04 	str.w	ip, [sp, #-4]!
  40761c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407624:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407628:	bf18      	it	ne
  40762a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40762e:	d01b      	beq.n	407668 <__cmpdf2+0x54>
  407630:	b001      	add	sp, #4
  407632:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407636:	bf0c      	ite	eq
  407638:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40763c:	ea91 0f03 	teqne	r1, r3
  407640:	bf02      	ittt	eq
  407642:	ea90 0f02 	teqeq	r0, r2
  407646:	2000      	moveq	r0, #0
  407648:	4770      	bxeq	lr
  40764a:	f110 0f00 	cmn.w	r0, #0
  40764e:	ea91 0f03 	teq	r1, r3
  407652:	bf58      	it	pl
  407654:	4299      	cmppl	r1, r3
  407656:	bf08      	it	eq
  407658:	4290      	cmpeq	r0, r2
  40765a:	bf2c      	ite	cs
  40765c:	17d8      	asrcs	r0, r3, #31
  40765e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407662:	f040 0001 	orr.w	r0, r0, #1
  407666:	4770      	bx	lr
  407668:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40766c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407670:	d102      	bne.n	407678 <__cmpdf2+0x64>
  407672:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407676:	d107      	bne.n	407688 <__cmpdf2+0x74>
  407678:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40767c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407680:	d1d6      	bne.n	407630 <__cmpdf2+0x1c>
  407682:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407686:	d0d3      	beq.n	407630 <__cmpdf2+0x1c>
  407688:	f85d 0b04 	ldr.w	r0, [sp], #4
  40768c:	4770      	bx	lr
  40768e:	bf00      	nop

00407690 <__aeabi_cdrcmple>:
  407690:	4684      	mov	ip, r0
  407692:	4610      	mov	r0, r2
  407694:	4662      	mov	r2, ip
  407696:	468c      	mov	ip, r1
  407698:	4619      	mov	r1, r3
  40769a:	4663      	mov	r3, ip
  40769c:	e000      	b.n	4076a0 <__aeabi_cdcmpeq>
  40769e:	bf00      	nop

004076a0 <__aeabi_cdcmpeq>:
  4076a0:	b501      	push	{r0, lr}
  4076a2:	f7ff ffb7 	bl	407614 <__cmpdf2>
  4076a6:	2800      	cmp	r0, #0
  4076a8:	bf48      	it	mi
  4076aa:	f110 0f00 	cmnmi.w	r0, #0
  4076ae:	bd01      	pop	{r0, pc}

004076b0 <__aeabi_dcmpeq>:
  4076b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4076b4:	f7ff fff4 	bl	4076a0 <__aeabi_cdcmpeq>
  4076b8:	bf0c      	ite	eq
  4076ba:	2001      	moveq	r0, #1
  4076bc:	2000      	movne	r0, #0
  4076be:	f85d fb08 	ldr.w	pc, [sp], #8
  4076c2:	bf00      	nop

004076c4 <__aeabi_dcmplt>:
  4076c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4076c8:	f7ff ffea 	bl	4076a0 <__aeabi_cdcmpeq>
  4076cc:	bf34      	ite	cc
  4076ce:	2001      	movcc	r0, #1
  4076d0:	2000      	movcs	r0, #0
  4076d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4076d6:	bf00      	nop

004076d8 <__aeabi_dcmple>:
  4076d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4076dc:	f7ff ffe0 	bl	4076a0 <__aeabi_cdcmpeq>
  4076e0:	bf94      	ite	ls
  4076e2:	2001      	movls	r0, #1
  4076e4:	2000      	movhi	r0, #0
  4076e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4076ea:	bf00      	nop

004076ec <__aeabi_dcmpge>:
  4076ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4076f0:	f7ff ffce 	bl	407690 <__aeabi_cdrcmple>
  4076f4:	bf94      	ite	ls
  4076f6:	2001      	movls	r0, #1
  4076f8:	2000      	movhi	r0, #0
  4076fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4076fe:	bf00      	nop

00407700 <__aeabi_dcmpgt>:
  407700:	f84d ed08 	str.w	lr, [sp, #-8]!
  407704:	f7ff ffc4 	bl	407690 <__aeabi_cdrcmple>
  407708:	bf34      	ite	cc
  40770a:	2001      	movcc	r0, #1
  40770c:	2000      	movcs	r0, #0
  40770e:	f85d fb08 	ldr.w	pc, [sp], #8
  407712:	bf00      	nop

00407714 <__aeabi_dcmpun>:
  407714:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407718:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40771c:	d102      	bne.n	407724 <__aeabi_dcmpun+0x10>
  40771e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407722:	d10a      	bne.n	40773a <__aeabi_dcmpun+0x26>
  407724:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407728:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40772c:	d102      	bne.n	407734 <__aeabi_dcmpun+0x20>
  40772e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407732:	d102      	bne.n	40773a <__aeabi_dcmpun+0x26>
  407734:	f04f 0000 	mov.w	r0, #0
  407738:	4770      	bx	lr
  40773a:	f04f 0001 	mov.w	r0, #1
  40773e:	4770      	bx	lr

00407740 <__aeabi_d2iz>:
  407740:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407744:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407748:	d215      	bcs.n	407776 <__aeabi_d2iz+0x36>
  40774a:	d511      	bpl.n	407770 <__aeabi_d2iz+0x30>
  40774c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407750:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407754:	d912      	bls.n	40777c <__aeabi_d2iz+0x3c>
  407756:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40775a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40775e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407762:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407766:	fa23 f002 	lsr.w	r0, r3, r2
  40776a:	bf18      	it	ne
  40776c:	4240      	negne	r0, r0
  40776e:	4770      	bx	lr
  407770:	f04f 0000 	mov.w	r0, #0
  407774:	4770      	bx	lr
  407776:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40777a:	d105      	bne.n	407788 <__aeabi_d2iz+0x48>
  40777c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407780:	bf08      	it	eq
  407782:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407786:	4770      	bx	lr
  407788:	f04f 0000 	mov.w	r0, #0
  40778c:	4770      	bx	lr
  40778e:	bf00      	nop

00407790 <__aeabi_uldivmod>:
  407790:	b953      	cbnz	r3, 4077a8 <__aeabi_uldivmod+0x18>
  407792:	b94a      	cbnz	r2, 4077a8 <__aeabi_uldivmod+0x18>
  407794:	2900      	cmp	r1, #0
  407796:	bf08      	it	eq
  407798:	2800      	cmpeq	r0, #0
  40779a:	bf1c      	itt	ne
  40779c:	f04f 31ff 	movne.w	r1, #4294967295
  4077a0:	f04f 30ff 	movne.w	r0, #4294967295
  4077a4:	f000 b97a 	b.w	407a9c <__aeabi_idiv0>
  4077a8:	f1ad 0c08 	sub.w	ip, sp, #8
  4077ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4077b0:	f000 f806 	bl	4077c0 <__udivmoddi4>
  4077b4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4077b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4077bc:	b004      	add	sp, #16
  4077be:	4770      	bx	lr

004077c0 <__udivmoddi4>:
  4077c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4077c4:	468c      	mov	ip, r1
  4077c6:	460d      	mov	r5, r1
  4077c8:	4604      	mov	r4, r0
  4077ca:	9e08      	ldr	r6, [sp, #32]
  4077cc:	2b00      	cmp	r3, #0
  4077ce:	d151      	bne.n	407874 <__udivmoddi4+0xb4>
  4077d0:	428a      	cmp	r2, r1
  4077d2:	4617      	mov	r7, r2
  4077d4:	d96d      	bls.n	4078b2 <__udivmoddi4+0xf2>
  4077d6:	fab2 fe82 	clz	lr, r2
  4077da:	f1be 0f00 	cmp.w	lr, #0
  4077de:	d00b      	beq.n	4077f8 <__udivmoddi4+0x38>
  4077e0:	f1ce 0c20 	rsb	ip, lr, #32
  4077e4:	fa01 f50e 	lsl.w	r5, r1, lr
  4077e8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4077ec:	fa02 f70e 	lsl.w	r7, r2, lr
  4077f0:	ea4c 0c05 	orr.w	ip, ip, r5
  4077f4:	fa00 f40e 	lsl.w	r4, r0, lr
  4077f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4077fc:	0c25      	lsrs	r5, r4, #16
  4077fe:	fbbc f8fa 	udiv	r8, ip, sl
  407802:	fa1f f987 	uxth.w	r9, r7
  407806:	fb0a cc18 	mls	ip, sl, r8, ip
  40780a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40780e:	fb08 f309 	mul.w	r3, r8, r9
  407812:	42ab      	cmp	r3, r5
  407814:	d90a      	bls.n	40782c <__udivmoddi4+0x6c>
  407816:	19ed      	adds	r5, r5, r7
  407818:	f108 32ff 	add.w	r2, r8, #4294967295
  40781c:	f080 8123 	bcs.w	407a66 <__udivmoddi4+0x2a6>
  407820:	42ab      	cmp	r3, r5
  407822:	f240 8120 	bls.w	407a66 <__udivmoddi4+0x2a6>
  407826:	f1a8 0802 	sub.w	r8, r8, #2
  40782a:	443d      	add	r5, r7
  40782c:	1aed      	subs	r5, r5, r3
  40782e:	b2a4      	uxth	r4, r4
  407830:	fbb5 f0fa 	udiv	r0, r5, sl
  407834:	fb0a 5510 	mls	r5, sl, r0, r5
  407838:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40783c:	fb00 f909 	mul.w	r9, r0, r9
  407840:	45a1      	cmp	r9, r4
  407842:	d909      	bls.n	407858 <__udivmoddi4+0x98>
  407844:	19e4      	adds	r4, r4, r7
  407846:	f100 33ff 	add.w	r3, r0, #4294967295
  40784a:	f080 810a 	bcs.w	407a62 <__udivmoddi4+0x2a2>
  40784e:	45a1      	cmp	r9, r4
  407850:	f240 8107 	bls.w	407a62 <__udivmoddi4+0x2a2>
  407854:	3802      	subs	r0, #2
  407856:	443c      	add	r4, r7
  407858:	eba4 0409 	sub.w	r4, r4, r9
  40785c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407860:	2100      	movs	r1, #0
  407862:	2e00      	cmp	r6, #0
  407864:	d061      	beq.n	40792a <__udivmoddi4+0x16a>
  407866:	fa24 f40e 	lsr.w	r4, r4, lr
  40786a:	2300      	movs	r3, #0
  40786c:	6034      	str	r4, [r6, #0]
  40786e:	6073      	str	r3, [r6, #4]
  407870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407874:	428b      	cmp	r3, r1
  407876:	d907      	bls.n	407888 <__udivmoddi4+0xc8>
  407878:	2e00      	cmp	r6, #0
  40787a:	d054      	beq.n	407926 <__udivmoddi4+0x166>
  40787c:	2100      	movs	r1, #0
  40787e:	e886 0021 	stmia.w	r6, {r0, r5}
  407882:	4608      	mov	r0, r1
  407884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407888:	fab3 f183 	clz	r1, r3
  40788c:	2900      	cmp	r1, #0
  40788e:	f040 808e 	bne.w	4079ae <__udivmoddi4+0x1ee>
  407892:	42ab      	cmp	r3, r5
  407894:	d302      	bcc.n	40789c <__udivmoddi4+0xdc>
  407896:	4282      	cmp	r2, r0
  407898:	f200 80fa 	bhi.w	407a90 <__udivmoddi4+0x2d0>
  40789c:	1a84      	subs	r4, r0, r2
  40789e:	eb65 0503 	sbc.w	r5, r5, r3
  4078a2:	2001      	movs	r0, #1
  4078a4:	46ac      	mov	ip, r5
  4078a6:	2e00      	cmp	r6, #0
  4078a8:	d03f      	beq.n	40792a <__udivmoddi4+0x16a>
  4078aa:	e886 1010 	stmia.w	r6, {r4, ip}
  4078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078b2:	b912      	cbnz	r2, 4078ba <__udivmoddi4+0xfa>
  4078b4:	2701      	movs	r7, #1
  4078b6:	fbb7 f7f2 	udiv	r7, r7, r2
  4078ba:	fab7 fe87 	clz	lr, r7
  4078be:	f1be 0f00 	cmp.w	lr, #0
  4078c2:	d134      	bne.n	40792e <__udivmoddi4+0x16e>
  4078c4:	1beb      	subs	r3, r5, r7
  4078c6:	0c3a      	lsrs	r2, r7, #16
  4078c8:	fa1f fc87 	uxth.w	ip, r7
  4078cc:	2101      	movs	r1, #1
  4078ce:	fbb3 f8f2 	udiv	r8, r3, r2
  4078d2:	0c25      	lsrs	r5, r4, #16
  4078d4:	fb02 3318 	mls	r3, r2, r8, r3
  4078d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4078dc:	fb0c f308 	mul.w	r3, ip, r8
  4078e0:	42ab      	cmp	r3, r5
  4078e2:	d907      	bls.n	4078f4 <__udivmoddi4+0x134>
  4078e4:	19ed      	adds	r5, r5, r7
  4078e6:	f108 30ff 	add.w	r0, r8, #4294967295
  4078ea:	d202      	bcs.n	4078f2 <__udivmoddi4+0x132>
  4078ec:	42ab      	cmp	r3, r5
  4078ee:	f200 80d1 	bhi.w	407a94 <__udivmoddi4+0x2d4>
  4078f2:	4680      	mov	r8, r0
  4078f4:	1aed      	subs	r5, r5, r3
  4078f6:	b2a3      	uxth	r3, r4
  4078f8:	fbb5 f0f2 	udiv	r0, r5, r2
  4078fc:	fb02 5510 	mls	r5, r2, r0, r5
  407900:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407904:	fb0c fc00 	mul.w	ip, ip, r0
  407908:	45a4      	cmp	ip, r4
  40790a:	d907      	bls.n	40791c <__udivmoddi4+0x15c>
  40790c:	19e4      	adds	r4, r4, r7
  40790e:	f100 33ff 	add.w	r3, r0, #4294967295
  407912:	d202      	bcs.n	40791a <__udivmoddi4+0x15a>
  407914:	45a4      	cmp	ip, r4
  407916:	f200 80b8 	bhi.w	407a8a <__udivmoddi4+0x2ca>
  40791a:	4618      	mov	r0, r3
  40791c:	eba4 040c 	sub.w	r4, r4, ip
  407920:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407924:	e79d      	b.n	407862 <__udivmoddi4+0xa2>
  407926:	4631      	mov	r1, r6
  407928:	4630      	mov	r0, r6
  40792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40792e:	f1ce 0420 	rsb	r4, lr, #32
  407932:	fa05 f30e 	lsl.w	r3, r5, lr
  407936:	fa07 f70e 	lsl.w	r7, r7, lr
  40793a:	fa20 f804 	lsr.w	r8, r0, r4
  40793e:	0c3a      	lsrs	r2, r7, #16
  407940:	fa25 f404 	lsr.w	r4, r5, r4
  407944:	ea48 0803 	orr.w	r8, r8, r3
  407948:	fbb4 f1f2 	udiv	r1, r4, r2
  40794c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407950:	fb02 4411 	mls	r4, r2, r1, r4
  407954:	fa1f fc87 	uxth.w	ip, r7
  407958:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40795c:	fb01 f30c 	mul.w	r3, r1, ip
  407960:	42ab      	cmp	r3, r5
  407962:	fa00 f40e 	lsl.w	r4, r0, lr
  407966:	d909      	bls.n	40797c <__udivmoddi4+0x1bc>
  407968:	19ed      	adds	r5, r5, r7
  40796a:	f101 30ff 	add.w	r0, r1, #4294967295
  40796e:	f080 808a 	bcs.w	407a86 <__udivmoddi4+0x2c6>
  407972:	42ab      	cmp	r3, r5
  407974:	f240 8087 	bls.w	407a86 <__udivmoddi4+0x2c6>
  407978:	3902      	subs	r1, #2
  40797a:	443d      	add	r5, r7
  40797c:	1aeb      	subs	r3, r5, r3
  40797e:	fa1f f588 	uxth.w	r5, r8
  407982:	fbb3 f0f2 	udiv	r0, r3, r2
  407986:	fb02 3310 	mls	r3, r2, r0, r3
  40798a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40798e:	fb00 f30c 	mul.w	r3, r0, ip
  407992:	42ab      	cmp	r3, r5
  407994:	d907      	bls.n	4079a6 <__udivmoddi4+0x1e6>
  407996:	19ed      	adds	r5, r5, r7
  407998:	f100 38ff 	add.w	r8, r0, #4294967295
  40799c:	d26f      	bcs.n	407a7e <__udivmoddi4+0x2be>
  40799e:	42ab      	cmp	r3, r5
  4079a0:	d96d      	bls.n	407a7e <__udivmoddi4+0x2be>
  4079a2:	3802      	subs	r0, #2
  4079a4:	443d      	add	r5, r7
  4079a6:	1aeb      	subs	r3, r5, r3
  4079a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4079ac:	e78f      	b.n	4078ce <__udivmoddi4+0x10e>
  4079ae:	f1c1 0720 	rsb	r7, r1, #32
  4079b2:	fa22 f807 	lsr.w	r8, r2, r7
  4079b6:	408b      	lsls	r3, r1
  4079b8:	fa05 f401 	lsl.w	r4, r5, r1
  4079bc:	ea48 0303 	orr.w	r3, r8, r3
  4079c0:	fa20 fe07 	lsr.w	lr, r0, r7
  4079c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4079c8:	40fd      	lsrs	r5, r7
  4079ca:	ea4e 0e04 	orr.w	lr, lr, r4
  4079ce:	fbb5 f9fc 	udiv	r9, r5, ip
  4079d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4079d6:	fb0c 5519 	mls	r5, ip, r9, r5
  4079da:	fa1f f883 	uxth.w	r8, r3
  4079de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4079e2:	fb09 f408 	mul.w	r4, r9, r8
  4079e6:	42ac      	cmp	r4, r5
  4079e8:	fa02 f201 	lsl.w	r2, r2, r1
  4079ec:	fa00 fa01 	lsl.w	sl, r0, r1
  4079f0:	d908      	bls.n	407a04 <__udivmoddi4+0x244>
  4079f2:	18ed      	adds	r5, r5, r3
  4079f4:	f109 30ff 	add.w	r0, r9, #4294967295
  4079f8:	d243      	bcs.n	407a82 <__udivmoddi4+0x2c2>
  4079fa:	42ac      	cmp	r4, r5
  4079fc:	d941      	bls.n	407a82 <__udivmoddi4+0x2c2>
  4079fe:	f1a9 0902 	sub.w	r9, r9, #2
  407a02:	441d      	add	r5, r3
  407a04:	1b2d      	subs	r5, r5, r4
  407a06:	fa1f fe8e 	uxth.w	lr, lr
  407a0a:	fbb5 f0fc 	udiv	r0, r5, ip
  407a0e:	fb0c 5510 	mls	r5, ip, r0, r5
  407a12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  407a16:	fb00 f808 	mul.w	r8, r0, r8
  407a1a:	45a0      	cmp	r8, r4
  407a1c:	d907      	bls.n	407a2e <__udivmoddi4+0x26e>
  407a1e:	18e4      	adds	r4, r4, r3
  407a20:	f100 35ff 	add.w	r5, r0, #4294967295
  407a24:	d229      	bcs.n	407a7a <__udivmoddi4+0x2ba>
  407a26:	45a0      	cmp	r8, r4
  407a28:	d927      	bls.n	407a7a <__udivmoddi4+0x2ba>
  407a2a:	3802      	subs	r0, #2
  407a2c:	441c      	add	r4, r3
  407a2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  407a32:	eba4 0408 	sub.w	r4, r4, r8
  407a36:	fba0 8902 	umull	r8, r9, r0, r2
  407a3a:	454c      	cmp	r4, r9
  407a3c:	46c6      	mov	lr, r8
  407a3e:	464d      	mov	r5, r9
  407a40:	d315      	bcc.n	407a6e <__udivmoddi4+0x2ae>
  407a42:	d012      	beq.n	407a6a <__udivmoddi4+0x2aa>
  407a44:	b156      	cbz	r6, 407a5c <__udivmoddi4+0x29c>
  407a46:	ebba 030e 	subs.w	r3, sl, lr
  407a4a:	eb64 0405 	sbc.w	r4, r4, r5
  407a4e:	fa04 f707 	lsl.w	r7, r4, r7
  407a52:	40cb      	lsrs	r3, r1
  407a54:	431f      	orrs	r7, r3
  407a56:	40cc      	lsrs	r4, r1
  407a58:	6037      	str	r7, [r6, #0]
  407a5a:	6074      	str	r4, [r6, #4]
  407a5c:	2100      	movs	r1, #0
  407a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a62:	4618      	mov	r0, r3
  407a64:	e6f8      	b.n	407858 <__udivmoddi4+0x98>
  407a66:	4690      	mov	r8, r2
  407a68:	e6e0      	b.n	40782c <__udivmoddi4+0x6c>
  407a6a:	45c2      	cmp	sl, r8
  407a6c:	d2ea      	bcs.n	407a44 <__udivmoddi4+0x284>
  407a6e:	ebb8 0e02 	subs.w	lr, r8, r2
  407a72:	eb69 0503 	sbc.w	r5, r9, r3
  407a76:	3801      	subs	r0, #1
  407a78:	e7e4      	b.n	407a44 <__udivmoddi4+0x284>
  407a7a:	4628      	mov	r0, r5
  407a7c:	e7d7      	b.n	407a2e <__udivmoddi4+0x26e>
  407a7e:	4640      	mov	r0, r8
  407a80:	e791      	b.n	4079a6 <__udivmoddi4+0x1e6>
  407a82:	4681      	mov	r9, r0
  407a84:	e7be      	b.n	407a04 <__udivmoddi4+0x244>
  407a86:	4601      	mov	r1, r0
  407a88:	e778      	b.n	40797c <__udivmoddi4+0x1bc>
  407a8a:	3802      	subs	r0, #2
  407a8c:	443c      	add	r4, r7
  407a8e:	e745      	b.n	40791c <__udivmoddi4+0x15c>
  407a90:	4608      	mov	r0, r1
  407a92:	e708      	b.n	4078a6 <__udivmoddi4+0xe6>
  407a94:	f1a8 0802 	sub.w	r8, r8, #2
  407a98:	443d      	add	r5, r7
  407a9a:	e72b      	b.n	4078f4 <__udivmoddi4+0x134>

00407a9c <__aeabi_idiv0>:
  407a9c:	4770      	bx	lr
  407a9e:	bf00      	nop
  407aa0:	0001c200 	.word	0x0001c200
  407aa4:	000000c0 	.word	0x000000c0
  407aa8:	00000800 	.word	0x00000800
  407aac:	00000000 	.word	0x00000000
  407ab0:	63696e49 	.word	0x63696e49
  407ab4:	696c6169 	.word	0x696c6169
  407ab8:	646e617a 	.word	0x646e617a
  407abc:	7562206f 	.word	0x7562206f
  407ac0:	32692073 	.word	0x32692073
  407ac4:	00002063 	.word	0x00002063
  407ac8:	646e6556 	.word	0x646e6556
  407acc:	3a444920 	.word	0x3a444920
  407ad0:	25783020 	.word	0x25783020
  407ad4:	00000a78 	.word	0x00000a78
  407ad8:	6d726946 	.word	0x6d726946
  407adc:	72655620 	.word	0x72655620
  407ae0:	7830203a 	.word	0x7830203a
  407ae4:	000a7825 	.word	0x000a7825
  407ae8:	20433249 	.word	0x20433249
  407aec:	00000024 	.word	0x00000024
  407af0:	00007825 	.word	0x00007825
  407af4:	30203d20 	.word	0x30203d20
  407af8:	00000078 	.word	0x00000078
  407afc:	0a782578 	.word	0x0a782578
  407b00:	00000000 	.word	0x00000000
  407b04:	63756f54 	.word	0x63756f54
  407b08:	203d2068 	.word	0x203d2068
  407b0c:	000a6425 	.word	0x000a6425

00407b10 <_global_impure_ptr>:
  407b10:	20400010 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  407b20:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  407b30:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  407b40:	37363534 62613938 66656463 00000000     456789abcdef....
  407b50:	6c756e28 0000296c 00000030              (null)..0...

00407b5c <blanks.7238>:
  407b5c:	20202020 20202020 20202020 20202020                     

00407b6c <zeroes.7239>:
  407b6c:	30303030 30303030 30303030 30303030     0000000000000000
  407b7c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  407b8c:	00000000                                ....

00407b90 <__mprec_bigtens>:
  407b90:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407ba0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407bb0:	7f73bf3c 75154fdd                       <.s..O.u

00407bb8 <__mprec_tens>:
  407bb8:	00000000 3ff00000 00000000 40240000     .......?......$@
  407bc8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407bd8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407be8:	00000000 412e8480 00000000 416312d0     .......A......cA
  407bf8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407c08:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407c18:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407c28:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407c38:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407c48:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407c58:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407c68:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407c78:	79d99db4 44ea7843                       ...yCx.D

00407c80 <p05.6055>:
  407c80:	00000005 00000019 0000007d 00000043     ........}...C...
  407c90:	49534f50 00000058 0000002e              POSIX.......

00407c9c <_ctype_>:
  407c9c:	20202000 20202020 28282020 20282828     .         ((((( 
  407cac:	20202020 20202020 20202020 20202020                     
  407cbc:	10108820 10101010 10101010 10101010      ...............
  407ccc:	04040410 04040404 10040404 10101010     ................
  407cdc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407cec:	01010101 01010101 01010101 10101010     ................
  407cfc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407d0c:	02020202 02020202 02020202 10101010     ................
  407d1c:	00000020 00000000 00000000 00000000      ...............
	...

00407da0 <_init>:
  407da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407da2:	bf00      	nop
  407da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407da6:	bc08      	pop	{r3}
  407da8:	469e      	mov	lr, r3
  407daa:	4770      	bx	lr

00407dac <__init_array_start>:
  407dac:	00403d81 	.word	0x00403d81

00407db0 <__frame_dummy_init_array_entry>:
  407db0:	00400165                                e.@.

00407db4 <_fini>:
  407db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407db6:	bf00      	nop
  407db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dba:	bc08      	pop	{r3}
  407dbc:	469e      	mov	lr, r3
  407dbe:	4770      	bx	lr

00407dc0 <__fini_array_start>:
  407dc0:	00400141 	.word	0x00400141
